id,bai,tieude,noidung
1,Biến trong JavaScript,Bài: Biến trong JavaScript (Phần 1) - Biến và Hằng số,"Xem bài học trên website để ủng hộ Kteam:
Biến trong JavaScript (Phần 1) - Biến và Hằng số
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
2,Biến trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
các khái niệm cơ bản nhất
của một chương trinh JavaScript. Ở bài này, chúng ta sẽ cùng nhau
tìm hiểu về
biến trong  JavaScript
."
3,Biến trong JavaScript,Nội dung chính,"Để nắm được nội dung bài này, bạn cần:
Cài đặt sẵn môi trường nodejs
Hiểu về
câu lệnh, khối lệnh trong JavaScript
Cụ thể, ở bài này, nội dung mà chúng ta sẽ cùng tìm hiểu:
Khái quát về biến trong JavaScript
Biến cục bộ và biến toàn cục
Hằng số trong JavaScript"
4,Biến trong JavaScript,Khái quát về biến trong JavaScript,"Biến là gì ?
Hiểu một cách đơn giản, biến là một đại diện cho một
phân vùng bộ nhớ nhất định
, giúp lưu trữ các giá trị cần thiết. Việc gọi ra một biến cũng
tương đương với việc ta lấy ra giá trị của một vùng bộ nhớ nào đó.
Biến trong JavaScript
Trong JavaScript, một biến chỉ có thể được sử dụng khi nó được khai báo. Một biến có thể được khai báo theo một trong 2 cách: sử dụng từ khóa
let
hoặc sử dụng từ khóa
var
.
Cú pháp:
<Từ_khóa>
<tên biến>
=
<giá trị khởi đầu>
;
Trong đó:
<Từ_khóa>
: Là một trong 2 từ khóa:
let
hoặc
var
.
<tên biến>
: Là tên của biến mà bạn định khởi tạo. Tên biến phải phù hợp với các yêu cầu sau:
Tên có thể bao gồm các kí tự chữ cái, kí tự số, dấu gạch dưới hoặc kí hiệu đô la ($)
Tên
không
được bắt đầu bằng số
<giá trị khởi đầu>
: là một giá trị hợp lệ trong Js, nó sẽ là giá trị của biến sau khi được khởi tạo.
Ví dụ:
Javascript:
Biến trong JavaScript (Phần 1) - Biến và Hằng số
2
|3

let myVariable = 5; // Khởi tạo biến myVariable có giá trị là 5
//undefined
var name = ""Kteam""; // Khởi tạo biến name có giá trị là “Kteam”
//undefined
name // in ra giá trị của biến name
//'Kteam'
myVariable // in ra giá trị của biến myVariable
//5
var u // Khởi tạo biến u
//undefined
u // in ra giá tị của biến u
//Undefined
var 5$ = 5; // vi phạm quy tắc đặt tên
//var 5$ = 5;
^
//Uncaught SyntaxError: Invalid or unexpected token
Lưu ý:
Không khuyến khích đặt tên biến bằng các từ khóa.
<
giá trị khởi đầu
>
có thể có hoặc không. Nếu giá trị khởi đầu không được xác định, thì nó sẽ là
undefined
.
JavaScript có phân biệt chữ hoa và chữ thường, do đó
for
khác với
FOR"
5,Biến trong JavaScript,Biến cục bộ và biến toàn cục,"Biến cục bộ
Biến cục bộ
là biến chỉ có thể được
sử dụng nội bộ
bên trong một khối lệnh hay một hàm (khái niệm sẽ được Kteam đề cập ở các bài sau).
Việc cố gắng sử dụng biến cục bộ ở bên ngoài khối lệnh của nó sẽ gây ra
lỗi
.
Trong JavaScript , một biến cục bộ sẽ được khai báo bằng từ khóa
let
.
Ví dụ:
Javascript:
{
let how = 5; // Khởi tạo biến how bằng 5
{
console.log(how); // in ra 5, vì how đã được khai báo
let kteam = ""Kteam""; // Khởi tạo biến kteam bằng “Kteam”
}
console.log(kteam); // Báo lỗi, vì biến kteam chỉ có thể được sử dụng bên trong khối lệnh chứa nó
}
// 5
// Uncaught ReferenceError: kteam is not defined
Biến toàn cục
Biến toàn cục
là biến mà có thể được sử dụng ở
bất kì vị trí nào
bên trong chương trình.
Không giới hạn các vị trí mà có thể dùng biến toàn cục.
Trong JavaScript , biến toàn cục được khởi tạo bằng từ khóa
var
.
Ví dụ:
Biến trong JavaScript (Phần 1) - Biến và Hằng số
3
|3

Javascript:
{
var kteam = ""kteam""; // Khởi tạo biến toàn cục kteam = “kteam”
{
var how = ""how""; // khởi tạo biến toàn cục how = “how”
}
console.log(how); // in ra how
}
// how
// undefined
console.log(kteam); // in ra kteam
// kteam
// undefined"
6,Biến trong JavaScript,Hằng số,"Hằng số
là một giá trị được khởi tạo một lần trong chương trình và là
bất biến
(không thể thay đổi)
Việc cố gắng thay đổi một hằng số, chắc chắn rồi, sẽ gây ra lỗi.
Trong JavaScript , hằng số được khởi tạo bằng từ khóa
const
.
Ví dụ:
Javascript:
const a = 12;
// undefined
a
// 12
a = 123
// Uncaught TypeError: Assignment to constant variable."
7,Biến trong JavaScript,Kết luận,"Qua bài này, các bạn đã được tìm hiểu về các khái niệm cơ bản nhất về biến trong Js.
Ở bài sau, chúng ta sẽ cùng tìm hiểu về hai từ khóa
:
Khởi tạo biến bằng từ khóa var và let trong JavaScript
.
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
8,Biến trong JavaScript,var và let,"Xem bài học trên website để ủng hộ Kteam:
Biến trong JavaScript (Phần 2) - Khởi tạo biến bằng từ khóa var và let
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
9,Biến trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu
các đặc điểm cơ bản của biến trong JavaScript
.
Ở bài này, chúng ta sẽ cùng tìm hiểu kĩ hơn về
cách khởi tạo biến trong JavaScript, hai từ khóa là let và var
."
10,Biến trong JavaScript,Nội dung,"Để bắt đầu học bài này, các bạn cần nắm vững kiến thức về:
Các khái niệm cơ bản về biến trong JavaScript
Kiến thức về biến cục bộ và biến toàn cục
Hiểu về khối lệnh trong JavaScript
Ở bài này, có 2 nội dung mà chúng ta sẽ được tiếp cận:
Khởi tạo biến bằng từ khóa let
Khởi tạo biến bằng từ khóa var
Những sự khác biệt giữa 2 cách khởi tạo var và let"
11,Biến trong JavaScript,Khởi tạo biến bằng từ khóa let,"Từ khóa let
giúp chúng ta khởi tạo một
biến cục bộ
, tức là chỉ có thể được sử dụng bên trong khối lệnh nơi nó được khởi tạo.
Nếu các bạn còn nhớ, thì việc cố gắng truy cập vào một biến cục bộ ở nơi không phù hợp sẽ gây lỗi.
Ví dụ:
Javascript:
{
let t = ""Kteam"";
}
// undefined
t
// Uncaught ReferenceError: t is not defined"
12,Biến trong JavaScript,Khởi tạo biến bằng từ khóa var,"Ngược lại với
let
,
từ khóa var
giúp chúng ta khởi tạo
biến toàn cục
. Tức là, biến đó có thể được truy cập từ bất kì vị trí nào trong chương trình. Tuy
nhiên, đối với
hàm
(chương trình con), thì dùng từ khóa
var
sẽ tạo ra các biến chỉ có thể được sử dụng bên trong hàm đó. Điều này sẽ được Kteam
giải thích kĩ hơn ở bài “function trong Js”.
Ví dụ:
Javascript:
Biến trong JavaScript (Phần 2) - Khởi tạo biến bằng từ khóa var và let
2
|2

{
var t = ""Kteam"";
}
// undefined
t
// Kteam
// undefined
Tuy nhiên, Kteam không khuyến khích các bạn dùng quá nhiều biến toàn cục nếu không thực sự cần thiết, thay vào đó giải pháp tối ưu là dùng biến
cục bộ nếu có thể."
13,Biến trong JavaScript,Những sự khác biệt giữa 2 cách khởi tạo var và let,"Ngoài sự khác biệt cơ bản (
let
– biến cục bộ,
var
– biến toàn cục), thì việc khởi tạo biến bằng 2 cách cũng có nhiều sự khác biệt thú vị khác.
var
cho phép sử dụng biến trước khi được khởi tạo (trước khi xuất hiện câu lệnh khởi tạo, giá trị ban đầu là
undefined
), còn
let
thì không
:
console.log(t);
// in ra undefined
var t = 10;
:
console.log(f); // in ra
lỗi
let f = 5;
Về việc khởi tạo lại một biến, thì var cho phép, còn let sẽ nhả ra lỗi. Thực chất, khởi tạo lại bằng var chỉ là làm
thay đổi
giá trị của biến đó mà thôi.
:
let t = 4
// undefined
let t = 3
// Uncaught SyntaxError:
Identifier 't' has already
been declared
:
var t = 4
// undefined
var t = 6
// undefined
t
// 6
Lưu ý:
Ta không thể khởi tạo lại một biến bằng var nếu như nó đã được khởi tạo bằng let trước đó. Việc làm ngược lại cũng là
sai
."
14,Biến trong JavaScript,Kết luận,"Qua bài này, các bạn đã được tìm hiểu về cách sử dụng 2 từ khóa: let và var trong JavaScript
Ở bài sau, chúng ta sẽ cùng tìm hiểu về
toán tử gán và các toán tử so sánh trong JavaScript
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
15,Biến trong JavaScript,so sánh,"Xem bài học trên website để ủng hộ Kteam:
Biến trong JavaScript (Phần 3) - Toán tử gán và các toán tử so sánh
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
16,Biến trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ra đã tìm hiểu về 2 cách khởi tạo biến trong JavaScript
sử dùng các từ khóa var và let
Ở bài này, chúng ta sẽ cùng
tìm hiểu về toán tử gán, các toán tử so sánh trong JavaScript"
17,Biến trong JavaScript,Nội dung,"Để nắm được nội dung bài này, tốt nhất bạn cần:
Các kiến thức cơ bản về biến trong JavaScript
Trong bài này, chúng ta sẽ cùng tìm hiểu về:
Kiểm tra kiểu dữ liệu của biến bằng cú pháp typeof
Toán tử gán trong JavaScript
Các toán tử so sánh trong JavaScript"
18,Biến trong JavaScript,Toán tử gán trong JavaScript,"Để thay đổi giá trị của một biến, thì ta sử dụng phép gán:
<tên biến>
=
<giá trị>
Ví dụ 1:
Javascript:
let t = ""Kteam""
// undefined
t = ""Kter""
// 'Kter'
t
// 'Kter'
Sau khi thực hiện phép gán, biến sẽ mang giá trị mà ta truyền vào
<giá trị>
, miễn là nó hợp lệ.
Bên cạnh đó, nếu muốn gán nhiều biến cho cùng một giá trị, thì ta dùng cú pháp:
<tên biến 1>
=
<tên biến 2>
=
<tên biến 3>
= … =
<giá trị>
Ví dụ 2:
Javascript:
Biến trong JavaScript (Phần 3) - Toán tử gán và các toán tử so sánh
2
|4

let a, b, c
// undefined
a = b = c = 1
// 1
a
// 1
b
// 1
c
// 1
Nếu muốn thực hiện nhiều phép gán trên một dòng, với các biến và các giá trị khác nhau, thì cú pháp sau đây sẽ giúp bạn:
[
<tên biến 1>
,
<tên biến 2>
,
<tên biến 3>
, …,
<tên biến n>
] = [
<giá trị 1>
,
<giá trị 2>
,
<giá trị 3>
, …,
<giá trị n>
]
Ví dụ 3:
Javascript:
let a, b, c
// undefined
[a, b, c] = [1, 2, 3]
// [ 1, 2, 3 ]
a
// 1
b
// 2
c
// 3"
19,Biến trong JavaScript,Kiểm tra kiểu dữ liệu của một biến,"Để kiểm tra kiểu dữ liệu của một biến, ta dùng cú pháp sau:
typeof(
<tên biến>
)
Giá trị trả về sẽ là
kiểu dữ liệu
của biến, ví dụ như sau:
Javascript:
var a = 100, b = ""Kteam""; // Khởi tạo 2 biến cùng một lúc
// undefined
typeof(a) // in ra kiểu dữ liệu của biến a
// 'number'
typeof(b) // in ra kiểu dữ liệu của biến b
// 'string'
*Note
:
JavaScript  không bắt buộc một biến phải mang một kiểu dữ liệu cố định nào đó. Điều đó giúp chúng ta có thể thực hiện phép gán vô
cùng thuận tiện, vì có thể gán một biến từ kiểu dữ liệu này sang
kiểu dữ liệu khác."
20,Biến trong JavaScript,Các toán tử so sánh trong Js,"Trong thực tế, chúng ta thực hiện rất nhiều phép so sánh:
3 nhỏ hơn 4
Con chuột bự hơn con bò
Biến trong JavaScript (Phần 3) - Toán tử gán và các toán tử so sánh
3
|4

Con châu chấu mạnh hơn cái xe
etc
Với mỗi phép so sánh như vậy, thì sẽ có một kết quả tương ứng, đó là đúng hoặc sai:
3 nhỏ hơn 4  à đúng
Con chuột bự hơn con bò  à sai
Con châu chấu mạnh hơn cái xe  à sai
etc
Trong JavaScript cũng hỗ trợ các phép so sánh như vậy. Ở mức độ cơ bản, thì nó là việc so sánh các giá trị mang cùng một kiểu dữ liệu với nhau. Lấy
ví dụ với số:
3 < 4 à đúng
6 > 7 à sai
4
≤
4 à đúng
3 > 3 à sai
etc
Đối với JavaScript, thì các giá trị đúng – sai được biểu thị bằng 2 giá trị:
true
hoặc
false
.
3 < 4 à true
6 > 7 à false
4
≤
4 à true
3 > 3 à false
etc
Javascript:
3 < 4
// true
6 > 7
// false
4 <= 4
// true
3 > 3
// false
Các toán tử đứng giữa 2 giá trị trong phép so sánh được gọi là
toán tử so sánh
. Trong JavaScript , có các toán tử so sánh sau:
Toán tử
Kí hiệu toán học
==
=
!=
≠
>
>
<
<
>=
≥
<=
≤
Bên cạnh đó, còn 2 loại toán tử so sánh khác:
===
: trả về
true
nếu 2 giá trị bằng nhau và cùng kiểu dữ liệu
!==
: trả về
true
nếu 2 giá trị khác nhau hoặc khác kiểu dữ liệu
Biến trong JavaScript (Phần 3) - Toán tử gán và các toán tử so sánh
4
|4

Ví dụ:
Javascript:
1 === 2 // 2 giá trị không bằng nhau
// false
2 === 2 // 2 giá trị bằng nhau, cùng kiểu
// true
'2' == 2 // 2 giá trị bằng nhau (Kteam xin phép đề cập ở bài sau)
// true
'2' === 2 // Bằng nhau, nhưng khác kiểu
// false
'2' !== 2 // Khác kiểu dữ liệu (String != Number)
// true"
21,Biến trong JavaScript,Kết luận,"Qua bài này, các bạn đã được tìm hiểu về phép gán, cú pháp typeof, cũng như là các toán tử so sánh trong Js
Ở bài sau, chúng ta sẽ cùng làm
Bài tập về biến trong JavaScript
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
22,Biến trong JavaScript,Bài: Bài tập về Biến trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về Biến trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập để củng cố kiến thức về
Biến trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập kiểu dữ liệu Number
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
23,Biến trong JavaScript,Câu hỏi về biến trong JavaScript,"Câu 1:
Cho biết kết quả của đoạn code sau và giải thích.
Javascript:
var t = 3;
var u = 4;
{
var t = 6;
var u = 5;
console.log(t, u);
}
console.log(t, u);
Câu 2:
Phân biệt biến cục bộ, biến toàn cục và hằng số.
Câu 3:
Cho biết kết quả của đoạn code sau:
Javascript:
var u = 'kteam';
var v = 'kter';
{
let u = 1;
let v = 2;
console.log(u, v);
}
console.log(u, v);
Câu 4:
Phép so sánh nào dưới đây trả về kết quả true ?
a. 1 >= 2
b. 1 > 2
c. 1 == 2
d. 1 != 2
Bài tập về Biến trong JavaScript
2
|2

Câu 5:
Nêu công dụng của toán tử === và !==, so sánh với các toán tử == và !=.
Câu 6:
Hãy chỉ ra các toán tử so sánh trong JavaScript và công dụng của chúng."
24,các giá trị Null và Undefined trong JavaScript,Bài: Bài tập về các giá trị Null và Undefined trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về các giá trị Null và Undefined trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Các giá trị Null và Undefined trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về câu lệnh điều kiện trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
25,các giá trị Null và Undefined trong JavaScript,Câu hỏi về Null và Undefined trong JavaScript,"Câu 1:
Khi nào thì giá trị undefined xuất hiện ?
Câu 2:
Null đại diện cho cái gì trong Js ?
Câu 3:
Những đặc điểm cơ bản để phân biệt null và undefined."
26,các giá trị Null và Undefined trong JavaScript,Đáp án bài kiểu dữ liệu Symbol trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về kiểu dữ liệu Symbol trong JavaScript
Đáp án:
Các đặc điểm cơ bản của symbol:
Tính độc nhất
: tức là, không thể có 2 symbol trùng nhau
Có thể được chuyển sang string, boolean, array nhưng không thể chuyển sang number
Khởi tạo:
Symbol(<value>)
Trong đó, <value> là một giá trị bất kì. Ví dụ:
Javascript:
> Symbol(3)
Symbol(3)
> Symbol('Kteam')
Symbol(Kteam)
> Symbol(10) == Symbol(10)
False"
27,câu lệnh điều kiện trong JavaScript,Bài: Bài tập về câu lệnh điều kiện trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về câu lệnh điều kiện trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Câu lệnh điều kiện if-else và switch–case
trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về vòng lặp trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
28,câu lệnh điều kiện trong JavaScript,Câu hỏi Câu lệnh điều kiện,"Câu 1:
Về bản chất, ternary operator là gì ? Nêu cú pháp, cách thức hoạt động và ví dụ về ternary operator.
Câu 2:
Tuấn, em trai Toàn, có một hộp bi. Tuấn dự định sẽ mở bi ra đếm và nếu có thể, nhóc muốn chia bi cho anh Toàn. Cụ thể, dự định của Tuấn
như sau:
Nếu có 1 bi, thì Tuấn sẽ có một viên bi, còn anh Toàn thì cái hộp bi cũng không có.
Nếu có 2 viên, thì Tuấn sẽ chia đôi: Tuấn một viên, Toàn một viên.
Nếu có 3 viên, thì Tuấn lấy 2, và chừa cho Toàn 1.
Nếu có ít nhất 4 viên, thì Tuấn cho hết.
Cho n là số bi hiện tại Tuấn có. Hãy xác định xem với lượng bi này, Tuấn sẽ làm gì với nó (bạn chỉ cần thao tác với n, chứ không cần phải khởi tạo n,
và giả sử n đã có sẵn).
Câu 3:
Viết chương trình tìm số lớn nhất trong 2 số a và b (giả sử a và b đã có sẵn).
Câu 4:
Viết chương trình tìm số nhỏ nhất trong 2 số x và y (giả sử x và y có sẵn).
Câu 5:
Cú pháp, cách thức hoạt động của lệnh if-else và switch-case."
29,câu lệnh điều kiện trong JavaScript,Đáp án Bài tập về các giá trị Null và Undefined trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về các giá trị Null và Undefined trong JavaScript
Đáp án câu 1:
Giá trị undefined xuất hiện trong một vài trường hợp như sau:
Khởi tạo một biến không có giá trị ban đầu, hoặc khởi tạo cho nó bằng undefined.
Cố gắng truy cập vào một thuộc tính không có sẵn trong object.
Undefined là giá trị mặc định của các tham số trong một function.
Khi một function được định nghĩa mà không có giá trị trả về.
Đáp án câu 2:
Null đại diện cho sự không có mặt của bất kì đối tượng nào. Thông thường, nó là giá trị của biến khi nó không chứa bất kì giá trị nào.
Bài tập về câu lệnh điều kiện trong JavaScript
2
|2

Đáp án câu 3:
Đầu tiên, chúng ta hãy thử so sánh chúng:
Javascript:
> null == undefined
true
> null === undefined
False
Chúng mang cùng giá trị, nhưng lại khác kiểu dữ liệu:
Javascript:
> typeof(null)
'object'
> typeof(object)
'undefined'
Bên cạnh đó, nếu như ta chuyển null và undefined thành số, thì một cái là 0, và một cái là undefined.
Javascript:
> Number(null)
0
> Number(undefined)
NaN"
30,Function trong JavaScript,Bài: Bài tập về Function trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về Function trong JavaScript

Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Function trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về mảng trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
31,Function trong JavaScript,Câu hỏi về Function trong JavaScript,"Câu 1:
Viết một hàm giúp kiểm tra số nguyên tố với n là tham số. Số nguyên tố là số chỉ có 2 ước là 1 và chính nó.
Câu 2:
Nêu các khái niệm về iterable, iterator, và generator.
Câu 3:
Arrow function là gì ? Lấy một ví dụ về arrow function.
Câu 4:
Cho một function như sau:
Javascript:
function make(a, b) {
console.log(`Hello ${a}, I'm ${b}`)
}
Cho biết câu lệnh nào dưới đây cho kết quả là “
Hello Kter, I’m Ton
” ?
a. make(‘Kter’, ‘Ton’)
b. make([‘Kter’, ‘Ton’])
c. make([Kter, Ton])
d. make(‘Kter Ton’)
Câu 5:
Nâng cao: Dùng một function đệ quy để tính giá trị
với
x, y, m
là 3 số cho trước.
Câu 6:
Khi nào thì một function trả về
undefined
?"
32,Function trong JavaScript,Đáp án Bài tập về vòng lặp trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về vòng lặp trong JavaScript
Đáp án câu 1:
Trong mỗi lần lặp, vòng lặp while sẽ thực hiện kiểm tra điều kiện trước khi thực hiện các lệnh. Còn
do-while
thì ngược lại, nó sẽ thực hiện các lệnh ít
nhất một lần trước khi điều kiện được kiểm tra.
Đáp án câu 2:
Bài tập về Function trong JavaScript
2
|3

Ta chỉ cần duyệt các số từ 1 đến n, và chọn ra các số là ước của n. Dưới đây là chương trình tham khảo
Javascript:
// n có sẵn
for(let i = 1; i <= n; i++) if(n % i == 0) console.log(i);
Mở rộng: Các bạn có thể cải tiến chương trình sao cho số lần lặp giảm xuống
chứ ? Kteam sẽ để các bạn tự trả lời câu hỏi này.
Đáp án câu 3:
Từ nhận xét ban đầu như sau:
Số chẵn chia hết cho 2
Số lẻ chia 2 dư 1
0 không lẻ, cũng không chẵn.
Ta chỉ cần duyệt các số từ 1 đến n, và với mỗi số, tiến hành kiểm tra và tính tổng, thế là được.
Dưới đây là một vài phương án dành cho bài này, mời các bạn tham khảo:
Phương án 1:
Javascript:
// n có sẵn
tong_le = 0
tong_chan = 0
for(let i = 1; i <= n; i++)
{
if(i % 2 == 0) tong_chan += i; else
tong_le += i;
}
console.log('Tổng các số chẵn từ 1 đến n: ', tong_chan);
console.log('Tổng các số lẻ từ 1 đến n: ', tong_le);
Phương án 2:
Javascript:
// n có sẵn
tong_le = 0;
tong_chan = 0;
for(let i = 1; i <= n; tong_le += i, i += 2) {};
for(let i = 2; i <= n; tong_chan += i, i += 2) {};
console.log('Tổng các số chẵn từ 1 đến n: ', tong_chan);
console.log('Tổng các số lẻ từ 1 đến n: ', tong_le);
Đáp án câu 4:
a. for không chứa gì à vòng lặp vô tận
b. while(false) có điều kiện lặp là false à vòng lặp không được thực hiện.
c. Vòng lặp biết trước số lần lặp.
Đáp án câu 5:
Nếu để ý kĩ, ta sẽ thấy là: Ngoại trừ từ đầu tiên, các từ tiếp theo bắt buộc phải nằm sau một dấu cách (‘ ‘). Từ đây, ta sẽ chuyển các kí tự nằm sau dấu
cách sang in hoa, và in thường các kí tự còn lại. Dưới đây là code tham khảo:
Bài tập về Function trong JavaScript
3
|3

Javascript:
// Cho một chuỗi s có sẵn
s1 = s[0].toUpperCase()
for(let i = 1; i < s.length; i++) {
if(s[i-1] == ' ') s1 += s[i].toUpperCase(); else s1 +=s[i].toLowerCase()
}
console.log(s1);
Đáp án câu 6:
Các giá trị sẽ được lặp qua: [0..99].
Tổng số lần lặp là: 99-0+1 = 100 (lần).
Vậy vòng lặp trên lặp 100 lần."
33,kiểu dữ liệu Boolean trong JavaScript,Bài: Bài tập về kiểu dữ liệu Boolean trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về kiểu dữ liệu Boolean trong JavaScript

Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Kiểu dữ liệu Boolean trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về kiểu dữ liệu Symbol trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức"
34,kiểu dữ liệu Boolean trong JavaScript,Câu hỏi về kiểu dữ liệu Boolean,"Câu 1:
Cú pháp khởi tạo boolean là gì ?
Câu 2:
Chỉ ra các trường hợp mà khi dùng constructor Boolean trả về true, false.
Câu 3:
Toán tử quan hệ là gì ? Các loại, công dụng của từng loại biểu thức quan hệ."
35,kiểu dữ liệu Boolean trong JavaScript,Đáp án bài kiểu dữ liệu chuỗi trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về kiểu dữ liệu chuỗi trong JavaScript
Đáp án câu 1:
A. Các dấu hiệu đặc trưng của chuỗi:
Được đặt trong cặp dấu ‘’, `` hoặc “”.
Dùng để biểu thị một hoặc một nhóm các kí tự.
Các kí tự bên trong chuỗi không thể bị thay đổi bằng cách gán
Có thể truy xuất các kí tự thông qua chỉ số của nó
B. Một vài cách khởi tạo chuỗi trong Js
Dùng constructor String
Dùng phương thức toString cho giá trị cần khởi tạo
Đặt các giá trị trong cặp ‘’, “” hoặc ``
Đáp án câu 2:
Đáp án và giải thích:
a. Nối các chuỗi lại với nhau à ‘1212’
b. Thực hiện phép toán cộng giữa số và chuỗi à tương tự phép cộng chuỗi à ‘1212’
c. Number-String nhân với số à tương tự như nhân 2 số với nhau à 144
d. Một chuỗi thông thường nhân với số à NaN
e. Một chuỗi thông thường cộng với số à nối chuỗi à ‘a13’
f. Thực hiện phép nhân trước, ta được 36. Sau đó, nối ‘aa’ vào à ‘aa36’
Đáp án câu 3:
Bài tập về kiểu dữ liệu Boolean trong JavaScript
2
|3

Dưới đây là chương trình tham khảo:
Câu a:
Javascript:
console.log('.'.repeat(9))
console.log('.'.repeat(4) + '+' + '.'.repeat(4))
console.log('.'.repeat(3) + '+'.repeat(3) + '.'.repeat(3))
console.log('.'.repeat(2) + '+'.repeat(5) + '.'.repeat(2))
console.log('.' + '+'.repeat(7) + '.')
console.log('.'.repeat(9))
Câu b:
Javascript:
console.log('.'.repeat(12))
console.log('.'.repeat(3) + '+'.repeat(2) + '.'.repeat(2) + '+'.repeat(2) + '.'.repeat(3))
console.log('.'.repeat(5) + '-'.repeat(2) + '.'.repeat(5))
console.log('.'.repeat(4) + '_'.repeat(4) + '.'.repeat(4))
console.log('.'.repeat(12))
Đáp án câu 4:
Kết quả của các phương thức được thể hiện trong phần code bên dưới:
Javascript:
> a = 'howKteam and kter'
'howKteam and kter'
> a.split('t') // Tách các phần từ nằm giữa các kí tự ‘t’
[ 'howK', 'eam and k', 'er' ]
> a.replace(' a', '__') // thay thế ‘ a’ bằng ‘__’
'howKteam__nd kter'
> a.slice(-13, 8) // Lấy các kí tự từ -13 đến 8 (tức là từ 4 đến 7)
'team'
Đáp án câu 5:
Kết quả của các phép so sánh:
Javascript:
> 'cha' < 'con' // ở kí tự thứ 2, ‘h’ bé hơn ‘o’
true
> 'toan' < 'TOAN' // ‘t’ lớn hơn ‘T’, nên trả về false.
false
> 'ton' == 'tON' // ở kí tự thứ 2, ‘o’ > ‘O’
false
> 'anh' > 'em' // ‘a’ < ‘e’  ‘anh’ > ‘em’ = false
false
> 'small' >= 'big' // ‘s’ > ‘b’  ‘small’ > ‘big’ = true
True
Đáp án câu 6:
Một vài đặc điểm cơ bản:
Được dùng trong cặp ``
Bài tập về kiểu dữ liệu Boolean trong JavaScript
3
|3

Cho phép khởi tạo chuỗi trên nhiều dòng
Cho phép nhúng các biến, biểu thức, hoặc một function vào trong chuỗi"
36,kiểu dữ liệu chuỗi trong JavaScript,Bài: Bài tập về kiểu dữ liệu chuỗi trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về kiểu dữ liệu chuỗi trong JavaScript

Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Kiểu dữ
liệu chuỗi trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về kiểu dữ liệu Boolean
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
37,kiểu dữ liệu chuỗi trong JavaScript,Câu hỏi về chuỗi trong JavaScript,"Câu 1:
Nêu các dấu hiệu đặc trưng của chuỗi trong Js, cách khởi tạo chuỗi trong Js.
Câu 2:
Cho biết kết quả của các phép tính sau:
‘12’ + ‘12’
12 + ‘12’
‘12’ * 12
‘a’ * 13
‘a’ + 13
‘aa’ + ‘12’ * 3
Câu 3:
Sử dụng phương thức repeat của string, viết chương trình in ra các nhóm kí tự sau (in trực tiếp lên màn hình khi chạy chương trình):
Câu 4:
Cho chuỗi a = ‘howKteam and kter’, cho biết kết quả của các phương thức sau:
a. a.split(‘t’)
b. a.replace(‘ a’, ‘__’)
c. a.padStart(‘o’)
d. a.slice(-13, 8)
Bài tập về kiểu dữ liệu chuỗi trong JavaScript
2
|4

Câu 5:
Cho biết kết quả của các phép so sánh sau:
‘cha’ < ‘con’
‘toan’ < ‘TOAN’
‘ton’ == ‘tOn’
‘anh’ > ‘em’
‘small’ >= ‘big’
Câu 6:
Hãy chỉ ra các đặc điểm cơ bản của chuỗi khi nó được dùng với cặp `` (backtics)"
38,kiểu dữ liệu chuỗi trong JavaScript,Đáp án bài kiểu dữ liệu số trong Javascript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về kiểu dữ liệu Number trong JavaScript
Đáp án câu 1:
Số khi đặt vào trong Js sẽ là number hoặc là bigint. Ngoài ra, trong nhiều trường hợp, một chuỗi gồm các kí tự số có thể xem như là một số.
Đáp án câu 2:
Infinity = Number.POSITIVE_INFINITY
-Infinity = Number.NEGATIVE_INFINITY
Javascript:
> typeof(null)
'object'
> typeof(undefined)
'undefined'
> typeof(float)
'undefined'
Đáp án câu 3:
Trong số các giá trị trên, chỉ có NaN là number.
Undefined và null là các kiểu dữ liệu riêng, sẽ được Kteam trình bày trong các bài tiếp theo
Float không có bất kì ý nghĩa gì trong Js
Các bạn có thể kiểm chứng bằng cách sau:
Javascript:
> typeof(null)
'object'
> typeof(undefined)
'undefined'
> typeof(float)
'undefined'
Sở dĩ khi ta dùng float, thì đối với console nodejs, nó hiện ra undefined là vì biến float chưa được khởi tạo.
Đáp án câu 4:
Ý tưởng:
Bài tập về kiểu dữ liệu chuỗi trong JavaScript
3
|4

Dùng phương thức toFixed để làm tròn số đó.
Nhân số đó với chính nó, ta sẽ được kết quả.
Chương trình tham khảo:
Javascript:
// n is available
let x = n.toFixed()
console.log(x*x)
Đáp án câu 5:
Dưới đây là các ví dụ và chú thích của Kteam:
Javascript:
> Math.PI
3.141592653589793
> Math.E
2.718281828459045
> Math.SQRT1_2
0.7071067811865476
> Math.acos(-1) // arccos
3.141592653589793
> Math.asin(1) // arcsin
1.5707963267948966
> Math.max(1, -1, 2, -1, 0, 2) // Lấy số lớn nhất trong một dãy các số.
2
> Math.sqrt(100) // căn bậc 2
10
> Math.cbrt(8) // căn bậc 3
2
Đáp án câu 6:
Bigint có thể làm việc với các số vô cùng lớn, mà number không thể làm được. Và đặc điểm cơ bản nhất của nó là có kí tự n sau giá trị số. Bên cạnh
đó, các toán tử có thể được sử dụng trên bigint tương tự như với number (ngoại trừ toán tử chia và >>>)
Đáp án câu 7:
Các toán tử giữa các bigint có thể sử dụng như khi chúng được dùng trên number:
Javascript:
Bài tập về kiểu dữ liệu chuỗi trong JavaScript
4
|4

> 12n + 9n
21n
> 5n * 34n
170n
> 9n - 100n
-91n
> 12n * 12n
144n
> a = 13n
13n
> a++
13n
> a
14n
> --a
13n
> a
13n
Tuy vậy, đối với toán tử chia, thì chúng sẽ thực hiện việc “chia lấy phần nguyên”.
Javascript:
> 100n / 43n
2n
> 12n / 13n
0n
Dẫu vậy, các toán tử số học không thể được dùng giữa bigint và number:
Javascript:
> a = 1n
1n
> a + 1
Uncaught TypeError: Cannot mix BigInt and other types, use explicitconversions
> a * 3
Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
> a / 4
Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
Đáp án câu 8:
Kteam xin nêu ra một vài ví dụ:
| (OR): trả về 1 nếu có ít nhất một trong 2 bit bằng 1.
& (AND): trả về 1 nếu cả 2 bit là 1.
<< (Zero fill left shift): Phép dịch trái.
~ (NOT): Đảo ngược các bit trong 1 dãy (1 à 0, 0 à 1)."
39,kiểu dữ liệu Number trong JavaScript,Bài: Bài tập về kiểu dữ liệu Number trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về kiểu dữ liệu Number trong JavaScript
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Kiểu dữ liệu số trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập kiểu dữ liệu Chuỗi
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
40,kiểu dữ liệu Number trong JavaScript,Câu hỏi về kiểu dữ liệu số trong Javascript,"Câu 1:
Số khi đặt vào trong Javascript thì sẽ có kiểu dữ liệu là gì?
Câu 2:
Infinity và -Infinity trong Javascript lần lượt bằng với các giá trị nào?
Câu 3:
Giá trị nào dưới đây thuộc kiểu dữ liệu number ?
a. NaN
b. Undefined
c. Null
d. Float
Câu 4:
Viết chương trình làm tròn số n, sau đó tính bình phương của số n, rồi in ra màn hình
Trong đó n là một số cho trước, và Kteam không yêu cầu bạn thực hiện việc nhập vào n, mà việc của các bạn là thực hiện yêu cầu như trên.
Câu 5:
Nêu ra một vài hằng số và phương thức với Math trong Javascript.
Lấy một vài ví dụ.
Câu 6:
Đặc điểm cơ bản nhất của bigint là gì ?
Câu 7:
Ta có thể sử dụng
bigint
như là
number
thông thường hay không ? Nếu có, thì hãy cho ví dụ.
Câu 8:
Chỉ ra một số
bitwise operator
và tác dụng của chúng."
41,kiểu dữ liệu Number trong JavaScript,Đáp án bài tập về biến trong JavaScrip,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về biến trong JavaScript
Đáp án câu 1
Đáp án được hiển thị ra như sau:
Bài tập về kiểu dữ liệu Number trong JavaScript
2
|3

Javascript:
5 6
5 6
Giải thích
:
Việc khởi tạo lại một biến bằng từ khóa
var
đơn giản chỉ là thay đổi giá trị của nó. Vì
var
giúp khởi tạo biến toàn cục, nên giá trị
t =
6
và
u = 5
sẽ được hiển thị bất kể nó được khởi tạo ở đâu.
Đáp án câu 2
Biến cục bộ
Biến toàn cục
Hằng số
Phạm vi
Trong khối lệnh chứa nó Toàn bộ chương trình đang được thực thi
Độ linh động
Có thể thay đổi giá trị
Giá trị luôn phải được
giữ nguyên trong
suốt quá trình thực thi
chương trình
Cách thức
khởi tạo
Từ khóa let
Từ khóa var
Từ khóa const
Đáp án câu 3
Kết quả như bên dưới:
Javascript:
1 2
kteam kter
Giải thích
Ở 2 dòng đầu tiên, ta khởi tạo biến u và v có giá trị lần lượt là ‘kteam’ và ‘kter’.
Trong khối lệnh con (bọc trong cặp {}), ta lại khởi tạo 2 biến cục bộ u và v có giá trị là 1 và 2. Trong phạm vi khối lệnh này, u có giá trị là 1 và v
có giá trị là 2. Do đó, cặp giá trị “1 2” được in ra đầu tiên.
Sau đó, khi kết thúc khối lệnh con và trở về với khối lệnh chính, thì u và v lại “trở lại” với giá trị ban đầu (‘kteam’ và ‘kter’). Vì vậy, giá trị in ra là
‘kteam kter’.
Đáp án câu 4
Lựa chọn d đúng
Giải thích
Ở đáp án a, vì 1 bé hơn 2 nên phép so sánh ‘1 lớn hơn hoặc bằng 2’ trả về
false
.
Ở đáp án b, cũng tương tự. 1 bé hơn 2.
Ở đáp án c, vì 1 khác 2 nên trả về
false
.
Ở đáp án d: 1 khác 2 à
true
.
Đáp án câu 5
Khác với các toán tử
!=
và
==
(khi mà == và != chỉ so sánh sự giống và khác của 2 giá trị được so sánh),
===
và
!==
còn so sánh cả kiểu dữ liệu của
chúng. Cụ thể, đối với toán tử
===
:
Nếu 2 toán hạng khác kiểu dữ liệu, trả về false.
Bài tập về kiểu dữ liệu Number trong JavaScript
3
|3

Nếu 2 toán hạng là
object
, chỉ trả về true nếu cả 2 cùng trỏ đến một vùng bộ nhớ (gần tương tự như
Object.is()
– kiến thức mà Kteam sẽ đề
cập đến trong tương lai)
Nếu cả 2 toán hạng đều là
null
hoặc
undefined
, trả về true.
Nếu một trong 2 toán hạng là
NaN
, trả về false.
So sánh giá trị của 2 toán hạng. Nếu 2 toán hạng có cùng giá trị, trả về true và ngược lại.
Sự khác biệt đáng chú ý nhất, chính là việc
==
sẽ chuyển các giá trị về cùng kiểu trước khi so sánh.
Tất cả những trường hợp mà
===
trả về false, thì
!==
trả về true và ngược lại.
Trên đây đa phần là những kiến thức có vẻ “lạ”. Để biết rõ hơn về những kiến thức mà Kteam đang đề cập, mời các bạn tiếp tục theo dõi
khóa học
JavaScript cơ bản
trên website howKteam.
Đáp án câu 6
Các toán tử so sánh trong Js được tóm tắt như trong bảng sau:
Kí hiệu trong JavaScript
Tác dụng
<
Trả về true nếu toán hạng thứ
nhất
bé hơn
toán hạng thứ 2 và
ngược lại
>
Trả về true nếu toán hạng thứ
nhất
lớn hơn
toán hạng thứ 2 và
ngược lại
>=
Trả về true nếu toán hạng thứ
nhất
lớn hơn hoặc bằng
toán
hạng thứ 2
<=
Trả về true nếu toán hạng thứ
nhất
bé  hơn hoặc bằng
toán
hạng thứ 2
==
Trả về true nếu 2 toán hạng có
giá trị bằng nhau
và ngược lại.
!=
Trả về true nếu 2 toán hạng có
giá trị khác nhau
và ngược lại.
===
Trả về true nếu 2 toán hạng
có
giá trị bằng nhau và có cùng
kiểu dữ liệu
.
!==
Trả về true nếu 2 toán hạng
khác
giá trị hoặc khác kiểu dữ liệu
."
42,Kiểu dữ liệu Set trong JavaScript,Bài: Bài tập về Kiểu dữ liệu Set trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về Kiểu dữ liệu Set trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Kiểu dữ liệu Set trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về Kiểu dữ liệu Map trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
43,Kiểu dữ liệu Set trong JavaScript,Câu hỏi về kiểu dữ liệu Set trong JavaScript,"Câu 1:
Set trong JavaScript là gì? Đặc điểm nổi trội của Set so với các loại CTDL khác.
Câu 2:
Cho 2 set có sẵn: set a và set b. Viết chương trình thực hiện các yêu cầu sau:
In ra các phần tử chỉ có trong a mà không có trong b.
In ra các phần tử chỉ có trong b mà không có trong a.
In ra các phần tử có trong cả 2 set.
Câu 3:
Hãy cho biết điều gì đã xảy ra với s2?
Javascript:
> s1 = new Set('kteam')
Set(5) { 'k', 't', 'e', 'a', 'm' }
> s2 = s1
Set(5) { 'k', 't', 'e', 'a', 'm' }
> s1.delete('t')
true
> s2
Set(4) { 'k', 'e', 'a', 'm' }"
44,Kiểu dữ liệu Set trong JavaScript,Đáp án bài tập mảng trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về array (mảng) trong JavaScript
Đáp án câu 1:
Về bản chất, array là một object cho phép lưu trữ dữ liệu dưới dạng danh sách.
Dấu hiệu nhận biết cơ bản của array là các phần tử nằm trong cặp ngoặc vuông
[]
.
Đáp án câu 2:
Thực chất, khi ta gán giá trị của một biến array này cho một biến array khác, thì ta đã làm cho 2 biến trỏ vào cùng một vùng chứa.
Khi ấy, nếu ta thay đổi giá trị của một biến, thì thực chất là làm cho vùng chứa đó bị thay đổi. Lúc này, khi ta gọi giá trị của cả 2 biến, thì cả 2 đều đã
bị thay đổi vì chúng đều trỏ vào cùng một vùng chứa.
Bài tập về Kiểu dữ liệu Set trong JavaScript
2
|3

Các bạn có thể tham khảo chi tiết hơn tại bài
Kiểu dữ liệu array trong JavaScript– p1
.
Đáp án câu 3:
Dưới đây là chương trình tham khảo (Kteam sẽ để cho các bạn tự tìm hiểu, để giúp các bạn có hướng tuy duy tốt hơn)
Javascript:
// Sum --> Ý a
function Sum(arr) {
sum = 0;
arr.forEach((num) => sum += num);
return sum;
}
// inRange --> ý b
function inRange(arr, m, n) {
return arr.filter((num) => (m <= num) && (num <= n));
}
// filterPrime --> Ý c
function filterPrime(arr) {
ar = []
check = true;
for(let num of arr) {
if(num <= 1) {
check = false;
break;
}
for(let j = 2; j*j <= num; j++) if(num % j == 0) {
check = false;
break;
}
if(check == true) console.log(num);
check = true;
}
}
Đáp án câu 4:
Chương trình tham khảo
Javascript:
// Ý a
function countZeroNumbers(arr) {
let cnt = 0;
for(let num of arr) cnt += (num == 0);
return cnt;
}
// Ý b
function countLongestOnes(arr) {
let ret = 0, cnt = 0;
for(let num of arr) {
if(num == 1) {
cnt++;
ret = Math.max(ret, cnt);
} else cnt = 0;
}
return ret;
}
Bài tập về Kiểu dữ liệu Set trong JavaScript
3
|3

Dưới đây sẽ là phần giải thích của Kteam:
a. Ở ý a, ta chỉ cần lặp qua các phần tử và so sánh chúng với 0, sau đó tính cập nhật số lượng số 0 bằng 1 biến đếm là được.
b. Ở đây, ta sẽ dùng 2 biến: Một biến (là cnt) dùng để cập nhật số lượng số 1, và một biến (ret) dùng để lưu trữ số lượng số 1 liên tiếp dài nhất.
Ở mỗi lần lặp, với mỗi
arr[i]
sẽ có 2 trường hợp:
Arr[i] = 1
: tăng cnt lên, và cập nhật ret (nếu cnt lớn hơn ret, thì ta gán ret bằng cnt à mục đích là lấy số lượng số liên tiếp lớn nhất)
Arr[i] = 0
: Thì ta gán cnt = 0 (vì lúc này, một dãy các số 1 liên tiếp đã kết thúc.
Đáp án câu 5:
Chương trình tham khảo:
Javascript:
//a
function Square(arr) {
let ar = arr.map((num) => (num*num));
return ar;
}
// b
function countSquareNumbers(arr) {
function isSquare(n) {
return n == (Math.sqrt(n).toFixed()**2);
}
let cnt = 0;
arr.forEach((num) => cnt += (isSquare(num)));
return cnt;
}
// c
function countDivisors(arr) {
let ar = arr.map(function count(num) {
let cnt = 0;
for(let i = 1; i <= num; i++) cnt += (num % i == 0);
return cnt;
})
return ar;
}
Giải thích:
Ý
a
: rất đơn giản, chỉ cần dùng
map
và thêm một hàm bình phương là được.
Ý
b
: Đầu tiên, để kiểm tra xem một số n có phải là số chính phương hay không, ta chỉ cần lấy căn bậc 2 của n, làm tròn và bình phương nó và
so sánh với số ban đầu là được.
Sau đó, chỉ cần duyệt qua
array
và kiểm tra như bên trên. Trong phần solution, Kteam dùng một function
isSquare
để kiếm tra số chính
phương.
Ý
c
: Chỉ cần dùng một vòng lặp là ta đã có thể đếm được số ước của một số tự nhiên rồi. Và từ đó, với n phần tử, thì ta sẽ đếm n lần :D."
45,kiểu dữ liệu Symbol trong JavaScript,Bài: Bài tập về kiểu dữ liệu Symbol trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về kiểu dữ liệu Symbol trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
*** Bài tập này chỉ củng cố các kiến thức lý thuyết đã học nên sẽ không có video diễn giải kèm theo.
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Kiểu dữ liệu Symbol trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về các giá trị Null và Undefined trong JavaScript
và rà sát đáp án/ lời giải
của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức"
46,kiểu dữ liệu Symbol trong JavaScript,Câu hỏi về kiểu dữ liệu symbol,Hãy nhớ lại cho biết cách khởi tạo và đặc điểm của symbol
47,kiểu dữ liệu Symbol trong JavaScript,Đáp án bài kiểu dữ liệu Boolean,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về kiểu dữ liệu Boolean trong JavaScript
Đáp án câu 1:
Cú pháp khởi tạo boolean:
Boolean(<value>)
Trong đó, <value> có thể là một giá trị bất kì. Nếu <value> không được đưa vào, thì một giá trị false được tạo ra.
Giá trị được tạo ra bởi constructor này sẽ tương ứng với <value> mà ta bỏ vào.
Đáp án câu 2:
Các trường hợp mà constructor Boolean trả về true:
Một số khác 0 (khác -0)
Một chuỗi không rỗng (có ít nhất một kí tự)
Giá trị true (Boolean(true) = true)
Một object (một khái niệm mà Kteam sẽ chuyển đến các bạn ở các bài sau)
Ngoài ra, đối với các giá trị
null
và
undefined
, khi chuyển thành boolean sẽ bằng
false
.
Khi chuyển từ boolean sang
number
, ta sẽ nhận được các giá trị tương ứng:
1 = true
,
0 = false
.
Đáp án câu 3:
Khái niệm về toán tử quan hệ: Là những toán tử dùng để xét các mối liên hệ giữa các điều kiện được xét đồng thời với nhau. Tùy thuộc vào loại toán
tử quan hệ, mà một nhóm các điều kiện sẽ trả về một trong 2 giá trị true hoặc false.
Bài tập về kiểu dữ liệu Symbol trong JavaScript
2
|2

Trong Js, có 3 loại toán tử quan hệ AND, OR, và NOT
Toán tử
AND
(kí hiệu: &&): Trả về true nếu tất cả các điều kiện được xét đều là true, trả về false trong các trường hợp khác
Toán tử
OR
(kí hiệu: ||): Trả về true nếu một trong các điều kiện đang xét là true, trả về false khi và chỉ khi tất cả các điều kiện đang xét đều
false.
Toán tử
NOT
(kí hiệu: !): Trả về false nếu điều kiện được xét là true và ngược lại.
Ví dụ:
a > 5 && b > 10: Trả về true chỉ khi a lớn hơn 5 và b lớn hơn 10 (xảy ra đồng thời)
a > 5 || b > 10: Trả về true khi a > 5, hoặc b > 10 hoặc là cả 2 đều đúng (xảy ra độc lập)
! (a > 10): trả về true khi a bé hơn hoặc bằng 10 (tức là điều kiện bên trong sai)"
48,mảng trong JavaScript,Bài: Bài tập về mảng trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về mảng trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Mảng trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về Kiểu dữ liệu Set trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
49,mảng trong JavaScript,Câu hỏi về Mảng trong JavaScript,"Câu 1:
Bản chất của array là gì ? Dấu hiệu cơ bản nhất để nhận biết một array.
Câu 2:
Giải thích tại sao biến arr2 dưới đây lại bị thay đổi ?
Javascript:
> arr1 = ['how', 'Kteam']
[ 'how', 'Kteam' ]
> arr2 = arr1
[ 'how', 'Kteam' ]
> arr1[1] = 'Kter'
'Kter'
> arr1
[ 'how', 'Kter' ]
> arr2
[ 'how', 'Kter' ]
Câu 3:
Cho sẵn 1 array a, hãy thực hiện các thao tác sau:
a. Tính tổng các phần tử của a và in ra màn hinh
b. Cho trước 2 số m và n, in ra các phần tử của a nằm trong khoảng [m..n] theo thứ tự từ bé đến lớn.
c. In ra các số nguyên tố trong a.
Câu 4:
Cho một array nums (chỉ bao gồm các số 0 và 1).
a. In ra số lượng số 0 trong a.
b. Nâng cao: Đếm số lượng các số 1 liên tiếp dài nhất trong a. 2 số nằm cạnh nhau được xem là liên tiếp nhau.
Câu 5:
Với một array arr cho trước (chỉ bao gồm các số tự nhiên), thực hiện các yêu cầu sau:
a. Sử dụng map để bình phương toàn bộ các phần tử trong array.
b. Dùng array ban đầu, đếm xem trong arr có bao nhiêu số chính phương (số chính phương là số có dạng
với x là một số tự nhiên.
c. Đếm số lượng ước của các số trong arr, sau đó lưu vào một array mới.
Bài tập về mảng trong JavaScript
2
|4
"
50,mảng trong JavaScript,Đáp án bài tập về Function trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về Function trong JavaScript
Đáp án câu 1:
Vì số nguyên tố chỉ có 2 ước là 1 và chính nó, nên cách đơn giản nhất là duyệt qua các số từ 1 đến n (ta gọi số đang kiểm tra là n), sau đó đếm các
ước của n. Cuối cùng, ta chỉ cần xem nó có lớn hơn 2 hay không là xong.
Dưới đây là code cho cách triển khai như trên:
Javascript:
function isPrime(n) {
let count = 0;
for(let i = 1; i <= n; i++) if(n % i == 0) count++;
if(count > 2) return false;
return true;
}
Nhưng, liệu có nhất thiết phải duyệt qua toàn bộ các số từ 1 đến n không nhỉ ?
Nếu để ý, thì số nguyên tố n chỉ chia hết cho 1 và n, tức là trong khoảng [2..n], nếu còn bất kì một số nào khác là ước của n thì chứng tỏ n không
phải là số nguyên tố (vì có nhiều hơn 2 ước). Từ đây, ta có thể bỏ luôn biến count đi:
Javascript:
function isPrime(n) {
for(let i = 2; i < n; i++) if(n % i == 0) return false;
return true;
}
Và, với đoạn code như trên vẫn chưa ổn, vì ta còn thiếu 1: n <= 1.
Với n <= 1, hiển nhiên nó không phải là số nguyên tố. Do đó, ta cần phải thêm một lệnh điều kiện vào để code trở nên “more optimize”:
Javascript:
function isPrime(n) {
if(n <= 1) return false;
for(let i = 2; i < n; i++) if(n % i == 0) return false;
return true;
}
Vậy…nếu như n là một số nguyên tố thì sao nhỉ ? i sẽ chạy luôn đến n-1 mới dừng lại.
Nhưng hãy để ý kĩ, nếu như i nằm trong khoảng [1..n], và n chia hết cho i, thì chắc chắn n sẽ chia hết cho (n / i). Như vậy, thực chất, ta chỉ cần kiểm
tra trong khoảng
là đủ (vì nếu trong khoảng này có một số là ước của n, thì chắc chắn khoảng
cũng sẽ có một số khác. Và
ngược lại, nếu trong khoảng này không có ước của n, thì khoảng còn lại chắc chắn là không có.
Một yếu tố nữa làm cho khoảng từ
tối ưu, là trường hợp xấu nhất: n là bình phương của 1 số nguyên tố.
Ví dụ, n = 25. Lúc này, ta cần phải để i chạy đến 5 thì mới có thể xác định được n không phải là số nguyên tố. Như vậy, khoảng nhỏ nhất mà ta cần
xét chính là căn bậc 2 của n:
Javascript:
Bài tập về mảng trong JavaScript
3
|4

function isPrime(n) {
if(n <= 1) return false;
for(let i = 2; i*i <= n; i++) if(n % i == 0) return false;
return true;
}
Đây chỉ là một thuật toán cơ bản giúp kiểm tra số nguyên tố. Trên thực tế, có rất nhiều thuật toán kiểm tra số nguyên tố khác nhau và mỗi loại có
ưu, nhược điểm riêng. Các bạn có thể tìm hiểu thêm.
Đáp án câu 2:
a.
iterable
: là một nhóm các giá trị mà mỗi giá trị trong nhóm có thể được lấy ra một cách tuần tự thông qua vòng lặp for..of. Ví dụ: string, array.
b.
iterator
: là cái mà giúp chúng ta duyệt qua các phần tử khi ta sử dụng for..of.
c.
generator
: là một loại function mà có thể chạy ngắt quãng nhờ lệnh yield. Trong JavaScript, generator được khởi tạo bằng cú pháp sau:
function* <
function_name
>(<
parameter-1
>, <
parameter-2
>,…) {
<
statement
>
}
Trong đó:
<function_name>
là tên của generator
Các
<parameter>
: là các tham số của function.
<statement>
: là các lệnh bên trong generator.
Đáp án câu 3:
Arrow function là một function dạng thu gọn, và nó có cú pháp như sau:
<
Tên biến
> = (<
p1
>, <
p2
>, …, <
pn
>) => <statement>
Trong đó:
<
p1
>, <
p2
>, …, <
pn
>
: là các tham số trong function. Nếu như chỉ có 1 tham số, ta có thể loại bỏ dấu ngoặc.
<statement>
: Là lệnh (hoặc khối lệnh) của function.
Ví dụ:
Javascript:
> sqr = (a) => a*a;
[Function: sqr]
> trunc = (a) => a.toFixed();
[Function: trunc]
> trunc(100.62)
'101'
> sqr(8)
64
Đáp án câu 4:
Bài tập về mảng trong JavaScript
4
|4

Lựa chọn chính xác là a
Giải thích:
Trong các đáp án, chỉ có đáp án a là các đối số được đưa vào đúng cách và đúng thứ tự.
Đáp án câu 5:
Một function trả về undefined theo mặc định. Khi không có lệnh return hoặc return về undefined, thì hàm trả về undefined sau khi thực thi."
51,vòng lặp trong JavaScript,Bài: Bài tập về vòng lặp trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Bài tập về vòng lặp trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
Trong bài này, Kteam và bạn sẽ thực hiện một số bài tập củng cố kiến thức về
Vòng lặp trong JavaScript
Để bài tập đạt hiệu quả tốt nhất bạn nên thực hiện theo các bước sau:
1. Đọc đề các câu hỏi và tự đưa ra đáp án/ lời giải của mình.
2. Tham khảo đáp án tại bài
Bài tập về Function trong JavaScript
và rà sát đáp án/ lời giải của bản thân
3. Xem video giải thích đáp án của bài này và note lại các ý chính để củng cố lại kiến thức."
52,vòng lặp trong JavaScript,Câu hỏi về vòng lặp trong JavaScript,"Câu 1:
Vòng lặp do-while và while khác nhau như thế nào ?
Câu 2:
Viết một chương trình in ra các ước của n với n có sẵn.
Câu 3:
Viết chương trình tính tổng các số chẵn, số lẻ từ 1 đến n (với n có sẵn).
Câu 4:
Câu lệnh nào đưới đây tạo ra một vòng lặp vô tận (ta chưa xét trường hợp có break bên trong)?
for(;;)
while(false)
for(let i = 1; i < 100; i++)
Câu 5:
Viết một chương trình giúp thay đổi định dạng của 1 chuỗi theo quy tắc sau:
Kí tự đầu của từ được viết hoa, các kí tự còn lại viết thường.
Đồng thời, sau câu phải đặt dấu chấm.
Ví dụ:
‘we ARE kTeam’ là ‘We Are Kteam.’
‘this is javascript’ là ‘This Is Javascript.’
Câu 6:
Câu lệnh sau lặp bao nhiêu lần ?
Javascript:
for(let i = 0; i < 100; i++) {}"
53,vòng lặp trong JavaScript,Đáp án Bài tập về câu lệnh điều kiện trong JavaScript,"Bạn có thể xem chi tiết các câu hỏi ở
Bài tập về câu lệnh điều kiện trong JavaScript
Đáp án Câu 1:
Về bản chất, ternary là một toán tử 3 ngôi và nó sẽ trả về một giá trị nào đó phụ thuộc vào điều kiện mà ta đưa cho nó. Nó có cú pháp như sau:
Bài tập về vòng lặp trong JavaScript
2
|4

Javascript:
<condition> ? <value-1> : <value-2>
Nếu <
condition
> là
truthy
, thì lấy <
value-1
>, ngược lại lấy <
value-2
>
Ví dụ về ternary operator:
Javascript:
> a = 1
1
> a == 0 ? 'Kteam' : 'Kter'
'Kter'
> -a < 0 ? 'a is positive' : 'a is negative'
'a is positive'
Đáp án Câu 2:
Chương trình tham khảo:
Javascript:
// cho n là số bi mà Tun có
if(n >= 4) console.log('Cho anh hết !'); else {
switch(n) {
case 1: {
console.log('Tun không cho');
break;
}
case 2: {
console.log('Mỗi người một nửa');
break;
}
case 3: {
console.log('Cho 1, giữ 2');
break;
}
}
}
Đáp án Câu 3:
Chương trình sẽ so sánh 2 số a và b, sau đó chọn ra số lớn hơn:
Javascript:
if(a > b) console.log(a); else console.log(b);
Và ta có thể “tom gọn” đôi chút bằng cách sử dụng ternary operator:
Javascript:
a > b ? a : b;
Đáp án Câu 4:
Bài này thì gần tương tự như trên thôi, các bạn có thể tham khảo bài trên và comment bài làm của bạn vào phần Bình luận bên dưới nhé!
Bài tập về vòng lặp trong JavaScript
3
|4

Đáp án Câu 5:
a.
Lệnh if-else:
if
(<
condition
>) <
statement-1
>;
else
<
statement-2
>
Trong đó:
<
condition
> thì vẫn giống như trên, chỉ khác là: nếu <
condition
> là
falsy
thì sẽ thực hiện <
statement-2
>
<
statement-1
>: là lệnh (hoặc khối lệnh) sẽ được thực thi khi <
condition
> là truthy
<
statement-2
>: là lệnh (khối lệnh) được thực hiện nếu <
condition
> là
falsy
.
b.
Lệnh switch-case:
switch(<
expression
>) {
case
<
value-1
>:
<
statement-1
>
break;
case
<
value-2
>:
<
statement-2
>
break;
case
<
value-3
>:
<
statement-3
>
break;
.......................
case
<
value-n
>:
<
statement-n
>
default:
<
default-statement
>
Trong đó:
<
expression
>: là biểu thức, giá trị này sẽ được so sánh lần lượt với <
value
> của từng case, nếu như <
value
> mà bằng với <
expression
>,
thì
<
statement
> tương ứng được thực hiện
<
value
>: là các giá trị được mang đi so sánh, lệnh (khối lệnh) bên trong nó sẽ được thực hiện nếu <
value
> bằng với <
expression
>.
<
statement
>: là một lệnh hoặc một khối lệnh, sẽ được thực hiện nếu <
value
> tương ứng bằng với  <
expression
>
Bài tập về vòng lặp trong JavaScript
4
|4

<
default-statement
>: là lệnh (khối lệnh) sẽ được thực hiện nếu <
expression
> khác với tất cả các <
value
>."
54,Chú thích,Bài: Chú thích - keywords - khối lệnh,"Xem bài học trên website để ủng hộ Kteam:
Chú thích - keywords - khối lệnh
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
55,Chú thích,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
Cách cài đặt và sử dụng nodejs để chạy code Js
. Ở bài này, chúng ta sẽ cùng tìm hiểu về
các khái niệm cơ
bản nhất trong một chương trình JavaScript
."
56,Chú thích,Nội dung chính,"Để có thể nắm được nội dung của bài, thì các bạn cần:
Cài đặt sẵn môi trường
JavaScript
Cụ thể, nội dung mà chúng ta sẽ cùng tìm hiểu trong bài này sẽ là:
Chú thích trong
JavaScript
Các keyword, cách sử dụng keyword trong
JavaScript
Câu lện, khối lệnh trong
JavaScript"
57,Chú thích,Chú thích,"Trong các biểu đồ, bảng hay bản đồ, thường sẽ có những bảng “chú thích” để giúp cho người đọc dễ hiểu hơn nội dung của nó. So với những thứ ở
trên, những dòng code còn khó đọc hơn rất nhiều. Vì vậy, bắt buộc phải có cách để thêm các chú thích vào giữa những
dòng code khô khan.
Để tạo một
chú thích trong JavaScript,
ta sẽ đặt các nội dung cần chú thích vào trong cặp
//
(đối với chú thích một dòng, hoặc cặp
/* */
(đối với
nhiều dòng chú thích).
Chú thích - keywords - khối lệnh
2
|3

Khi chạy chương trình, các nội dung chú thích bị
bỏ qua
.
Ưu điểm của việc đặt các chú thích trong chương trình:
Dễ dàng kiểm soát những gì minh đang code, tranh nhầm lẫn không đáng có
Tiện hơn nếu như code của bạn được người khác đọc và muốn sửa chữa
Do đó, Kteam khuyến khích các bạn đặt các chú thích phù hợp vào trong chương trình của mình."
58,Chú thích,Keyword trong JavaScript,"Keyword
, hiểu một cách đơn giản, là những từ được sử dụng trong những
cấu trúc
hoặc
câu lệnh
nào đó, và là
duy nhất
(không được có bất kì
thứ gì khác trùng tên với các keyword) ví dụ:
Từ khóa
if
được dùng trong
câu lệnh điều kiện
Từ khóa
for
được dùng trong
vòng lặp
Từ khóa
var
được dùng để
khai báo biến
Các bạn chưa cần hiểu những từ khóa bên trên một cách kĩ càng (Kteam sẽ hướng dẫn cho các bạn trong các bài sau). Chỉ cần hiểu như những gì đã
đề cập ở trên là được.
Dưới đây là bảng ghi lại các từ khóa trong JavaScript
await
break
case
catch
class
const
continue
debugger
default
delete
do
else
enum
export
extends
false
finally
for
function
if
implements
import
in
instanceof
interface
let
new
null
package
private
protected
public
return
super
switch
static
this
throw
try
true
typeof
var
void
while
with
yield"
59,Chú thích,Câu lệnh,"Câu lệnh
là một lệnh nào đó do người dùng ghi ra, và yêu cầu máy tính thực hiện. Mỗi câu lệnh trong JavaScript được kết thúc bằng
dấu chấm
phẩy.
Chú thích - keywords - khối lệnh
3
|3
"
60,Chú thích,Khối lệnh,"Khối lệnh
là tập hợp các câu lệnh được đặt trong cặp dấu
{}
(ngoại trừ phần thân chương trình được mặc định là
khối lệnh chính
). Khối lệnh là một
khái niệm quan trọng trong lập trình, nó giúp nhóm các lệnh lại với nhau
và tạo nên nhiều ý nghĩa trong quá trinh code.
Dưới đây là ví dụ về khối lệnh:"
61,Chú thích,Kết luận,"Qua bài này, các bạn đã được tìm hiểu về các khái niệm cơ bản nhất của một chương trình JavaScript.
Ở bài sau, chúng ta sẽ cùng tìm hiểu về
biến trong JavaScript
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
62,"Chạy một chương trình Js cơ bản bằng node, làm việc với file text",file text,"Xem bài học trên website để ủng hộ Kteam:
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
63,"Chạy một chương trình Js cơ bản bằng node, làm việc với file text",Dẫn nhập,"Ở bài trước, Kteam đã hướng dẫn cho các bạn cài môi trường nodejs để chạy chương trình Js.
Trong bài này, chúng ta sẽ cùng nhau
chạy những dòng lệnh đầu tiên
. Chào mừng đến với thế giới của Javascript!"
64,"Chạy một chương trình Js cơ bản bằng node, làm việc với file text",Nội dung,"Yêu cầu trước khi chúng ta bắt đầu:
Cài đặt môi trường nodejs
Những nội dung mà chúng ta sẽ cùng tìm hiểu trong bài này:
Chạy lệnh Js bằng node
Chạy file Js bằng node"
65,"Chạy một chương trình Js cơ bản bằng node, làm việc với file text",Chạy lệnh Js bằng node,"Như đã nói, nodejs là một môi trường chạy Js vô cùng tiện lợi. Trước tiên, hãy cùng mở nó lên nào.
Để mở node lên, ta có thể mở trực tiếp nodejs hoặc dùng cmd. Dưới đây, mình sẽ mở cmd lên và chạy lệnh node:
Bây giờ, với mỗi lệnh node, chương trình sẽ trả về phản hồi tương ứng. Từng câu lệnh sẽ được tiếp nhận ngay sau khi người dùng nhập nó và ấn
phím enter. Lấy ví dụ với lệnh console.log (in một giá trị nào đó ra màn hình console):
Javascript:
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
2
|7

console.log(123)
// 123
// undefined
console.log('kteam')
// kteam
// undefined
console.log(2016)
// 2016
// undefined
Và, hãy cùng thực hiện một vài phép tính trên console:
Javascript:
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
3
|7

2 + 3
// 5
4 * 6
// 24
10 - 200
// -190
12 / 4.3
// 2.7906976744186047
Tuy nhiên, code thông thường sẽ được đóng gói lại thành một file để dễ sử dụng và lưu trữ. File của Js là những file có phần mở rộng là *.js. Bây giờ,
hãy thử tạo một file a.js và mở nó lên (nhớ mở bằng vs code nha). Để cho tiện, Kteam khuyên bạn hãy tạo
file ở ngay ổ đĩa D để chúng ta chạy
chương trình dễ hơn.
Và, đây chính là thành quả:
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
4
|7

Lời tác giả
: Có thể cái giao diện của các bạn sẽ khác với mình (do mình có cài thêm extension á), nhưng đừng lo, bạn có thể dùng vscode để
code một cách bình thường.
Nào, bây giờ, hãy thử gõ console.log(‘Hello World’) vào nào.
Tiếp đến, các bạn dùng tổ hợp phím Ctrl + shift + ` hoặc là chọn Terminal
🡪
new terminal để mở cmd lên.
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
5
|7

Lưu ý
:
Nếu như ô bên cạnh (tương tự như ô được khoanh đỏ) mà không phải cmd, bạn hãy ấn vào mũi tên và chọn cmd.
Bây giờ đến phần quan trọng: chạy chương trình. Bây giờ, bạn nhấn vào cái tab đang chứa file a.js, chọn chuột phải và chọn “Copy Path”. Tiếp đến,
vào cmd và nhấn như sau:
1.
Gõ
cd
, sau đó gõ
“
(dấu nháy), paste cái path vừa copy vào, xóa tên file đi và gõ lại
“
thêm một lần nữa.
2.
Ấn enter.
3.
Gõ tên đường dẫn trên path, gõ dấu : rồi nhấn enter
Lúc này, trên cmd sẽ hiển thị chính cái đường dẫn đến với folder chứa file. Có nghĩa là ta đang làm việc với folder đó.
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
6
|7

Lúc này, ta gõ
node + <tên-file>
rồi nhấn enter, và màn hình sẽ hiện ra dòng chữ “Hello world”. Tức là file đã được chạy.
Bên cạnh đó, ta cũng có thể load một file *.js từ console của node.
Đầu tiên, hãy định hướng đường dẫn đến folder chứa file đó, rồi mở node lên, sau đó, gõ
.load + <tên-file>
và enter:
Với
.load
, console sẽ chạy và hiển thị toàn bộ code bên trong file, đồng thời hiển thị cả các kết quả của đoạn code đó.
Như trên, 2 dòng đầu là code trong file, 2 dòng sau là 2 giá trị mà file đó cho in ra, còn dòng cuối là “Giá trị trả về” – một khái niệm mà các bạn sẽ
được tìm hiểu trong tương lai."
66,"Chạy một chương trình Js cơ bản bằng node, làm việc với file text",Kết luận,"Qua bài này, các bạn đã có thể chạy các chương trình Js của mình.
Trong bài tiếp theo, chúng ta sẽ cùng tìm hiểu về chú thích – keyword – khối lệnh trong Js.
Chạy một chương trình Js cơ bản bằng node, làm việc với file text
”."
67,Các giá trị Null và Undefined trong JavaScript,Bài: Các giá trị Null và Undefined trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Các giá trị Null và Undefined trong JavaScript
"
68,Các giá trị Null và Undefined trong JavaScript,Dẫn nhập,"Ở bài trước, các bạn đã được tìm hiểu về
kiểu dữ liệu symbol trong JavaScript
Trong bài này, chúng ta sẽ cùng tìm hiểu về 2 loại giá trị:
null và undefined"
69,Các giá trị Null và Undefined trong JavaScript,Nội dung,"Dưới đây là những yêu cầu trước khi bắt đầu tìm hiểu bài này:
Các kiến thức về biến trong JavaScript
Những nội dung mà chúng ta sẽ cùng tìm hiểu
Giá trị Null trong JavaScript
Giá trị undefined trong JavaScript
So sánh giữa 2 kiểu dữ liệu trên"
70,Các giá trị Null và Undefined trong JavaScript,Giá trị null trong JavaScript,"Giá trị null
là một kiểu dữ liệu
nguyên thủy
trong JavaScript, và đơn giản là: nó đại diện cho việc một biến mà không trỏ đến bất kì giá trị nào.
Ở mức độ cơ bản, chúng ta không cần phải hiểu quá sâu về
null
. Dưới đây là các giá trị của null khi được ép sang các kiểu dữ liệu khác:
Javascript:
Boolean(null) // null là một falsy
// false
String(null)
// 'null'
Number(null)
// 0
Symbol(null)
// Symbol(null)
Object(null)
// {}
Và, hãy cùng kiểm tra kiểu dữ liệu của null:
Javascript:
typeof(null)
// 'object'
Ơ kìa ? Vô lí.
Rõ ràng Kteam đã nói rằng null là một kiểu dữ liệu nguyên thủy cơ mà ? Thế nào lại có ‘object’ ở đây ?
Về mặt bản chất, null được tạo ra để giúp JavaScript tương tác với một loại ngôn ngữ khác, đó chính là Java. Chính việc cố gắng làm cho nó tương
thích, đã tạo ra một lỗi trong quá trình triển khai, đó là việc làm cho
typeof(null)
bằng với
object.
Các giá trị Null và Undefined trong JavaScript
2
|4

Bài viết dưới đây (từ stackoverflow) sẽ cho chúng ta cái nhìn rõ hơn về null:
Why is null an object and what's the difference between null and
undefined?
.
Kteam sẽ không đi quá sâu về những gì được đề cập trong bài viết này, vì phương châm của khóa học là tiếp cận những bạn học ở mức cơ bản.
Các toán tử
cũng có thể được sử dụng với null, như trong ví dụ dưới đây:
Javascript:
4 + null
// 4
null + false
// 0
null + true
// 1
null === null
// true
undefined == null
// true"
71,Các giá trị Null và Undefined trong JavaScript,Giá trị undefined trong JavaScript,"Lưu ý:
Giá trị undefined trong JavaScript khác với giá trị undefined trong toán học.
Cũng giống như
null
,
undefined
là một giá trị được “đặc cách” là một trong những kiểu dữ liệu “nguyên thủy” trong JavaScript.
Khi nào thì xuất hiện giá trị undefined?
Lời tác giả:
Những kiến thức được đề cập dưới đây hầu hết là những thứ mới, do đó các bạn chỉ cần biết là nó sẽ xuất hiện trong một vài
trường hợp, thế là đủ.
Trong JavaScript, undefined xuất hiện trong các trường hợp sau:
Khởi tạo một biến không có giá trị ban đầu, hoặc gán giá trị undefined vào cho nó
Ví dụ:
Javascript:
var t
// undefined
t
// undefined
var f = undefined
// undefined
f
// undefined
Cố gắng truy cập vào một thuộc tính không có sẵn trong một Object
Khi truy cập một thuộc tính không có sẵn trong một Object, thì giá trị của việc truy cập đó là
undefined
.
Javascript:
Các giá trị Null và Undefined trong JavaScript
3
|4

a = {name: ""Kteam""} // Khởi tạo một object a với một thuộc tính là name
// { name: 'Kteam' }
a.name
// 'Kteam'
a.kteam
// undefined
Undefined là giá trị mặc định của các tham số trong một hàm
Đối với một hàm có tham số đầu vào, nếu ta không cho nó một giá trị mặc định, thì giá trị của nó trước khi các đối số được truyền vào là
undefined
.
Giả sử, ta có một hàm
print
với 2 tham số là a và b, cụ thể như sau:
Javascript:
function print(a, b) {
console.log(a);
console.log(b);
}
// undefined
Sau đó, với hàm
print
như trên, ta tiến hạnh gọi
print(3)
(chỉ truyền vào một đối số):
Javascript:
print(3)
// 3
// undefined
// undefined
Kết quả:
nó sẽ in ra 3 dòng như trong ví dụ. Ở đây, ta chỉ xét 2 dòng đầu, vì dòng thứ 3 là một trường hợp khác (Kteam sẽ nhắc đến trong
phần tiếp theo).
2 dòng đầu chính là 2 giá trị của các tham số a và b khi chạy hàm. Ta có thể thấy, khi chỉ có một đối số được truyền vào, thì giá trị của tham số
còn lại là undefined.
Ta có thể chứng thực bằng một ví dụ khác. Cũng với hàm
print
kia, nhưng lần này, ta sẽ không truyền vào tham số:
Javascript:
print();
// undefined
// undefined
// undefined
Khi một hàm được định nghĩa mà không có giá trị trả về
Như Kteam đã đề cập trong ví dụ trên, bạn sẽ thấy 3 dòng, với nội dung dòng cuối là
undefined
.
Đây là trường hợp mà bạn không cho hàm giá trị trả về.
Đối với hàm, nếu có lệnh
return
và theo sau đó là một giá trị, thì giá trị đó chính là giá trị trả về của hàm.
Còn nếu không có lệnh return hoặc lệnh return mà không đi kèm theo giá trị, thì giá trị trả về của hàm là
undefined
.
Lưu ý:
Đối với ví dụ bên trên, chỉ khi ta dùng node.js thì mới có thể thấy được 3 dòng (với dòng cuối là giá trị trả về của hàm).
Ví dụ:
Các giá trị Null và Undefined trong JavaScript
4
|4

Javascript:
function print(a, b) { // định nghĩa một hàm
}
// Undefined // giá trị được định nghĩa
print(2, 3); // Gọi hàm và truyền đối số cho hàm
// Undefined // giá trị trả về của hàm
Khi thực hiện các phép toán với giá trị undefined, kết quả sẽ là
NaN
."
72,Các giá trị Null và Undefined trong JavaScript,Sự khác biệt giữa null và undefined trong JavaScript,"Nhìn thì khá giống nhau, nhưng null và undefined cũng có điểm khác nhau.
Về mặt ý nghĩa, đối với một biến:
Khi chúng ta xác định một biến thành
undefined
thì chúng ta đang cố gắng truyền đạt rằng biến đó không tồn tại.
Khi chúng ta xác định một biến thành
null
thì chúng ta đang cố gắng truyền đạt rằng biến đó trống.
null
là object (nó phải là null, đây là một lỗi nhỏ trong JavaScript), còn
undefined
là một giá trị duy nhất:
Javascript:
function print(a, b) { // định nghĩa một hàm
}
// Undefined // giá trị được định nghĩa
print(2, 3); // Gọi hàm và truyền đối số cho hàm
// Undefined // giá trị trả về của hàm
Chúng có cùng giá trị, nhưng khác kiểu với nhau:
Javascript:
null == undefined
// true
null === undefined
// False
Khi chuyển về number, null và undefined cũng cho 2 kết quả khác biệt:
Javascript:
Number(null)
// 0
Number(undefined)
// NaN"
73,Các giá trị Null và Undefined trong JavaScript,Kết luận,"Qua bài này, các bạn đã nắm được kiến thức về null và undefined trong JavaScript
Bài tiếp theo, Kteam sẽ giới thiệu với các bạn về
Bài tập về các giá trị Null và Undefined trong JavaScript
”."
74,Câu lệnh điều kiện if,Bài: Câu lệnh điều kiện if-else và switch–case trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Câu lệnh điều kiện if-else và switch–case trong JavaScript
"
75,Câu lệnh điều kiện if,Dẫn nhập,"Ở các bài trước, Kteam đã giới thiệu đến các bạn về
các kiểu dữ liệu cơ bản trong JavaScript
Trong bài này, chúng ta sẽ cùng tìm hiểu về một cấu trúc mới trong JavaScript:
câu lệnh điều kiện"
76,Câu lệnh điều kiện if,Nội dung,"Để nắm được bài này, các bạn cần có kiến thức về:
Biến trong JavaScript
Các kiểu dữ liệu cơ bản trong JavaScript: boolean, number, string…
Khối lệnh trong JavaScript
Nội dung mà chúng ta sẽ cùng tìm hiểu:
Đặt vấn đề #1
Cấu trúc điều kiện if
Cấu trúc điều kiện if - else
Ternary operator (?:)
Cấu trúc điều kiện if - else if – else
Đặt vấn đề #2
Cấu trúc điều kiện switch – case
Lênh break trong JavaScript"
77,Câu lệnh điều kiện if,Đặt vấn đề #1,"Hôm nay, Long mở heo đất và lấy tiền trong đó đi mua đồ.
Nếu như Long có 10 nghìn, thì Long sẽ mua một cái kẹo, và 3 cây bút
Nếu Long có 20 nghìn, thì Long sẽ mua một cái kẹo, 3 cây bút và 2 cuốn vở.
Nếu…Long có một số tiền là n, thì Long sẽ mua gì ?
Nó là một câu hỏi liên quan đến một cấu trúc mới:
cấu trúc điều kiện.
Tức là,
với một điều kiện cho trước
(số tiền)
, thì một công việc nào đó sẽ được thực hiện
(mua đồ)."
78,Câu lệnh điều kiện if,Câu lệnh điều kiện với if,"Nếu các bạn để ý, thì các mệnh đề trên, sẽ có cấu trúc theo dạng:
Nếu
….(A)…
thì
…(B)
Trong đó, (A) là một điều kiện, còn (B) là những thứ sẽ diễn ra nếu điều kiện đó được đáp ứng.
Câu lệnh điều kiện if-else và switch–case trong JavaScript
2
|7

Trong JavaScript, mọi thứ diễn ra y chang như thế. Cụ thể, cấu trúc như trên khi được “dịch” sang ngôn ngữ JavaScriptthì nó sẽ có dạng:
if
(
<condition>
)
<statement>
Trong đó:
<condition>
là một điều kiện, tức là, nó sẽ mang một trong 2 giá trị:
truthy
hoặc
falsy
.
<statement>
: có thể là một câu lệnh hoặc một khối lệnh, là những thứ sẽ xảy ra nếu
<condition>
là
truthy
.
Ví dụ:
Javascript:
a = 123
// 123
if(a == 123) console.log(""a bằng 123"")
// a bằng 123
// undefined
b = """"
// ''
if(b == false) console.log(""b bằng false"")
// b bằng false
// undefined
Trên thực tế,
<condition>
chỉ là một điều kiện, nhưng JavaScript không cấm việc bạn “nhét” cho nó thêm vài điều kiện nữa, ví dụ như sau:
Javascript:
a = 1, b = 2, c = 'Kteam'
// 'Kteam'
if((a == 1) && (b == 2)) console.log(""Yes"")
// Yes
// undefined
if((c == ""Kteam"") || (b == 3)) console.log(""Yes"")
// Yes
// undefined
Lưu ý:
Việc nhét nhiều điều kiện vào sau if thực chất là sử dụng các biểu thức quan hệ cho nhiều điều kiện khác nhau. Các điều kiện này sẽ
được “gom” lại thành một điều kiện duy nhất
Bên cạnh đó, ta cũng có thể sử dụng các toán tử ở bên trong một lệnh if:
Javascript:
a = 0
// 0
if(a += 5) console.log(""a = 5"")
// a = 5
// undefined
a
// 5
if(a-=5) console.log(""Kterr"")
// undefined
Tuy nhiên
Javascript:
Câu lệnh điều kiện if-else và switch–case trong JavaScript
3
|7

x = 1
// 1
y = 2
// 2
if(x = y) y++;
// 2
x
// 2
y
// 3
Đừng bao giờ tự phức tạp hóa code của bạn, vì trên thực tế, khi làm việc, code của bạn sẽ qua tay rất nhiều người. Bạn sẽ không muốn “tặng” cho
họ một câu đố đâu nhỉ ?"
79,Câu lệnh điều kiện if,Cấu trúc điều kiện if-else,"Giờ Long lại nảy sinh một suy nghĩ khác: Nếu trong heo có trên 20 nghìn thì Long sẽ mua truyện tranh, còn nếu ít hơn thì sẽ mua kẹo chia cho các
anh.
Rõ ràng là một tình huống hay gặp: nếu một điều kiện được thỏa mãn, thì một hành động nào đó sẽ xảy ra, và trong trường hợp ngược lại, thì cũng
vẫn diễn ra một hành động khác.
Để đáp ứng được yêu cầu đó, Js hỗ trợ cấu trúc điều kiện: if-else;
if
(
<condition>
)
<statement-1>
;
else
<statement-2>
Trong đó:
<condition>
thì vẫn giống như trên, chỉ khác là: nếu
<condition>
là
falsy
thì sẽ thực hiện
<statement-2>
<statement-1>
: là lệnh (hoặc khối lệnh) sẽ được thực thi khi
<condition>
là
truthy
<statement-2>
: là lệnh (khối lệnh) được thực hiện nếu
<condition>
là
falsy
.
Ví dụ:
Javascript:
if(tien_cua_long < ""20 nghin"") console.log(""Long mua keo"");
else console.log(""Long mua truyen tranh"")
// Long mua truyen tranh
// undefined
Và đến giờ này, Long lại nghĩ khác (quả thật là một cậu bạn thiếu kiên nhẫn
☹
): nếu Long có đủ 20 nghìn, thì Long  sẽ mua xe máy múc, còn nếu
chỉ có một lượng tiền trong khoảng 10-20 nghìn, thì Long mua truyện, còn nếu ít hơn 10 nghìn thì mua kẹo.
Đây là một trường hợp phức tạp hơn của điều kiện:
các lệnh lồng nhau
Javascript:
tien_cua_long = 12000
//12000
if(tien_cua_long >= 20000)
console.log(""Long mua may muc""); else if(tien_cua_Long >= 10000)
console.log(""Long mua truyen""); else
console.log(""Long mua keo"")
// Long mua truyen
// undefined
Câu lệnh điều kiện if-else và switch–case trong JavaScript
4
|7
"
80,Câu lệnh điều kiện if,Ternary operator,"Nó là một toán tử 3 ngôi cho phép thực hiện các lệnh điều kiện một cách nhanh chóng hơn.
Cú pháp:
<condition>
?
<value-1>
:
<value-2>
Nếu
<condition>
là
truthy
, thì lấy
<value-1>
, ngược lại lấy
<value-2>
Chúng ta cùng xem xét các trường hợp của một ví dụ:
Trường hợp 1:
Javascript:
f = 0
// 0
t = """"
// ''
if(f > 0)
t = ""kteam""; else
t = ""kter""
// 'kter'
t
// 'kter'
Trường hợp 2:
Javascript:
f = 0
// 0
t = (f > 0 ? ""kteam"" : ""kter"")
// 'kter'
t
// 'kter'
Ta có thể thấy rõ ràng rằng: trong nhiều trường hợp, sử dụng
ternary operator
có thể giảm được thời gian code, và giúp cho code của chúng ta
trông “thon gọn” hơn.
Nhưng đừng bao giờ dùng các ternary operator lồng nhau, vì chúng ảo lắm.
Lấy một ví dụ đơn giản: Giả sử tất cả các biến trong đây đều có giá trị (ngoại trừ k) thì sẽ thế nào? Lại một câu đố hóc búa! Nếu bạn có thể đưa ra
đáp án, vui lòng comment bên dưới BÌNH LUẬN
Javascript:
var k = a ? (b ? (c ? d : e) : (d ? e : f)) : f ? (g ? h : i) : j;"
81,Câu lệnh điều kiện if,Đặt vấn đề #2,"Toàn là một con người lập dị (:v). Những yêu cầu của cậu ta thật là khó hiểu.
Khác với Long, Toàn quyết định thảy 1 con súc sắc, và quy định sẽ ăn số kẹo tương ứng với số nút thảy được.
Như vậy, về tổng thể, sẽ có 6 trường hợp có thể xảy ra với số kẹo mà Toàn ăn.
Câu lệnh điều kiện if-else và switch–case trong JavaScript
5
|7

Trong JavaScript, cũng có một cấu trúc điều kiện để giúp chúng ta kiểm tra các trường hợp có thể xảy ra của một điều kiện nào đó, và với khả năng
đó, sẽ có một lệnh hay một khối lệnh được thực hiện.
Đó là cấu trúc
switch-case"
82,Câu lệnh điều kiện if,Cấu trúc switch-case,"Cú pháp:
Javascript:
switch(<expression>) {
case <value-1>:
<statement-1>
break;
case <value-2>:
<statement-2>
break;
case <value-3>:
<statement-3>
break;
.......................
case <value-n>:
<statement-n>
default:
<default-statement>
Trong đó:
<expression>
: là biểu thức, giá trị này sẽ được so sánh lần lượt với
<value>
của từng
case
, nếu như
<value>
mà bằng với
<expression>
, thì
<statement>
tương ứng được thực hiện
<value>
: là các giá trị được mang đi so sánh, lệnh (khối lệnh) bên trong nó sẽ được thực hiện nếu
<value>
bằng với
<expression>
.
<statement>
: là một lệnh hoặc một khối lệnh, sẽ được thực hiện nếu
<value>
tương ứng bằng với
<expression>
<default-statement>
: là lệnh (khối lệnh) sẽ được thực hiện nếu
<expression>
khác với tất cả các
<value>
.
Ví dụ:
Javascript:
a = ""This"" + ' ' + ""is"" + ""howKteam""
// 'This ishowKteam'
> switch(a) {
case ""This is howKteam"":
console.log(""True"")
break;
case ""This ishowKteam"":
console.log(""False"")
break;
}
// False
// undefined
Nếu có nhiều case trùng nhau, chương trình sẽ chỉ thực hiện các lệnh trong <
statement
> đầu tiên
Javascript:
Câu lệnh điều kiện if-else và switch–case trong JavaScript
6
|7

candies = 2
// 2
switch (candies) {
case 2:
console.log(""Two"");
break;
case 2:
console.log(""Hai"");
break
}
// Two
// undefined
Lưu ý:
Nếu ta không đặt lệnh break sau các
<statement>
, thì một điều không mong muốn sẽ xảy ra:
Ví dụ:
Cho đoạn code sau:
Javascript:
candies = 2;
// undefined
switch(candies) {
case 1:
console.log(""One candy"");
case 2:
console.log(""Two candies"");
case 3:
console.log(""Three candies"");
default:
console.log(""More than 3 candies"");
}
// Two candies
// Three candies
// More than 3 candies
// undefined
Tại sao nó lại in ra một mớ bòng bong thế kia ? Đáp án, một cách đơn giản, là do ta thiếu lệnh
break,
và nó được gọi là fall through.
Theo mặc định, chương trình sẽ thực hiện các lệnh (khối lệnh) từ nơi có
<value>
bằng với
<expression>
cho đến cuối mà không xét các điều kiện
tiếp theo nữa.
Để “fix” nó, ta sẽ cần đến lệnh break."
83,Câu lệnh điều kiện if,Lệnh break trong JavaScript,"Trong JavaScript và hầu hết ngôn ngữ lập trình khác, lệnh
break
được dùng để thoát khỏi một vòng lặp (khái niệm mà chúng ta sẽ cùng tìm hiểu
trong bài tiếp theo).
Bên cạnh đó, với JavaScript,
break
còn được dùng để thoát khỏi
cấu trúc switch-case
. Cụ thể, nếu ta đặt đúng như cấu trúc, thì nó sẽ thoát ngay
khi đã thực hiện một (khối) lệnh, mà không để tràn sang các (khối) lệnh khác.
Ví dụ:
Javascript:
Câu lệnh điều kiện if-else và switch–case trong JavaScript
7
|7

candies = 1
// 1
switch(candies) {
case 1:
console.log(""One candy"");
break;
case 2:
console.log(""Two candies"");
default:
console.log(""More than 2 candies"");
}
// One candy
// undefined
Bên cạnh đó, các bạn có thể lồng nhiều trường hợp vào chung một nhóm:
Javascript:
switch (candies) {
case 1:
case 2:
console.log(""One candy or two candies"");
break;
default:
console.log(""More than 2 candies"");
break;
}
// One candy or two candies
// undefined
Hoặc
Javascript:
candies = 1
// 1
switch (candies) {
case 1:
case 2:
console.log(""One candy or two candies"");
break;
default:
console.log(""More than 2 candies"");
break;
}
// One candy or two candies
// undefined"
84,Câu lệnh điều kiện if,Kết luận,"Trong bài này, chúng ta đã được tìm hiểu về câu lệnh điều kiện trong JavaScript
Ở bài sau, chúng ta sẽ cùng nhau tìm hiểu về
”."
85,Function trong JavaScript,Bài: Function trong JavaScript (Phần 1) - Khái niệm về Function,"Xem bài học trên website để ủng hộ Kteam:
Function trong JavaScript (Phần 1) - Khái niệm về Function
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!
***Bài học này tương đối dài và gồm nhiều phần quan trọng.
***Để có thể theo dõi bài học một cách tốt nhất, hãy đảm bảo bạn đã đọc qua các phần trong bài trước khi đi xem video về phần đó, đồng
thời viết lại hoặc code lại các ví dụ để hiểu sâu hơn những
vấn đề mà tác giả và người hướng dẫn đã trình bày trong bài."
86,Function trong JavaScript,Dẫn nhập,"Ở các bài trước, chúng ta đã cùng tìm hiểu về
vòng lặp For trong JavaScript
.
Ở bài này, chúng ta sẽ cùng tìm hiểu về một kiểu dữ liệu mới:
function"
87,Function trong JavaScript,Nội dung,"Để nắm được nội dung bài này, bạn cần có kiến thức về:
Các kiểu dữ liệu cơ bản trong JavaScript
Cấu trúc điều kiện
Vòng lặp trong JavaScript
Biến trong JavaScript
Những nội dung mà Kteam sẽ gửi đến các bạn:
Giới thiệu về hàm và thủ tục trong JavaScript
Các đặc điểm của function
Tham số và đối số trong function
Lệnh return trong JavaScript
Biến trong function"
88,Function trong JavaScript,Đặt vấn đề,"Trong quá trình code, chắc chắn chúng ta sẽ gặp những tình huống mà để giải quyết, ta sẽ cần phải dùng đi dùng lại một đoạn code nhiều lần.
Trong những trường hợp như thế, việc copy paste lại các đoạn code thực sự rất tốn sức, nếu như không muốn nói là “bất khả”.
Và, để giúp cho người dùng đỡ mất công với việc reuse code, JavaScript hỗ trợ một kiểu dữ liệu mới, và nó được gọi là
function
(dịch: hàm). Về bản
chất, function là một object (thứ mà ở phần sau của khóa, bạn sẽ được tìm hiểu)"
89,Function trong JavaScript,Hàm trong JavaScript,"Kiểu dữ liệu function trong JavaScript , cũng giống như các kiểu dữ liệu khác, đều giúp lưu trữ các giá trị. Nhưng khác với các kiểu dữ liệu thông
thường, function thực chất giúp chúng ta lưu trữ các “câu lệnh”, để có thể tái sử dụng một cách thuận tiện
hơn.
Trong JavaScript, dù là hàm hay thủ tục, đều có một cấu trúc chung như sau:
Function trong JavaScript (Phần 1) - Khái niệm về Function
2
|8

function <
function_name
>(<
parameter-1
>, <
parameter-2
>,…) {
<
statement
>
}
Trong đó:
<
function_name
>: là tên của hàm, và sẽ được sử dụng để gọi hàm (có tác dụng gần giống như là một biến)
Các <
parameter
>: là các giá trị mà người dùng đưa vào cho hàm, để hàm có thể thực hiện công việc của mình
<
statement
>: là một lệnh hay một khối lệnh, là những nội dung bên trong hàm.
Nếu như sau từ khóa function, mà có thêm một dấu *, thì đó là generator function (một khái niệm mà chúng ta sẽ cùng tìm hiểu ở bài sau).
Ví dụ:
Javascript:
function print() {
console.log('Printed !')
}
// undefined
Đối với hàm trên, nó không cần có các tham số, vì thực chất công việc của nó chỉ là in ra cụm từ “Printed !” chứ không thực hiện bất kỳ công việc
nào khác.
Sau khi đã khởi tạo được một function như trên, ta chỉ cần “gọi” function đó ra và sử dụng:
Javascript:
print()
// Printed !
// undefined
Và tất nhiên, biến print sẽ có kiểu dữ liệu là
function
:
Javascript:
typeof(print)
// 'function'
Sử dụng các biến trong function:
Javascript:
function square(x) {
console.log(x*x)
}
// undefined
square(5)
// 25
// undefined
square(3)
// 9
// Undefined
Bên cạnh cách khởi tạo hàm như trên, còn một cách nữa dành cho những ai thích làm khó bản thân"
90,Function trong JavaScript,Constructor function,"Function trong JavaScript (Phần 1) - Khái niệm về Function
3
|8

Cú pháp:
<
new
> Function(<
p1
>, <
p2
>, <
p3
>, …, <
pn
>, <
functionBody
>)
Cụ thể hơn một chút:
<
new
>: là từ khóa
new
, có thể có hoặc không
<
p
>: tương ứng với các các <parameter> trong cú pháp trên
<
functionBody
>: là các câu lệnh trong phần thân của function.
Chú ý:
cả <
p
> và <
functionBody
> đều phải được ghi ra dưới dạng một chuỗi:
Ví dụ:
với hàm Print bên trên
Javascript:
Print = Function('console.log(""Printed !!"")')
// [Function: anonymous]
Print()
// Printed !!
// undefined
Đó là với những function đơn giản, giả sử các bạn muốn in 5 dòng liên tục:
Javascript:
Print = Function('a', 'b', 'c', 'd', 'e', 'console.log(a); console.log(b); console.log(c); console.log(d); console.log(e)')
/// [Function: anonymous]
Print(""This"", 'is', 'howKteam', 'Free education', 'Website')
// This
// is
// howKteam
// Free education
// Website
// undefined
Đây là một cách rất phức tạp và khó thực hiện. Rất mong các bạn có thể đừng làm khó bản thân như thế này."
91,Function trong JavaScript,Gọi một function trong JavaScript,"Một function đơn giản chỉ là một đoạn code nhỏ được lưu trữ lại để lấy ra khi mà ta cần.
Để có thể thực thi những đoạn code trong một function, ta phải gọi nó. Cách gọi đơn giản là viết tên nó ra và thêm vào các đối số cần thiết (nếu
có).
Javascript:
function plus(a, b) {
return a + b
}
// undefined
plus(2, 3)
// 5
plus('2', '3')
// '23'"
92,Function trong JavaScript,Function là một loại object,"Function trong JavaScript (Phần 1) - Khái niệm về Function
4
|8

Toán tử instanceof
Cú pháp:
<
A
> instanceof <
B
>
Trong đó:
<
A
> là một loại object bất kì.
<
B
> là một constructor
Tác dụng: Một cách dễ hiểu, thì toán tử này giúp chúng ta kiểm tra xem <
A
> có được xây dựng dựa trên <
B
> hay không. Thông thường, <
A
> được
xem như là xây dựng
từ <
B
> khi mà ta dùng từ khóa
new
kết hợp với constructor <
B
>
Ví dụ:
Javascript:
a = new Set()
// Set(0) {}
a instanceof Object
// true
b = new Number(10)
// [Number: 10]
b instanceof Number
// true
c = 'howKteam'
// 'howKteam'
c instanceof String
// false"
93,Function trong JavaScript,Chứng minh: function được xây dựng dựa trên object,"Đây là kiến thức mới, nhưng để các bạn hiểu rõ vấn đề, Kteam sẽ chứng minh việc object chính là nền tảng của function. Có nghĩa là: function là một
dạng object.
Javascript:
function myfunc() {
console.log('howKteam')
}
// undefined
myfunc instanceof Object
// true"
94,Function trong JavaScript,Lệnh return,"Nếu các bạn đã biết về lập trình trước đó, thì đối với hàm, ta sẽ chia ra làm 2 loại khác nhau: đó là hàm và thủ tục. Một function được định nghĩa là
một thủ tục khi nó chỉ thực hiện một công việc nào đó mà không có giá trị trả về, còn hàm thì khác, nó sẽ
trả về một giá trị.
Tất cả các
function
trong Js đều trả về một giá trị cho người dùng khi nó được gọi đến. Giá trị này sẽ được quy định bởi lệnh
return
(nếu có):
return <
value
>
Trong đó, <
value
> là giá trị trả về, và giá trị mặc định của nó là
undefined
.
Function trong JavaScript (Phần 1) - Khái niệm về Function
5
|8

Lấy ví dụ với hàm square bên trên, ta sẽ thêm lệnh return để nó trả về một giá trị:
Javascript:
function square(x) {
console.log('Đây là hàm square')
return x*x
}
// undefined
Và..khi ta lấy nó ra chạy, thì sẽ có kết quả:
Javascript:
square(6) // giá trị ở dòng đầu là câu lệnh bên trong hàm, giá trị ở dòng thứ 2 là giá trị mà hàm đó return về.
// Đây là hàm square
// 36
Lưu ý:
khi ta dùng lệnh
return
, thì toàn bộ chương trình cũng sẽ kết thúc, tức là, các câu lệnh bên sau return sẽ có khả năng không được chạy.
Javascript:
function f(x) {
return x
console.log('returned')
}
// undefined
f(10)
// 10
f(20)
// 20"
95,Function trong JavaScript,Tham số và đối số của function,"Một cách dễ hiểu, tham số là những gì mà function đó yêu cầu user truyền vào để thực hiện hàm. Còn đối số là những giá trị mà ta truyền vào.
Lấy ví dụ với hàm
square
vừa nãy:
Javascript:
function square(x) { // x ở đây là tham số
return x * x;
}
console.log(square(7)); // 7 bên trong lời gọi hàm chính là đối số
Các tham số và đối số có thể mang bất kỳ kiểu dữ liệu nào, miễn là nó hợp lệ (kể cả hàm)
Dưới đây là một số ví dụ với hàm trong JavaScript
Javascript:
Function trong JavaScript (Phần 1) - Khái niệm về Function
6
|8

function upper(x) {
return x.toUpperCase();
}
// undefined
function lower(x) {
return x.toLowerCase();
}
// undefined
function capitalize(x) {
let str = upper(x[0]);
for (let i = 1; i < x.length; i++)
if (x[i - 1] == "" "") str += upper(x[i]);
else str += lower(x[i]);
return str;
}
// undefined
Theo mặc định, việc khởi tạo các hàm sẽ đưa chúng lên đầu chương trình, có nghĩa là, ta có thể dùng function ở dòng bên trên, và sau đó khởi tạo
nó ở bên dưới (giống với từ khóa var).
Javascript:
console.log(capitalize('this is my book'))
function upper(x) {
return x.toUpperCase();
}
function lower(x) {
return x.toLowerCase();
}
function capitalize(x) {
let str = upper(x[0]);
for (let i = 1; i < x.length; i++)
if (x[i - 1] == "" "") str += upper(x[i]);
else str += lower(x[i]);
return str;
}
Đây là output:
Giả sử, ta lỡ tay quên không truyền vào tham số hay các tham số không đầy đủ thì sao ?
Trong JavaScript, các tham số sẽ luôn mang giá trị là
undefined
trước khi được truyền vào, có nghĩa là, nếu ta không truyền vào tham số, thì mặc
định nó sẽ bằng
undefined
.
Javascript:
function Print(sentence) {
console.log(sentence)
}
// undefined
Print('Kteam')
// Kteam
// undefined
Print() //  Dòng đầu tiên chính là kết quả của câu lệnh console.log trong function
// undefined
// undefined
Function trong JavaScript (Phần 1) - Khái niệm về Function
7
|8
"
96,Function trong JavaScript,Biến trong function,"Một function trong Js hoàn toàn có thể sử dụng được các biến toàn cục tại chương trình đó. Khi ta gọi ra một biến, nếu biến đó không trùng với các
tham số, và cũng không được khởi tạo bên trong
function
, thì chương trình sẽ lấy giá trị của biến toàn cục tương ứng để sử dụng.
Ví dụ:
Javascript:
var n1 = 2, n2 = 5
// undefined
function mul() {
return n1*n2 // Lấy 2 biến toàn cục ra để thực hiện phép nhân
}
// undefined
mul()
// 10
Và, nếu ta thay đổi function một chút:
Javascript:
var n1 = 2, n2 = 5
// undefined
function mul() {
let n1 = 10, n2 = 10
return n1*n2 // Lấy giá trị có sẵn trong function để dùng
}
// undefined
mul()
// 100
Và, mặc dù function có thể sử dụng các biến toàn cục, nhưng function không thể tạo ra nó:
Javascript:
function make() {
var t = 0
}
// undefined
t
// Uncaught ReferenceError: t is not defined
Đây là lí do: Vì nó là một chương trình con, nên việc dùng
var
sẽ chỉ cho phép tạo ra một biến với tác dụng toàn cục ở bên trong chính function đó.
Mời các bạn cùng xem 2 ví dụ dưới đây để hiểu rõ hơn:
Javascript:
function kteam() {
{
var t = 100;
}
console.log(t * 2);
}
// undefined
kteam()
// 200
// undefined
Javascript:
Function trong JavaScript (Phần 1) - Khái niệm về Function
8
|8

function kteam() {
{
let t = 100;
}
console.log(t * 2);
}
// undefined
kteam()
// Uncaught ReferenceError: t is not defined
at kteam (REPL6:5:17)
Qua 2 ví dụ trên, ta có thể thấy rằng, các từ khóa
let
,
var
khi được dùng trong function thì chỉ có tác dụng nội bộ trong function đó. Khi ở trong
function, thì chúng có tác dụng y chang như khi chúng ở bên ngoài."
97,Function trong JavaScript,Kết luận,"Qua bài này, Kteam đã giới thiệu đến các bạn kiểu dữ liệu function trong JavaScript
Qua bài sau, tụi mình sẽ nói sâu hơn về function
”."
98,Function trong JavaScript,Bài: Function trong JavaScript (Phần 2) - Các kiến thức mở rộng,"Xem bài học trên website để ủng hộ Kteam:
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
"
99,Function trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng nhau tìm hiểu khái quát về function trong JavaScript .
Trong bài này, chúng ta sẽ cùng nhau mở rộng hơn kiến thức của mình về function"
100,Function trong JavaScript,Nội dung,"Để nắm vững nội dung bài này, bạn cần có kiến thức về:
Function trong Js
Vòng lặp trong Js
Biến và kiểu dữ liệu trong Js
Những nội dung mà chúng ta sẽ cùng tìm hiểu:
Arrow function
Lệnh yield
Generator"
101,Function trong JavaScript,Arrow function,"Nếu các bạn có biết về ngôn ngữ lập trình Python, thì chắc hẳn các bạn sẽ biết ít nhiều về
lambda
– một kiểu rút gọn của hàm. Còn đối với các bạn
mà không biết về lambda, thì đừng lo, Kteam sẽ giải thích cho các bạn
Arrow
function
là một hình thức thu gọn của function, giúp chúng ta viết ít code hơn, và gọn hơn trong nhiều trường hợp.
Vì là một dạng thu gọn của function, nên về bản chất, Arrow function vẫn là
function
.
Ví dụ:
Javascript:
> Print = () => ""Hello""
[Function: Print]
> Print()
'Hello'
> typeof(Print)
'function'
Nhìn câu lệnh khởi tạo Arrow function bên trên, liệu các bạn có thể đoán được cú pháp của nó chứ ? Nếu không được, thì đừng lo, Kteam sẽ chỉ cho
các bạn ngay bên dưới
<
Tên biến
> = (<
p1
>, <
p2
>, …, <
pn
>) => <statement>
Trong đó:
<
p1
>, <
p2
>, …, <
pn
>: là các tham số trong function. Nếu như chỉ có 1 tham số, ta có thể loại bỏ dấu ngoặc.
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
2
|6

<
statement
>: Là lệnh (hoặc khối lệnh) của function.
Ví dụ:
Javascript:
square = (x) => x*x // Mặc định là return x*x
// [Function: square]
square(23) // gọi hàm để sử dụng một cách simple
// 529
Sum = x => { // Y hệt cách sử dụng function
let S = 0;
for(let i = 1; i <= x; i++)
S += i
return S
}
// [Function: Sum]
Sum(100)
// 5050
Nếu function chỉ có một câu lệnh, thì ta có thể bỏ dấu ngoặc và từ khóa return, như trong ví dụ trên."
102,Function trong JavaScript,Từ khóa yield và hàm next trong JavaScript,"Có bao giờ bạn tự hỏi: liệu một function nào đó có thể bị pause lại trong quá trình thực hiện, rồi sau đó lại continue tiếp không ?
Nếu là mình, thì trước khi biết đến lệnh yield, thì mình cũng sẽ trả lời là không.
Bây giờ, Kteam sẽ chỉ cho các bạn về
generator
và lệnh
yield
trong JavaScript
Generator
Bạn có thể hiểu một cách đơn giản, generator gần giống như
function
, chỉ khác ở một điểm là nó sẽ được chạy một cách ngắt quãng, chứ sẽ không
chạy một lèo như là function. Các lệnh trong
generator
sẽ được thực hiện chỉ khi ta gọi nó.
Nói về lý thuyết thì có vẻ khó hiểu, nhưng nếu vào practice, thì cũng không khó lắm đâu
Để khởi tạo một generator, ta cũng dùng function, nhưng khác ở chỗ là ta sẽ đặt dấu * (dấu hoa thị) sau từ khóa “function”.
function* <
function_name
>(<
parameter-1
>, <
parameter-2
>,…) {
<
statement
>
}
Ví dụ:
Javascript:
function* a() {
}
// undefined
a // Một generator function
// [GeneratorFunction: a]
Để có thể sử dụng được generator, ta phải dùng biến và gán cho nó giá trị của function generator vừa tạo:
Javascript:
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
3
|6

function* a() {
}
// undefined
a
// [GeneratorFunction: a]
t = a()
// Object [Generator] {}
Như ta có thể thấy, giá trị của biến t trong trường hợp trên không phải là function, mà là
Object [Generator] {}
. Điều này chứng tỏ nó là
generator
.
Khác với
function
thông thường, generator cho phép sử dụng một câu lệnh (khác với return) để trả về một giá trị, và nó là lệnh yield.
Cụ thể, với một lệnh
yield
, nó sẽ tạm dừng chương trình và trả về một giá trị. Sau đó, cứ mỗi lần
yield
, thì nó sẽ lại dừng, sau đó lại chạy…cho đến
hết generator function.
Để có thể nhận giá trị trong một generator bằng lệnh yield, thì ta dùng hàm
next().
Với mỗi lần dùng hàm
next
(), nó sẽ trả về 2 giá trị:
value
và
done
. Value sẽ là giá trị mà function đó yield về, còn done sẽ là trạng thái của function
đó, nó cho biết function đã được chạy hết hay chưa.
Ví dụ:
Javascript:
function* generator() {
yield 1
yield 2
yield 3
}
// undefined
g = generator()
// Object [Generator] {}
g.next() // yield lần 1
// { value: 1, done: false }
g.next() // yield lần 2
// { value: 2, done: false }
g.next() // yield lần 3
// { value: 3, done: false }
g.next() // yield lần 4, lúc này done = true
// { value: undefined, done: true }
Việc cho phép dùng hàm next(), biến generator thành một
iterator
."
103,Function trong JavaScript,Generator,"Vòng lặp for..of và khái niệm iterable
Đối với việc lặp qua các ký tự trong một chuỗi, thì như đã tìm hiểu ở bài trước, một phương án hiệu quả là việc lặp qua chỉ số của các ký tự trong
chuỗi, và từ đó lấy ra các ký tự trong chuỗi đó. Dưới đây là một ví dụ minh họa:
Javascript:
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
4
|6

string = 'howKteam'
// 'howKteam'
for(let i = 0; i < string.length; i++) console.log(string[i]);
// h
// o
// w
// K
// t
// e
// a
// m
// undefined
Nhưng bên cạnh đó, còn có một cách lặp khác, cũng có công dụng giúp chúng ta lấy từng ký tự của một chuỗi, đó là dùng for..of.
Cú pháp:
for(<
variable
> of <
iterable
>)
<statement>
Trong đó:
<
variable
>: là biến dùng để chạy trong vòng lặp, và có thể được khởi tạo bằng các từ khóa let hoặc var trước khi vòng lặp được thực hiện.
<
iterable
>: là một khái niệm mới, dùng để chỉ những kiểu dữ liệu mà ta có thể dùng vòng lặp for..of để duyệt qua các phần tử của nó.
<
statement
>: giống với vòng lặp for thông thường, là một câu (hoặc một khối) lệnh.
Trong mỗi lần lặp, thì <
variable
> sẽ lần lượt mang các giá trị của các “thuộc tính” bên trong <
iterable
>. Và cũng giống như vòng lặp for thông
thường, for..of cũng là một vòng lặp biết trước
số lần lặp, và số lần lặp sẽ bằng với độ dài của <
iterable
>, và nó không bị ràng buộc theo điều kiện.
Vậy…iterable là cái gì thế ?
Từ các giải thích về vòng lặp for..of như trên, chắc các bạn cũng phần nào đoán ra được rằng iterable là gì. Kteam khuyến khích các bạn hiểu một
cách đơn giản:
iterable
là các kiểu dữ liệu mà những giá trị thuộc các kiểu dữ liệu đó có thể được xé nhỏ, bóc tách ra thành những giá trị nhỏ hơn.
Lấy ví dụ với kiểu dữ liệu chuỗi: Với chuỗi, ta có thể dùng for..of để duyệt qua các ký tự của chuỗi, đó là dấu hiệu cơ bản nhất
Ví dụ:
Javascript:
string = 'howKteam'
// 'howKteam'
for(let char of string) console.log(char)
// h
// o
// w
// K
// t
// e
// a
// m
// undefined
Do đó, ta có thể kết luận rằng, chuỗi là một
iterable
.
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
5
|6

Ngoài string, có nhiều kiểu dữ liệu khác cũng là iterable: array (mảng), set (tập hợp), map, …. Một vài loại iterable đơn giản nhất sẽ được Kteam giới
thiệu đến các bạn trong các bài kế tiếp.
Việc hiểu về iterable theo cách Kteam giải thích như trên có thể giúp các bạn biết về iterable. Nhưng về mặt bản chất, nó được quy định bởi phương
thức
Symbol.iterator
của chính kiểu dữ liệu đó.
Tức là, người dùng có thể biến một kiểu dữ liệu nào đó thành một iterator.
Các giải thích dưới đây là phần mở rộng, và do đó nên đừng lo nếu bạn gặp một chút khó khăn trong việc hiểu nó.
Việc quy định một kiểu dữ liệu nào đó có phải là một iterable hay không phụ thuộc vào việc kiểu dữ liệu đó có chứa phương thức
Symbol.iterator
hay không. Do đó, việc tạo ra phương thức này cho một kiểu dữ liệu nào đó, sẽ biến nó thành một
iterable
.
Lấy ví dụ với kiểu dữ liệu số. Ban đầu, nó không thể được duyệt qua bằng
for..of
:
Javascript:
kteam = 6
// 6
for(let t of kteam) console.log(t)
// Uncaught TypeError: kteam is not iterable
Nhưng sau đó, ta sẽ phù phép để có thể dùng for..of cho một số:
Javascript:
Number.prototype[Symbol.iterator] = function* () {
yield 'this';
yield 'is';
yield 'number';
}
// [GeneratorFunction (anonymous)]
kteam = 6
// 6
for(let t of kteam) console.log(t)
// this
// is
// number
// undefined
Với for..of, các lệnh như break và continue được dùng bình thường.
Generator là một iterable
Ta có thể đơn giản lặp qua một generator bằng for..of, điều này chứng tỏ nó là một iterable.
Javascript:
Function trong JavaScript (Phần 2) - Các kiến thức mở rộng
6
|6

function* g() {
yield 'we'
yield 'are'
yield 'kters'
}
// undefined
f = g()
// Object [Generator] {}
for(let i of f) console.log(i)
// we
// are
// kters
// undefined
Vậy…còn iterator ?
Như Kteam có nhắc đến, rằng generator là một
iterator
.
Bạn có thể đã sử dụng iterator hàng ngày nhưng không nhận ra, vì nó khá trừu tượng.
Hiều đơn giản, thì iterator là cái giúp chúng ta lặp qua một chuỗi, một generator, một array, ….
Việc sử dụng vòng lặp for..of chính là một biểu hiện rõ rệt nhất.
Javascript:
strs = 'JavaScript'
// 'JavaScript'
for(let str of strs) console.log(str.concat(' + '))
// J +
// a +
// v +
// a +
// S +
// c +
// r +
// i +
// p +
// t +
// undefined
Từ những khái niệm như trên, chắc hẳn các bạn đã biết được sự khác biệt giữa iterator và iterable rồi nhỉ ?
Rất đơn giản: một cái là một cấu trúc dữ liệu có thể được lặp qua. Còn một cái là thứ giúp chúng ta thực hiện việc lặp."
104,Function trong JavaScript,Kết luận,"Qua bài này, các bạn đã biết thêm về function trong Js, ngoài ra còn có vòng lặp for..of và khái niệm iterator.
Trong bài sau, Kteam sẽ giới thiệu đến các bạn một khái niệm mới liên quan đến function, đó là
đệ quy
”."
105,Function trong JavaScript,Bài: Function trong JavaScript (Phần 3) - Khái niệm về đệ quy,"Xem bài học trên website để ủng hộ Kteam:
Function trong JavaScript (Phần 3) - Khái niệm về đệ quy"
106,Function trong JavaScript,Dẫn nhập,"Ở các bài trước, các bạn đã được tìm hiểu về
Các kiến thức mở rộng về Function trong JavaScript
Trong bài này, chúng ta sẽ cùng nhau tìm hiểu về một cách làm việc mới mẻ hơn, đó là
đệ quy (recursion)."
107,Function trong JavaScript,Nội dung,"Để nắm được bài này, bạn cần có kiến thức về:
Các kiểu dữ liệu cơ bản trong JavaScript
Kiểu dữ liệu function trong JavaScript
Câu lệnh điều kiện trong JavaScript
Vòng lặp trong JavaScript
Nội dung của bài này:
Đặt vấn đề
Khái quát về đệ quy
Ví dụ về đệ quy
Đệ quy và vòng lặp"
108,Function trong JavaScript,Đặt vấn đề,"Bạn cần phải thực hiện một công việc, và sẽ dừng lại ở một thời điểm nào đó.
Khi nhắc như vậy, chắc hẳn chúng ta sẽ nhớ ngay đến
vòng lặp
– một món vũ khí tiện lợi cho những thao tác có đặc điểm là lặp đi lặp lại.
Tuy nhiên, nếu như mong muốn một sự mới mẻ hơn cho những dòng code, đệ quy cũng là một sự lựa chọn đáng để thử, dành cho những chương
trình đơn giản.
Vậy đệ quy là cái gì ? Mời các bạn theo dõi phần bên dưới.
Khái niệm về đệ quy
Các bạn đã được biết về
function
, hay còn được gọi là hàm, là chương trình con. Function có thể được gọi ra từ chương trình chính hoặc từ một
function khác.
Vậy giả sử, function mà được gọi ngay trong chính
function
đó thì sao nhỉ ? Cách gọi hàm như vậy được gọi là
đệ quy
.
Một yếu tố thiết yếu cần có trong việc đệ quy, chính là việc gọi hàm trong chính nó, và bắt buộc phải có một
điểm dừng
.
Nếu một hàm đệ quy mà không có điểm dừng thì sao ? Thì tất nhiên, nó sẽ chạy, và cũng dừng, nhưng nó dừng theo một cách chẳng ai mong
muốn, đó là
tràn bộ nhớ
.
Javascript:
Function trong JavaScript (Phần 3) - Khái niệm về đệ quy
2
|4

> function recursion(n) {
... recursion(n-1);
... }
undefined
> recursion(1) // Gọi hàm đệ quy recursion
Uncaught RangeError: Maximum call stack size exceeded
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
at recursion (REPL3:2:1)
Hàm
recursion
sẽ chạy mãi, và mỗi lần chạy, nó sẽ tiêu tốn một lượng bộ nhớ nhất định. Đến một thời điểm nào đó, thì sẽ xảy ra lỗi tràn bộ nhớ.
Về cách bộ nhớ được lưu trữ trong máy tính khi chạy hàm đệ quy, Kteam sẽ có một bài viết để đề cập về nó."
109,Function trong JavaScript,Ví dụ về đệ quy,"Như vậy, chắc hẳn các bạn đã biết đệ quy là gì rồi, giờ chúng ta hãy cùng nhau xem một ví dụ cụ thể. Cả 2 ví dụ dưới đây đều có thể giải quyết đơn
giản bằng vòng lặp, nhưng đây là đệ quy, do đó nên đệ quy sẽ là cách tiếp cận cho những ví dụ bên dưới.
Ví dụ 1
: Tính tổng các số trong đoạn [1..n] bằng đệ quy.
Phương pháp tiếp cận:
Như ta đã biết, đệ quy có 2 yếu tố chính, chính là
lệnh gọi đệ quy
và
điểm dừng
.
Nếu như để ý chi tiết, thì tổng các số trong đoạn [1..n] chính là tổng: 1 + 2 + 3 + … + n-2 + n-1 + n. Và trong tổng này, ta có tổng cộng là
n số
hạng
. Vì vậy, một phương pháp khả dĩ sẽ là gọi đệ quy với mỗi số hạng tương ứng. Bắt đầu từ 1, đến 2, …
Vậy thì khi đó, ta có thể suy ra rằng, quá trình đệ quy sẽ dừng lại khi mà
giá trị n được xét đến
. Vì nó là giá trị cuối cùng.
Từ cách tiếp cận như trên, ta có thể viết được
mã giả
như sau:
Hàm Sum(n, k = 1) {
Nếu k = n à Trả về n, kết thúc đệ quy.
Ngược lại (nếu k ≠ n), thì trả về k + Sum(n, k+1);
}
Để có thể hiểu được đoạn mã giả này, ta sẽ thử lấy ví dụ với n = 4:
Với k = 1 (<n), trả về 1 + Sum(4, 2).
1 + Sum(4, 2): Lúc này, k = 2 (<n), thì trả về 1 + (2 + Sum(4, 3)) (Giá trị 1 vẫn được giữ lại do lệnh gọi đệ quy trước)
1 + (2 + Sum(4, 3)): k = 3 (<n), trả về 1 + (2 + 3 + Sum(4, 4)).
1 + (2 + (3 + Sum(4, 4))): k = 4, trả về k.
Sau cùng, tổng này sẽ có dạng: 1 + (2 + (3 + (4))) và bằng với 10.
Sau khi đã “ngấm” được đoạn mã giả trên, ta sẽ chuyển thành ngôn ngữ mà chúng ta đang dùng:
Javascript:
Function trong JavaScript (Phần 3) - Khái niệm về đệ quy
3
|4

> function Sum(n, k = 0) {
... if(n == k) return n;
... return k + Sum(n, k + 1);
... }
undefined
Và, khi gọi hàm với một số bất kì, thì kết quả cho ra sẽ chính xác:
Javascript:
> Sum(4)
10
Ví dụ 2
:
Tính
, với n và k cho trước
Phương pháp tiếp cận:
Về mặt bản chất, thì
=
(k số n).
Từ đây, một cách để đệ quy là sử dụng số mũ của lũy thừa.
Ý tưởng được trình bày trong đoạn mã giả sau:
Hàm pow(n, k) {
Nếu p = 1 à trả về n (do
)
Nếu p > 0 à trả về n * pow(n, k-1)
}
Cũng tương tự như ví dụ 1, dưới đây chúng ta cùng xem xét cách chương trình chạy với n = 2 và k = 4:
Đầu tiên, k = 4 (>1) à trả về 2 * pow(2, 3)
k = 3 (>1) à gọi 2 * (2 * pow(2, 2)) (Giữ lại 2 ban đầu do kế thừa từ lệnh đầu tiên)
k = 2 (>1) à gọi 2 * (2 * (2 * pow(2, 1)))
k = 1 (=1) à trả về 2 * 2 * 2 * 2 = 16
Và, từ đoạn mã giả đó, ta có thể chuyển thành code, và cách code như sau:
Javascript:
> function pow(n, k) {
... if(k == 0) return 1;
... return n * pow(n, k-1);
... }
undefined
> pow(2, 5)
32
> pow(4, 4)
256
Hai chương trình trên chỉ là 2 chương trình cơ bản đối với đệ quy. Về thực chất, đệ quy không khó, nhưng nó khá trừu tượng. Chính vì thế, khi đã
nắm được bản chất của nó, việc sử dụng đệ quy thành thạo hoàn toàn nằm trong tầm tay."
110,Function trong JavaScript,Mở rộng,"Cả 2 ví dụ trên, đều có thể sử dụng vòng lặp để hoàn thành một cách dễ dàng. Trên thực tế, thời gian chạy của đệ quy và vòng lặp (trong 2 trường
hợp trên) là như nhau.
Function trong JavaScript (Phần 3) - Khái niệm về đệ quy
4
|4

Bây giờ là một thử thách dành cho bạn: hãy sửa lại hàm
pow
bên trên sao cho khi chạy, số bước chạy ít hơn so với cách mà Kteam đã đề cập.
Gợi ý
:
với k chẵn."
111,Function trong JavaScript,Đệ quy và vòng lặp,"Hai ví dụ bên trên chính là điển hình cho cách mà vòng lặp có thể thay thế đệ quy: Ở ví dụ 1, chỉ cần lặp các số từ 1 đến n, sau đó cộng lại là được,
còn ở ví dụ 2, thì lặp các số từ 1 đến k, với mỗi lần lặp ta nhân n vào biến kết quả là xong (ban đầu
biến kết quả phải bằng 1).
Và, tất nhiên, vì tính trừu tượng của nó, đệ quy không được khuyến khích sử dụng một cách lung tung. Trong tất cả các trường hợp, nếu có thể, hãy
dùng vòng lặp."
112,Function trong JavaScript,Kết luận,"Qua bài này, các bạn đã có kiến thức về một skill mới, đó là đệ quy.
Trong bài tiếp theo, các bạn sẽ được củng cố lý thuyết cũng như thực hành thêm một vài
bài tập về Function trong JavaScript
”."
113,Kiểu dữ liệu Boolean trong JavaScript,Bài: Kiểu dữ liệu Boolean trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu Boolean trong JavaScript
"
114,Kiểu dữ liệu Boolean trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã được tìm hiểu về kiểu dữ liệu chuỗi trong JavaScript
Ở bài này, chúng ta sẽ cùng nhau tìm hiểu về một kiểu dữ liệu khác:
Kiểu dữ liệu boolean"
115,Kiểu dữ liệu Boolean trong JavaScript,Nội dung,"Những yêu cầu về mặt kiến thức của bài:
Các toán tử so sánh trong JavaScript
Kiểu dữ liệu số và chuỗi trong JavaScript
Và về phần nội dung….
Đặt vấn đề: đúng / sai, true / false
Kiểu dữ liệu boolean trong JavaScript
Liên hệ giữa boolean và các toán tử so sánh
Các toán tử quan hệ trong JavaScript"
116,Kiểu dữ liệu Boolean trong JavaScript,Đặt vấn đề,"Trong cuộc sống, trong nhiều trường hợp, ta sẽ phải xét tính đúng – sai của một sự việc nào đó.
Từ cách đánh giá của chúng ta mà sự việc đó sẽ được xem là đúng hay là sai.
JavaScript cũng vậy, nó có một hệ thống giúp đánh giá xem một giá trị có thể là
true
(đúng) hay
false
(sai).
Các giá trị true/false trong JavaScript đều thuộc kiểu dữ liệu boolean"
117,Kiểu dữ liệu Boolean trong JavaScript,Kiểu dữ liệu boolean trong Js,"Kiểu dữ liệu boolean
chỉ bao gồm 2 giá trị (
true
và
false
). Nó biểu thị mọi thứ bằng một trong 2 giá trị: true/false.
Để biểu diễn một giá trị nào đó theo kiểu boolean, ta có cú pháp sau:
Boolean(
<value>
)
Ví dụ:
Javascript:
Kiểu dữ liệu Boolean trong JavaScript
2
|3

Boolean(1)
// true
Boolean(0)
// false
Boolean('')
// false
Boolean(' ')
// true
Boolean()
// false
Boolean('abc')
// True
Lưu ý:
Các trường hợp mà khi chuyển thành bool mang giá trị
true
Một số khác 0 (khác -0)
Một chuỗi không rỗng (có ít nhất một ký tự)
Giá trị true (Boolean(true) = true)
Một object (một khái niệm mà
Kteam
sẽ chuyển đến các bạn ở các bài sau)
Ngoài ra, đối với các giá trị
null
và
undefined
, khi chuyển thành boolean sẽ bằng
false
.
Các giá trị khi chuyển về boolean mà bằng
true
, thì ta gọi là
truthy
, và
falsy
tương ứng với
false
.
Khi chuyển từ boolean sang
number
, ta sẽ nhận được các giá trị tương ứng:
1 = true
,
0 = false
.
Javascript:
Number(false)
// 0
Number(true)
// 1"
118,Kiểu dữ liệu Boolean trong JavaScript,Liên hệ giữa kiểu dữ liệu boolean và các toán tử so sánh,"Các bạn còn nhớ phần “
Các phép so sánh trong JS
” ở bài 4 chứ ? Kết quả so sánh giữa 2 giá trị sẽ luôn trả về true hoặc false. Và nó cũng được tính
là kiểu
boolean
.
Javascript:
14 == 13 // Kiểm tra xem 2 giá trị có bằng nhau hay không
// false
14 === ‘14’ // Kiểm tra xem 2 giá trị có bằng nhau và có cùng kiểu hay không
// false
5 != 6 // Kiểm tra xem 2 giá trị có khác nhau hay không
// true
12 < 20; // Kiểm tra xem số thứ nhất có bé hơn số thứ 2 hay không
// true"
119,Kiểu dữ liệu Boolean trong JavaScript,Các toán tử quan hệ,"Các toán tử quan hệ được dùng trong trường hợp có nhiều điều kiện phải được xét cùng lúc. Ví dụ:
Yêu cầu biến a lớn hơn biến d, và biến c nhỏ hơn biến b
Yêu cầu biến t nhỏ hơn biến a, hoặc biến t nhỏ hơn biến f
etc
Trong Js, có các toán tử quan hệ sau:
Kiểu dữ liệu Boolean trong JavaScript
3
|3

Toán tử
AND
(ký hiệu:
&&):
Trả về true nếu tất cả các điều kiện được xét đều là true, trả về false trong các trường hợp khác
Toán tử
OR
(ký hiệu:
||
): Trả về true nếu một trong các điều kiện đang xét là true, trả về false khi và chỉ khi tất cả các điều kiện đang xét đều
false.
Toán tử
NOT
(ký hiệu:
!
): Trả về false nếu điều kiện được xét là true và ngược lại.
Ví dụ:
Javascript:
4 > 3 && 7 > 6
// true
4 > 3 && 7 <= 6
// false
4 > 3 || -1 > 1
// true
4 < 3 || -1 > 1
// false
!(12 > 1)
// false
!(12 > 21)
// true"
120,Kiểu dữ liệu Boolean trong JavaScript,Kết luận,"Qua bài này, các bạn đã biết thêm về kiểu dữ liệu boolean trong Js
Bài sau, Kteam sẽ đề cập đến một kiểu dữ liệu khác:
Symbol trong Js

”."
121,Kiểu dữ liệu chuỗi trong JavaScript,kiểu dữ liệu chuỗi trong Js,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
"
122,Kiểu dữ liệu chuỗi trong JavaScript,Dẫn nhập,"Ở các bài trước, chúng ta đã cùng tìm hiểu về
kiểu dữ liệu số trong Javascript
và thực hiện
bài tập về kiểu dữ liệu này
.
Trong bài này sẽ giới thiệu cho các bạn về một kiểu dữ liệu khác đó là
Kiểu dữ liệu chuỗi trong Javascript  - Khái quát về kiểu dữ liệu chuỗi"
123,Kiểu dữ liệu chuỗi trong JavaScript,Nội dung,"Mời các bạn xem qua các yêu cầu về kiến thức trước khi tìm hiểu bài này:
Biến trong Javascript
Cài đặt sẵn môi trường nodejs
Nội dung của bài bao gồm:
Chuỗi là gì ? Đặc điểm của một chuỗi.
Escape character trong Javascript
Các toán tử cơ bản đối với chuỗi trong Javascript"
124,Kiểu dữ liệu chuỗi trong JavaScript,Chuỗi là gì ?,"Chuỗi, hiểu đơn giản, là tất cả những gì được đặt trong cặp
‘’
,
“”
hoặc
``
.
Chuỗi giúp biểu thị các kí tự, văn bản trong Javascript
Ví dụ:
Javascript:
var s1 = ‘abc’; // Chuỗi s1 có giá trị là ‘abc’
var s2 = “123”; // Chuỗi s2 có giá trị là “123”
Khởi tạo một chuỗi trong Js
Để khởi tạo một chuỗi, có 3 cách chính:
Cách 1:
Sử dụng
constructor String
Cú pháp:
String(
<value>
)
Trong đó,
<value>
là một giá trị hợp lệ bất kì
Giá trị trả về chính là một chuỗi tương ứng với giá trị đầu vào.
Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
2
|6

Cách 2:
Sử dụng phương thức toString cho giá trị tương ứng
Cú pháp:
<value>
.toString()
Trong đó,
<value>
cũng tương tự như trên, chính là giá trị mà chúng ta muốn
convert
sang
string
. Tuy nhiên, đối với việc chuyển từ số sang
chuỗi, thì ta buộc phải dùng tên biến thay cho giá trị, cụ thể:
Javascript:
5.toString()
// 5.toString()
^^
// Uncaught SyntaxError: Invalid or unexpected token
a = 5
// 5
a.toString()
// '5'
Cách 3:
Đặt các giá trị trong cặp dấu
nháy
(``, ‘’ hoặc “”)
Cách này là cách đơn giản nhất và dễ thực hiện nhất trong 3 cách. Nó sẽ chuyển toàn bộ những gì được đặt trong cặp dấu nháy thành 1 string
duy nhất
Dưới đây là ví dụ cho cả 3 cách:
Javascript:
a = 5
// 5
b = '12'
// '12'
c = [1, 2]
// [ 1, 2 ]
a.toString()
// '5'
b.toString()
// '12'
String(c)
// '1,2'
String(a)
// '5'
str = 'khanhdeptrai!'
// 'khanhdeptrai!'
Vị trí của các kí tự trong chuỗi
Để thuận tiện trong việc thao tác với chuỗi, thì các kí tự trong chuỗi sẽ được đánh số thứ tự, từ trái sang phải, với kí tự đầu tiên có vị trí là 0. Lấy ví
dụ với chuỗi “howKteam”:
Vị trí
h
o
w
K
t
e
a
m
Kí tự
0
1
2
3
4
5
6
7
Ta có thể lấy ra kí tự trong một chuỗi dựa vào vị trí của nó.
Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
3
|6

Ví dụ:
Javascript:
var a = 'howKteam';
// undefined
a[4]
// 't'
a[3]
// 'K'
Lưu ý
:
ta không thể thay đổi chuỗi bằng cách thực hiện phép gán.
Javascript:
a = 'howKteam'
// 'howKteam'
a[2] = 't'
// 't'
a
// 'howKteam'
Độ dài của chuỗi
Ta dùng thuộc tính
length
để hiển thị độ dài của một chuỗi.
Javascript:
var str = 'Hello world';
// undefined
str.length
// 11
Tiếp theo, mời các bạn xem xét ví dụ sau:
Javascript:
a = 'I'm Beginner'
// a = 'I'm Beginner'
^
// Uncaught SyntaxError: Unexpected identifier
Tại sao chương trình báo lỗi?
Hiểu một cách đơn giản, là trong câu lệnh đó đã có một phần bị thừa ra.
Sau khi ta dùng dấu ‘ lần đầu tiên, thì đó là việc xác định một chuỗi.
Đến dấu ‘ lần thứ 2, thì đó là việc kết thúc một chuỗi (trong ví dụ, thì chuỗi chỉ bao gồm một chữ “I”)
Và tất nhiên, những nội dung sau đó đều bị tính là phần dư thừa, gây nên lỗi.
Đặt vấn đề:
Thế nếu ta muốn dùng nhiều các dấu ‘ hoặc “ trong một chuỗi, thì làm như thế nào ?
Cách đầu tiên
: Nếu muốn dùng dấu ‘ trong chuỗi, thì chuỗi đó phải được đặt trong cặp “” và ngược lại.
Một cách khác
là dùng cặp dấu `` (Kteam sẽ đi chi tiết vào nội dung này ở bài sau).
Cách cuối cùng
: mời các bạn đọc phần bên dưới."
125,Kiểu dữ liệu chuỗi trong JavaScript,Escape character trong JavaScript,"Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
4
|6

Khi làm việc với chuỗi trong JavaScript, sẽ có những lúc mà bạn cần đến các
Escape character
. Hiểu một cách đơn giản, escape character là những
kí tự có chức năng phụ trợ cho chuỗi khi ta làm việc với nó. Nó sẽ bao gồm một dấu “\” đứng trước một kí tự.
Ví dụ
với chương trình sau:
Javascript:
var a = 'Welcome\nto HowKteam';
// undefined
console.log(a); // In ra 'Welcome', sau đó xuống dòng và in 'to HowKteam'
// Welcome
// to HowKteam
// undefined
var b = '\tFree education';
// undefined
console.log(b); // In ra 8 kí tự trống, sau đó in 'Free education' (giống như khi ta ấn tab trong lúc gõ văn bản)
//        Free education
// undefined
Dưới đây là bảng liệt kê các escape character hay được sử dụng:
Kí tự
Ý nghĩa
\n
Đưa con trỏ xuống dòng tiếp theo
\t
In ra một horizotal tab (giống khi ta tab lúc gõ văn bản)
\b
Xóa kí tự đứng trước con trỏ (nếu có)
\”
In ra kí tự “
\’
In ra kí tự ‘
\\
In ra kí tự “\”
Lưu ý:
muốn sử dụng escape character, ta phải dùng lệnh
console.log()
(như trong các ví dụ trên)"
126,Kiểu dữ liệu chuỗi trong JavaScript,Các toán tử với chuỗi trong JavaScript,"Toán tử so sánh
Chương trình sẽ so sánh từng cặp kí tự có cùng vị trí trong 2 chuỗi. Nếu độ dài của 2 chuỗi khác nhau, thì khi so sánh đến hết chuỗi ngắn hơn,
chương trình dừng so sánh.
Trường hợp
Thì ta có:
Ví dụ
a = b
Hai chuỗi y hệt nhau
‘aaa’ = ‘aaa’
A ≠ b
Hai chuỗi khác độ dài,
hoặc có ít nhất một kí
tự khác nhau.
‘a’ ≠ ‘ab’
‘a’ ≠ ‘z’
‘1’ ≠ ‘3’
Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
5
|6

A < b
Ở kí tự đầu tiên khác
nhau (có cùng vị trí),
kí tự trong chuỗi a
đứng trước kí tự b
trong bảng mã
Unicode
‘a’ < ‘b’
‘abc’ < ‘z’
‘12’ < ‘2’
A > b (ngược lại với
trường hợp trên)
Toán tử cộng chuỗi trong JavaScript
Toán tử cộng (+) nối hai chuỗi với nhau và trả về một chuỗi mới.
Ví dụ:
Javascript:
var a = ""Welcome to"";
// undefined
var b = ""kquiz"";
// undefined
a + ' ' + b;
// 'Welcome to kquiz'
var t = ""Hello \n"";
// undefined
var f = ""Toan"";
// undefined
var u = t + f;
// undefined
u
// 'Hello \nToan'
console.log(u);
// Hello
// Toan
// undefined
Các toán tử khác
Ngoài toán tử cộng, các toán tử so sánh, mọi toán tử khác trên các chuỗi kí tự có bao gồm chữ cái (hoặc kí tự đặc biệt) đều trả về giá trị
NaN
(đối
với các chuỗi Number-String, ta sẽ tìm hiểu sau).
Ví dụ:
Javascript:
'abc' / 'abc'
// NaN
'one' * 'two'
// NaN
'per' * 3
// NaN
'miss' - 'mi'
// NaN
'3' * '$'
// NaN
Kiểu dữ liệu chuỗi trong JavaScript (Phần 1) - Khái quát về kiểu dữ liệu chuỗi trong Js
6
|6
"
127,Kiểu dữ liệu chuỗi trong JavaScript,Kết luận,"Ở bài này, các bạn đã được tìm hiểu về những kiến thức cơ bản của chuỗi trong Javascript
Qua bài sau, các bạn sẽ được tìm hiểu kĩ hơn về string, cụ thể là
các thuộc tính và các phương thức.

”."
128,Kiểu dữ liệu chuỗi trong JavaScript,"literals trong Js, Mối liên hệ giữa Number-String và Number","Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 2) - Template literals trong Js, Mối liên hệ giữa Number-String và
Number
"
129,Kiểu dữ liệu chuỗi trong JavaScript,Dẫn nhập,"Ở bài trước, Kteam đã giới thiệu cho các bạn về
kiểu dữ liệu chuỗi trong Javascript
Ở bài này, các bạn sẽ được mở rộng hơn kiến thức của mình về chuỗi:
Template literals trong Javascript, Mối liên hệ giữa Number-String và số"
130,Kiểu dữ liệu chuỗi trong JavaScript,Nội dung,"Để nắm chắc kiến thức bài này, bạn cần có:
Kiến thức cơ bản về chuỗi trong Javascript
Các toán tử cơ bản với số trong Javascript
Những nội dung mà Kteam sẽ đề cập đến:
Template literals trong Javascript
Mối liên hệ giữa số và chuỗi trong Javascript"
131,Kiểu dữ liệu chuỗi trong JavaScript,Template literals trong JavaScript,"Ở bài trước, Kteam vẫn còn nợ bạn một câu trả lời, về cách dùng cả dấu
“
và
‘
trong cùng một chuỗi mà không gây lỗi.
Ở bài này, Kteam sẽ “trả bài” cho các bạn. Cụ thể hơn chúng ta cùng đi vào nội dung sau
Template literals
, là một tính năng mới trong
ES6
(JavaScript 2015), Template literals (Còn được gọi là template string) là những chuỗi mà được đặt
trong cặp `` (
backtick
).
Về mặt cơ bản, nó không khác so với những chuỗi thông thường, điều đặc biệt chỉ là việc cho phép sử dụng cả dấu ‘ và “ trong cùng một chuỗi. Đó
là lý do tại sao nó lại có thể được dùng nếu trong chuỗi yêu cầu nhiều các dấu ‘ và “.
Ví dụ:
Javascript:
a = `how'Kteam""`
// `how'Kteam""`
b = `doooooo`
// 'doooooo'
typeof(a)
// 'string'
typeof(b)
// 'string'
Nhưng không có gì sinh ra chỉ để cho có cả. Ngoài những điều cơ bản, nó còn cho phép nhúng một biểu thức, một hàm hay một giá trị nào đó vào
trong một chuỗi:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 2) - Template literals trong Js, Mối liên hệ giữa Number-String và
Number
2
|4

Ví dụ:
Javascript:
a = ""hiii ${1+2}"" // Dùng chuỗi thông thường
// 'hiii ${1+2}'
a = `hiii ${1+2}` // Dùng template string
// 'hiii 3'
a = `hiii ${[1, 2, 3] + 1}` // Mảng + number  string
// 'hiii 1,2,31'
function a() {return 12} // Định nghĩa một hàm
// Undefined
t = `hiii ${a()}` // dùng template string kết hợp hàm
// 'hiii 12'
Bên cạnh đó, việc sử dụng cặp `` còn cho phép bạn khởi tạo một chuỗi trên nhiều dòng. Thoạt tiên, hãy lấy ví dụ với những loại chuỗi thông thường:
Javascript:
a = 'howKteam // nhấn enter
// a = 'howKteam
^^^^^^^^^
// Uncaught SyntaxError: Invalid or unexpected token
a = ""howKteam
// a = ""howKteam
^^^^^^^^^
// Uncaught SyntaxError: Invalid or unexpected token
Một điều có thể thấy rõ ràng là chuỗi thông thường không cho phép việc khởi tạo một chuỗi trên nhiều dòng mà không sử dụng
escape character
.
Tất nhiên, để khởi tạo, đơn giản là thêm
escape character
vào rồi.
Javascript:
a = 'howKteam\nFree education'
// 'howKteam\nFree education'
a
// 'howKteam\nFree education'
console.log(a)
// howKteam
// Free education
// undefined
a = 'howKteam\n' + 'Free education'
// 'howKteam\nFree education'
console.log(a)
// howKteam
// Free education
// undefined
Nhưng, để cho việc khởi tạo được tường minh hơn, thì còn một cách khác để thực hiện, đó là dùng cặp ``:
Javascript:
b = `howKteam
// Free education`
// 'howKteam\nFree education'
console.log(b)
// howKteam
// Free education
// undefined
Kiểu dữ liệu chuỗi trong JavaScript (Phần 2) - Template literals trong Js, Mối liên hệ giữa Number-String và
Number
3
|4

Chắc chắn rồi, giá tri của 2 chuỗi được khởi tạo bằng 2 cách là tương tự nhau:
Javascript:
a == b
// true
a
// 'howKteam\nFree education'
b
// 'howKteam\nFree education'"
132,Kiểu dữ liệu chuỗi trong JavaScript,Mối liên hệ giữa chuỗi và số trong JavaScript,"Như đã quy ước, ta sẽ gọi các chuỗi chỉ gồm các ký tự số là
Number-String
.
Vì Number-String là một chủ đề khá thú vị, cần được tìm hiểu một cách
độc lập.
Đối với Number-String, Javascript sẽ cho phép nó thực hiện các toán tử giống như kiểu dữ liệu số (ngoại trừ
phép
cộng
sẽ nối các chuỗi với nhau):
Ví dụ:
Javascript:
var a = '100';
// undefined
var b = '200';
// undefined
a - b;
// -100
a + b;
// '100200'
a * b;
// 20000
a / b;
// 0.5
a % b;
// 100
Và tất nhiên là các toán tử giữa Number-String và số đều được cho phép:
Javascript:
var a = '100';
// undefined
a == 100;
// True
a === 100; // Trả về false vì ban đầu, a có kiểu là string
// False
a * 100;
// 10000
'10000' / 2.5
// 4000
Lưu ý:
Khi thực hiện cộng một Number-String với một số, thì JS sẽ chuyển toàn bộ các số về dạng chuỗi và sau đó nối với nhau.
Javascript:
12345 + '6789';
// '123456789'
'6789' + 12345
// '678912345'
Kiểu dữ liệu chuỗi trong JavaScript (Phần 2) - Template literals trong Js, Mối liên hệ giữa Number-String và
Number
4
|4

Math
đối với một Number-String:
Javascript:
Math.cbrt(""182"")
// 5.667051108097064
Math.sin(""82"")
// 0.31322878243308516
Math.round(""1.82"")
// 2"
133,Kiểu dữ liệu chuỗi trong JavaScript,Kết luận,"Qua bài này, các bạn đã hiểu rõ hơn về “template literals” và cách sử dụng chuỗi giống như một số trong Js
Bài tiếp theo, chúng ta sẽ cùng tìm hiểu
Các phương thức của chuỗi.

”."
134,Kiểu dữ liệu chuỗi trong JavaScript,thức với chuỗi trong Javascript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 3) - Các phương thức với chuỗi trong Javascript
"
135,Kiểu dữ liệu chuỗi trong JavaScript,Dẫn nhập,"Ở các bài trước, chúng ta đã được tìm hiểu sơ lược về kiểu dữ liệu chuỗi trong Javascript.
Ở bài này, Kteam xin hướng dẫn cho các bạn về
các phương thức đối với chuỗi trong Javascript"
136,Kiểu dữ liệu chuỗi trong JavaScript,Nội dung,"Những nội dung các bạn cần nắm vững trước khi tìm hiểu bài này:
Kiểu dữ liệu chuỗi trong Javascript
Và, ở bài này, chúng ta sẽ được tiếp cận về
Các phương thức đối với chuỗi trong Javascript
Các phương thức xác định
Các phương thức tìm kiếm"
137,Kiểu dữ liệu chuỗi trong JavaScript,Các phương thức đối với chuỗi trong Javascript,"Các phương thức xác định
Phương thức at
Cú pháp:
<String>
.at
(
<index>
)
Tác dụng:
Trả về ký tự nằm ở vị trí
<index>.
Lưu ý:
<index>
có thể là giá trị âm, khi đó các phần tử được đếm ngược từ phải sang trái.
Lấy ví dụ với chuỗi “
howKteam
”:
h
o
w
K
t
e
a
m
Giá trị
dương
0
1
2
3
4
5
6
7
Giá trị âm
-8
-7
-6
-5
-4
-3
-2
-1
Ví dụ về phương thức at:
Javascript:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 3) - Các phương thức với chuỗi trong Javascript
2
|4

a = ""howKteam""
// 'howKteam'
a.at(3)
// 'K'
a.at(-4)
// 't'
a.at(-1)
// 'm'
a.at(10) // giá trị nằm ngoài phạm vi của chuỗi, trả về undefined
// undefined
a.at(-10) // giá trị nằm ngoài phạm vi của chuỗi, trả về undefined
// undefined
Phương thức includes
Cú pháp:
<String>
.includes(
<searchString>
,
<position>
)
Tác dụng:
Giúp xác định xem
<searchString>
có nằm trong
<String>
(từ
<position>
đến cuối chuỗi) hay không.
Các tham số trong phương thức:
<searchString>
:
là chuỗi được sử dụng để xác định, trả về
true
nếu được tìm thấy trong
<String>
, ngược lại trả về
false
.
<position>
:
Phương thức sẽ tìm kiếm từ vị trí
<position>
đến cuối chuỗi. Giá trị mặc định của nó là
0
.
Ví dụ:
Javascript:
a = ""howKteam""
// 'howKteam'
a.includes(""Kteam"") // trong chuỗi a có “Kteam”
// true
a.includes(""Kteam"", 5) // từ a[5] đến cuối chuỗi, không xuất hiện “Kteam” (phạm vi tìm kiếm: “team”
// false
a.includes(""how"", 1)
// false
a.includes(""howK"")
// true
Phương thức startsWith
Cú pháp:
<String>
.startsWith(
<searchString>
,
<position>
)
Tác dụng:
Xác định xem
<String>
(vị trí từ
position
đến cuối chuỗi) có được bắt đầu bằng
<searchString>
hay không.
Trong đó:
<searchString>
: là chuỗi được sử dụng để xác định, trả về
true
nếu chuỗi (từ
position
đến cuối chuỗi) được bắt đầu bằng
<searchString>
<position>
: Là vị trí bắt đầu thực hiện xác định, mặc định bằng
0
.
Ví dụ:
Javascript:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 3) - Các phương thức với chuỗi trong Javascript
3
|4

a = 'howKteam'
// 'howKteam'
a.startsWith('how')
// true
a.startsWith('Kteam', 3) // từ vị trí thứ 3 đến cuối chuỗi: “Kteam”, được bắt đầu bằng “Kteam”
// true
a.startsWith('Kt')
// False
a.startsWith('te', 4) // từ vị trí thứ 4 đến cuối chuỗi: “team”, được bắt đầu bằng “te”
// true
Phương thức endsWith
Cú pháp:
<String>
.endsWith(
<searchString>
,
<length>
)
Tác dụng:
Xác định xem
<String>
có được kết thúc bằng
<searchString>
hay không.
Cách thức hoạt động gần giống với
startsWith
:
<searchString>
: là chuỗi được sử dụng để xác định, trả về
true
nếu chuỗi (bao gồm
length
kí tự đầu tiên của chuỗi) được kết thúc bằng
<searchString>
<searchString>
: Là phạm vi xác định, cụ thể là lấy
<length>
ký tự đầu tiên của chuỗi. Giá trị mặc định là độ dài của chuỗi (
str.length
)
Ví dụ:
Javascript:
a = 'howKteam'
// 'howKteam'
a.endsWith(""te"", 6)
// true
a.endsWith(""am"")
// true
a.endsWith(""eam"")
// true
a.startsWith('ow')
// false
a.endsWith('ea')
// false
Các phương thức tìm kiếm
Phương thức indexOf
Cú pháp:
<String>
.indexOf(
<searchValue>
,
<fromIndex>
)
Tác dụng:
Tìm kiếm và trả về lần xuất hiện đầu tiên của
<searchValue>
trong
<String>
, phạm vi tìm kiếm bắt đầu từ
<fromIndex>
.
Các tham số:
<searchValue>
: Là chuỗi cần tìm kiếm.
<fromIndex>
: Là số nguyên, là giá trị bắt đầu cho việc tìm kiếm (hoạt động tìm kiếm được diễn ra từ
<fromIndex>
đến cuối
<String>
)
Giá trị trả về:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 3) - Các phương thức với chuỗi trong Javascript
4
|4

Nếu tìm thấy, trả về vị trí đầu tiên mà
<searchValue>
được tìm thấy. Nếu không tìm thấy thì trả về
-1
Nếu
<searchValue>
không được đưa vào, hoặc
<fromIndex>
lớn hơn
<String>.length
, trả về
-1
Ví dụ:
Javascript:
a = 'howKteam'
// 'howKteam'
a.indexOf(""Kteam"")
// 3
a.indexOf(""Kteam"", 3) // câu lệnh này và câu lệnh trên trả về cùng một giá trị, vì trong phạm vi tìm kiếm đều chứa “Kteam”
// 3
a.indexOf(""Kteam"", 4)
// -1
a.indexOf(""Kteam"", 100)
// -1
a.indexOf(100)
// -1
Phương thức lastIndexOf
Cú pháp:
<String>
.lastIndexOf(
<searchValue>
,
<fromIndex>
)
Tác dụng:
Gần giống như
indexOf
, nhưng lại tìm kiếm ở cuối chuỗi
<String>
. Cụ thể:
<searchValue>
giống như
indexOf
<fromIndex>
: là một số nguyên, chỉ định việc tìm kiếm sẽ diễn ra trong đoạn
[0..<String>.length - fromIndex]
của
<String>
. Giá trị mặc
định là
Infinity
(có thể hiểu, theo mặc định, thì việc tìm kiếm sẽ diễn ra trên toàn bộ chuỗi). Nếu
<fromIndex>
lớn hơn
<String>.length
,
toàn bộ chuỗi được dùng để tìm kiếm)
Ví dụ:
Javascript:
a = 'howKteam'
// 'howKteam'
a.lastIndexOf(""Kt"")
// 3
a.lastIndexOf(""Kt"", 3) // tìm kiếm trong đoạn [0..4] (7 – 3 = 4)
// 3
a.lastIndexOf(""ho"", 5)
// 0"
138,Kiểu dữ liệu chuỗi trong JavaScript,Kết luận,"Ở bài này, chúng ta đã tìm hiểu về các phương thức xác định + các phương thức tìm kiếm của chuỗi.
Bài tiếp theo, Kteam sẽ tiếp tục với chủ đề về
phương thức của chuỗi trong Javascript.
.
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
139,Kiểu dữ liệu chuỗi trong JavaScript,thức với chuỗi trong Javascript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
"
140,Kiểu dữ liệu chuỗi trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về các phương thức với chuỗi trong Javascript
Ở bài này, chúng ta sẽ tiếp tục tìm hiểu về chủ đề đó."
141,Kiểu dữ liệu chuỗi trong JavaScript,Nội dung,"Những thứ mà bạn cần nắm được trước khi tìm hiểu bài này:
Kiểu dữ liệu chuỗi trong Javascript
Ở bài này, chúng ta sẽ có 3 nội dung chính
Các phương thức với chuỗi trong Javascript
Các phương thức biến đổi
Các phương thức tiện ích
Các phương thức phân tách"
142,Kiểu dữ liệu chuỗi trong JavaScript,Các phương thức biến đổi,"Phương thức toUpperCase
Cú pháp:
<String>
.toUpperCase()
Tác dụng:
Dùng để chuyển một chuỗi sang dạng viết hoa
Ví dụ:
Javascript:
var a = 'hello world'
// undefined
a.toUpperCase();
// 'HELLO WORLD'
a.charAt(3).toUpperCase();
// 'L'
Phương thức toLowerCase
Cú pháp:
<String>
.toLowerCase()
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
2
|7

Tác dụng:
Dùng để chuyển một chuỗi về dạng viết thường.
Ví dụ:
Python:
var a = 'HELLO WORLD';
// undefined
a.toLowerCase();
// 'hello world'
a.charAt(7).toLowerCase();
// 'o'
Phương thức repeat
Cú pháp:
<String>
.repeat(
<times>
)
Tác dụng:
Nó cho phép lặp lại chuỗi
<String>
<times>
lần. Cho kết quả tương tự khi ta cộng một chuỗi vào chính nó
<times>
lần.
Ví dụ:
Javascript:
var a = 'hi ';
// undefined
a.repeat(4);
// 'hi hi hi hi '
a.repeat(2);
// 'hi hi '
a + a + a + a; // nối chuỗi a vào nhau 4 lần
// 'hi hi hi hi '
Phương thức padStart
Cú pháp:
<String>
.padStart(
<length>
,
<padString>
);
Tác dụng:
Chèn các chuỗi
<padString>
vào đầu chuỗi
<String>
ban đầu sao cho
<String>
ban đầu có độ dài bằng
<length>
. Trong trường hợp
<length>
nhỏ hơn hoặc bằng độ dài của
<String>
, phương thức này không được thực hiện.
Ví dụ:
Javascript:
var a = 'x';
// undefined
a.padStart(5, '.');
// '....x'
a = 'iiiii';
// 'iiiii'
a.padStart(6, '.');
// '.iiiii'
a.padStart(4, '.');
// 'iiiii'
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
3
|7

Phương thức padEnd
Cú pháp:
<String>
.padEnd(
<length>
,
<padString>
)
Tác dụng:
Chèn các chuỗi
<padString>
vào cuối chuỗi
<String>
ban đầu sao cho
<String>
ban đầu có độ dài bằng
<length>
. Trong trường hợp
<length>
nhỏ hơn hoặc bằng độ dài của
<String>
, phương thức này không được thực hiện.
Ví dụ:
Javascript:
var a = 'x';
// undefined
a.padEnd(5, '.');
// 'x....'
a = 'iiiii';
// 'iiiii'
a.padEnd(6, '.');
// 'iiiii.'
a.padEnd(5, '.');
// 'iiiii'
Phương thức trim
Cú pháp:
<String>
.trim()
Tác dụng:
Dùng để xóa các khoảng trắng thừa ở đầu và cuối chuỗi.
Lưu ý:
Nếu chỉ muốn xóa ở đầu chuỗi, ta dùng
trimStart
, còn nếu chỉ muốn xóa ở cuối, ta dùng
trimEnd
Ví dụ:
Javascript:
a = '      t      ';
// '      t      '
a.trim()
// 't'
a.trimEnd()
// '      t'
a.trimStart()
// 't"
143,Kiểu dữ liệu chuỗi trong JavaScript,Các phương thức tiện ích,"Phương thức split
Cú pháp:
<String>
.split(
<seperator>
,
<limit>
)
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
4
|7

Tác dụng:
Giúp phân tách một chuỗi thành nhiều phần (các phần phân tách nhau bằng một chuỗi
<seperator>
) và các phần đó được lưu vào một
object
(ta sẽ tìm hiểu kĩ hơn về object trong các bài sau). Object này có thể được hiểu là một mảng.
Bên cạnh đó,
<limit>
quy định số phần tử tối đa của mảng chứa các phần tử. Khi số phần tử trong mảng bằng
<limit>
, phương thức dừng hoạt
động.
Ví dụ:
Javascript:
var a = 'a s d f g h j';
// 'a s d f g h j'
t = a.split(' '); // tách các ký tự bằng khoảng trắng (ký tự ‘ ‘)
// [
'a', 's', 'd',
'f', 'g', 'h',
'j'
]
t
// [
'a', 's', 'd',
'f', 'g', 'h',
'j'
]
var t = 'hello world';
// undefined
t.split('o');
// [ 'hell', ' w', 'rld' ]
str = 'we are kteam'
// 'we are kteam'
str.split(' ', 2)
// [ 'we', 'are' ]
str.split(' ', 1)
// [ 'we' ]
Phương thức replace
Cú pháp:
<String>
.replace(
<substr>
,
<newSubstr>
)
Tác dụng:
dùng để thay thế các thành phần trong một chuỗi bằng một thành phần khác. Phương thức này sẽ trả về một chuỗi mới.
Trong cú pháp:
<substr>
là chuỗi cần được thay thế.
<newSubstr>
là chuỗi được dùng để thay thế cho
<substr>
ở bên trong
<String>
Ví dụ:
Javascript:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
5
|7

a = 'howKteam'
// 'howKteam'
b = a.replace(""how"", ""Kter"")
// 'KterKteam'
b
// 'KterKteam'
c = a.replace(""Kteam"", ""Kquizz"")
// 'howKquizz'
c
// 'howKquizz'
a
Mở rộng:
Ngoài cú pháp cơ bản nhất mà Kteam đã đề cập bên trên, phương thức replace còn 3 cú pháp khác (dùng trong 3 trường hợp khác
nhau):
1. replace(regexp, newSubstr)
2. replace(regexp, replacerFunction)
3. replace(substr, replacerFunction)
Ở bên trên, ta có thể thấy: 2 cú pháp đầu tiên có liên quan đến việc sử dụng
regexp
(biểu thức chính quy), còn cú pháp thứ 3 liên quan đến một
khái niệm mới được gọi là hàm. Trong các bài sau, Kteam sẽ nói rõ hơn đến việc sử dụng regexp, tuy nhiên không đi sâu vào các khái niệm trên."
144,Kiểu dữ liệu chuỗi trong JavaScript,Các phương thức phân tách,"Các phương thức này được dùng để tách các chuỗi thành các phần nhỏ hơn.
Lưu ý:
Các phương thức phân tách không thay đổi chuỗi ban đầu, mà trả về một chuỗi mới.
Phương thức slice
Cú pháp:
<String>
.slice(
<start>
,
<end>
)
Giải thích:
chương trình sẽ lấy các ký tự có chỉ số từ
<start>
đến
<end>
-1. Trong trường hợp ta chỉ đặt
<start>
, chương trình sẽ lấy các ký tự từ
<start>
cho đến hết chuỗi. Còn nếu không có cả
<start>
và
<end>
, thì phương thức này trả về một bản sao của chuỗi.
Ví dụ:
Javascript:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
6
|7

var str = ""abcdef"";
// undefined
var slice = str.slice(2, 5);
// undefined
slice
// 'cde'
var unstart = str.slice(1);
// undefined
unstart
// 'bcdef'
var t = str.slice(-4);
// 'cdef'
t
// ‘cdef’
t = str.slice();
// 'howKteam.com'
t
// 'howKteam.com'
Phương thức substring
Cũng tương tự như slice, phương thức
substring
giúp ta phân tách một phần của chuỗi. Tuy nhiên, substring
không chấp nhận các tham số âm
.
Cú pháp:
<String>
.substring(
<start>
,
<end>
)
Ví dụ:
Javascript:
var str = 'howKteam.com';
// undefined
var substring = str.substring(3, 9);
// undefined
substring
// 'Kteam.'
substring = str.substring();
// 'howKteam.com'
substring
// 'howKteam.com'
Phương thức substr
Cú pháp:
<String>
.substr(
<start>
,
<
length
>
)
Giải thích:
Chương trình sẽ lấy chính xác
<
length
>
ký tự kể từ ký tự thứ
<start>
trong chuỗi. Nếu ta không chỉ định
<
length
>
, hoặc số ký tự từ
<start>
đến cuối chuỗi nhỏ hơn
<
length
>
, chương trình sẽ lấy từ
<start>
cho đến hết chuỗi. Còn nếu ta không chỉ định cả
<start>
và
<
length
>
,
phương thức trả về một bản sao của chuỗi.
Ví dụ:
Javascript:
Kiểu dữ liệu chuỗi trong JavaScript (Phần 4) - Các phương thức với chuỗi trong Javascript
7
|7

var str = 'HowKteam'
// undefined
str.substr(2, 5);
// 'wKtea'
str.substr(2);
// 'wKteam'
str.substr();
// 'HowKteam'
str.substr(-3);
// 'eam'
str.substr(-10, 2);
// 'Ho'"
145,Kiểu dữ liệu chuỗi trong JavaScript,Kết luận,"Qua bài này, các bạn đã hoàn thiện hơn những kiến thức của bản thân về chuỗi
Ở bài tiếp theo, Kteam sẽ giới thiệu đến các bạn một kiểu dữ liệu mới:
boolean
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
146,Kiểu dữ liệu Map trong JavaScript,Bài: Kiểu dữ liệu Map trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu Map trong JavaScript
"
147,Kiểu dữ liệu Map trong JavaScript,Dẫn nhập,"Ở bài trước, Kteam đã giới thiệu đến các bạn một cấu trúc dữ liệu khá đặc biệt và cùng làm qua một số bài tập về
set
.
Trong bài này, các bạn sẽ được tìm hiểu về một cấu trúc dữ liệu khác, đó là
map
."
148,Kiểu dữ liệu Map trong JavaScript,Nội dung,"Những nội dung trong bài học lần này, là:
Đặt vấn đề
Kiểu dữ liệu map trong JavaScript
Các phương thức đối với map
WeakMap trong JavaScript"
149,Kiểu dữ liệu Map trong JavaScript,Đặt vấn đề,"Có bao giờ các bạn sử dụng Google map chưa ? Nó là một công cụ giúp chúng ta tìm kiếm trên bản đồ.
Bây giờ, Toàn muốn ghi lại vị trí của quán trà đá, tiệm tạp hóa, công ty,…, tất tần tật về những nơi mà mình hay ghé qua. Toàn bắt đầu như sau:
Quán trà đá abc – Đường X, huyện Y, Tỉnh Z
Tiệm tạp hóa xyz – Đường T, huyện Y, Tỉnh Z …
Các bạn có để ý thấy điểm chung giữa 2 (các) ghi chú của Toàn ở trên hay không ?
Có một điểm chung dễ thấy nhất, đó chính là với mỗi địa chỉ, Toàn đều ghi lại 2 yếu tố: là Tên của tạp hóa, quán trà đá, … và địa chỉ tương ứng của
chúng."
150,Kiểu dữ liệu Map trong JavaScript,Kiểu dữ liệu map trong JavaScript,"Liên hệ một chút nào: mỗi cặp giá trị (tên + địa chỉ) như trên, trong lập trình ta gọi là cặp
khóa – giá trị
(key – value).
Và những cặp
key-value
này có thể được lưu trữ trong một loại cấu trúc dữ liệu, đó là
map
. Hiểu một cách đơn giản,
map
chính là cuốn sổ mà Toàn
dùng để ghi lại vị trí như trong ví dụ trên.
Khởi tạo một map
Cú pháp:
new Map(
<iterable>
)
Tham số
<iterable>
là không bắt buộc, nó có thể không được truyền vào. Trong trường hợp này, nó tạo ra một map rỗng.
Nếu có mặt tham số
<iterable>
, thì mỗi phần tử của
<iterable>
này phải là một cặp
key-value
.
Ví dụ:
Kiểu dữ liệu Map trong JavaScript
2
|7

Javascript:
map = new Map()
// Map(0) {}
map2 = new Map([[1, 'Js'], [2, 'how'], ['3', 'Kteam']])
// Map(3) { 1 => 'Js', 2 => 'how', '3' => 'Kteam' }
map2 = new Map('abc')
// Uncaught TypeError: Iterator value a is not an entry object
at new Map (<anonymous>)
map2 = new Map(['aa', 'bb', 'cc'])
// Uncaught TypeError: Iterator value aa is not an entry object
at new Map (<anonymous>)
Trích xuất độ dài của map
Để trích xuất độ dài của một map (số các cặp
key-value
trong map), ta dùng cú pháp sau:
<map>
.size
Ví dụ:
Javascript:
map = new Map()
// Map(0) {}
map2 = new Map([[1, 'Js'], [2, 'how'], ['3', 'Kteam']])
// Map(3) { 1 => 'Js', 2 => 'how', '3' => 'Kteam' }
map.size
// 0
map2.size
// 3"
151,Kiểu dữ liệu Map trong JavaScript,Các phương thức với map trong Js,"Phương thức has
Kiểm tra xem liệu trong map có tồn tại một cặp
key-value
có key bằng một giá trị cho trước hay không.
Cú pháp:
<map>
.has(
<key>
)
Nếu trong map có một cặp
khóa – giá trị
mà có khóa bằng với <key>, thì trả về
true
. Ngược lại trả về
false
.
Ví dụ:
Javascript:
map = new Map([['1', 'Kter'], ['2', 'Kquiz'], ['3', 'Js']])
// Map(3) { '1' => 'Kter', '2' => 'Kquiz', '3' => 'Js' }
map.has(1)
// false
map.has('1')
// true
map.has('Kter')
// false
map.has('3')
// True
Kiểu dữ liệu Map trong JavaScript
3
|7

Phương thức get
Phương thức get dùng để lấy về một giá trị trong map. Cụ thể, với một tham số <key> cho trước, nếu trong map có một cặp khóa – giá trị mà khóa
bằng <key>, thì nó trả về giá trị của cặp đó. Nếu không có cặp khóa – giá trị nào thỏa mãn, phương thức get trả
về
undefined
.
Cú pháp:
<map>
.get(
<key>
)
Ví dụ:
Javascript:
numbers = new Map([['1', 'one'], ['2', 'two'], ['3', 'three']])
// Map(3) { '1' => 'one', '2' => 'two', '3' => 'three' }
numbers.get(1)
// undefined
numbers.get('1')
// 'one'
numbers.get('2')
// 'two'
numbers.get('one')
// undefined
Phương thức set
Cú pháp:
<map>
.set(
<key>
,
<value>
)
Tác dụng:
thêm một cặp key-value vào trong
<map>
nếu chưa có sẵn. Nếu trong
<map>
đã có sẵn một cặp giá trị với key bằng
<key>
, thì cập
nhật giá trị của cặp đó.
Giá trị trả về là map sau khi được cập nhật.
Trong đó:
<key>
: là khóa của cặp key-value.
<value>
: là giá trị của cặp key-value.
Ví dụ:
Javascript:
map = new Map()
// Map(0) {}
map.set('kt', 'learn')
// Map(1) { 'kt' => 'learn' }
map.set('howKteam', 2016)
// Map(2) { 'kt' => 'learn', 'howKteam' => 2016 }
map.set('kt', 'Js')
// Map(2) { 'kt' => 'Js', 'howKteam' => 2016 }
map.set('howKteam', '2022')
// Map(2) { 'kt' => 'Js', 'howKteam' => '2022' }
Phương thức delete
Kiểu dữ liệu Map trong JavaScript
4
|7

Xóa bỏ một cặp
key-value
của map.
Cú pháp:
<map>
.delete(
<key>
)
Nếu trong
<map>
có một cặp khóa – giá trị với khóa bằng
<key>
, loại bỏ cặp đó ra khỏi
<map>
và trả về
true
. Nếu trong
<map>
không có bất kì
cặp nào thỏa mãn, thì trả về
false
.
Ví dụ:
Javascript:
map = new Map([['Js', 'howKteam'], ['ntt', 'noob']])
// Map(2) { 'Js' => 'howKteam', 'ntt' => 'noob' }
map.delete(Js)
// Uncaught ReferenceError: Js is not defined
map.delete('Js')
// true
map.delete('ntt')
// true
map
// Map(0) {}
Phương thức clear
Xóa bỏ toàn bộ các cặp
key-value
của map.
Cú pháp:
<map>
.clear()
Ví dụ:
Javascript:
map = new Map()
// Map(0) {}
map.set('ntt', 'Tonf')
// Map(1) { 'ntt' => 'Tonf' }
map.set('Do', 'handsome')
// Map(2) { 'ntt' => 'Tonf', 'Do' => 'handsome' }
map.size
// 2
map.clear()
// undefined
map.size
// 0
Phương thức keys
Cú pháp:
<map>
.keys()
Tác dụng:
trả về một
iterator
, giúp chúng ta duyệt qua các khóa trong
<map>
. Tất nhiên,
iterator
này sử dụng hàm
next()
để tiến hành duyệt.
Cũng giống như hàm
next
trong
generator
, hàm
next
với
keys
cũng trả về 2 giá trị:
value
và
done
.
Kiểu dữ liệu Map trong JavaScript
5
|7

Ví dụ:
Javascript:
map = new Map([[1, 1], [2, 2], [3, 3], [4, 4]])
// Map(4) { 1 => 1, 2 => 2, 3 => 3, 4 => 4 }
iterator = map.keys()
// [Map Iterator] { 1, 2, 3, 4 }
iterator.next()
// { value: 1, done: false }
iterator.next()
// { value: 2, done: false }
iterator.next()
// { value: 3, done: false }
iterator.next()
// { value: 4, done: false }
iterator.next()
// { value: undefined, done: true }
Phương thức values
Cũng tương tự như phương thức keys, nhưng khác ở chỗ là
iterator
trả về sẽ duyệt qua các
value
của cặp
key-value
.
Cú pháp:
<map>
.values()
Ví dụ:
Javascript:
map = new Map([[1, 'one'], [2, 'two'], [3, 'three'], [4, 'four']])
// Map(4) { 1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four' }
iter = map.values()
// [Map Iterator] { 'one', 'two', 'three', 'four' }
iter.next()
// { value: 'one', done: false }
iter.next()
// { value: 'two', done: false }
iter.next()
// { value: 'three', done: false }
iter.next()
// { value: 'four', done: false }
iter.next()
// { value: undefined, done: true }
Phương thức entries
Cú pháp:
<map>
.entries()
Tác dụng:
trả về một
iterator
giúp duyệt qua các cặp
key-value
của map.
Đối với
entries
, khi dùng hàm
next
, thì value sẽ bằng một array chứa khóa và giá trị của cặp mà ta đang duyệt đến.
Ví dụ:
Kiểu dữ liệu Map trong JavaScript
6
|7

Javascript:
map = new Map([[1, 'one'], [2, 'two'], [3, 'three'], [4, 'four']])
// Map(4) { 1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four' }
it = map.entries()
// [Map Entries] {
[ 1, 'one' ],
[ 2, 'two' ],
[ 3, 'three' ],
[ 4, 'four' ]
}
it.next()
// { value: [ 1, 'one' ], done: false }
it.next()
// { value: [ 2, 'two' ], done: false }
it.next()
// { value: [ 3, 'three' ], done: false }
it.next()
// { value: [ 4, 'four' ], done: false }
it.next()
// { value: undefined, done: true }
Phương thức forEach
Chắc Kteam không cần phải giải thích quá nhiều về nó nữa, vì ta đã gặp nó xuyên suốt khóa học này rồi.
Cú pháp:
<map>
.forEach(
<func>
,
<thisArg>
)
Phương thức này sẽ lặp qua các phần tử của
<map>
và với mỗi lần lặp, các giá trị tương ứng sẽ được đưa vào
<func>
.
<func>
là một function, có thể có một, hai hoặc là 3 tham số:
<
value
>: giá trị của cặp key-value đang được duyệt qua
<
value
> và <
key
>: tương ứng với value và key của cặp key-value đang được duyệt
<
value
>, <
key
> và <
map
>: là value và key của cặp key-value đang được duyệt, và <map> ta đang thực hiện forEach.
Ví dụ:
Javascript:
map = new Map([[1, 'one'], [2, 'two'], [3, 'three'], [4, 'four']])
// Map(4) { 1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four' }
map.forEach((value) => console.log(value))
// one
// two
// three
// four
// undefined
map.forEach((value, key, map) => map.set(key, value + ' updated'))
// undefined
map
// Map(4) {
1 => 'one updated',
2 => 'two updated',
3 => 'three updated',
4 => 'four updated'
}
Kiểu dữ liệu Map trong JavaScript
7
|7

Vòng lặp for..of với map
Map là một
iterable
, do đó nên ta có thể thực hiện
for..of
với nó. Giá trị ta có được sau mỗi lần lặp là một array, với phần tử đầu tiên là khóa, còn
phần tử thứ 2 là giá trị của cặp đó.
:
map = new Map([[1, 'one'], [2, 'two'], [3, 'three'], [4, 'four']])
// Map(4) { 1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four' }
for(let i of map) console.log(i)
// [ 1, 'one' ]
// [ 2, 'two' ]
// [ 3, 'three' ]
// [ 4, 'four' ]
// undefined"
152,Kiểu dữ liệu Map trong JavaScript,Kiểu dữ liệu weakMap,"Mở rộng:
kiểu dữ liệu
WeakMap
được xây dựng dựa trên map. Nó gần giống như map, và có một vài đặc điểm khác biệt như sau:
Đối với
weakMap
, các khóa bắt buộc phải là các đối tượng. Còn đối với map, nó có thể là bất kì loại dữ liệu nào.
WeakMap
chỉ có 4 phương thức được hỗ trợ: get, set, has và delete. Trong khi đó, map có cả 6.
WeakMap
không phải là một iterable, do đó ta không thể dùng vòng lặp cho nó, và weakmap cũng không có thuộc tính size.
Tham khảo thêm tại:
WeakMap in JavaScript"
153,Kiểu dữ liệu Map trong JavaScript,Kết luận,"Qua bài này, các bạn đã nắm được kiến thức về kiểu dữ liệu map trong JavaScript.
Chúng ta sẽ cùng nhau củng cố lại kiến thức về map một lần nữa trong bài
Bài tập về Kiểu dữ liệu Map trong JavaScript

”."
154,Kiểu dữ liệu Set trong JavaScript,Bài: Kiểu dữ liệu Set trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu Set trong JavaScript
"
155,Kiểu dữ liệu Set trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
Array(mảng) trong JavaScript
Trong bài này, các bạn sẽ được tìm hiểu về một kiểu dữ liệu mới:
set trong JavaScript"
156,Kiểu dữ liệu Set trong JavaScript,Nội dung,"Những nội dung mà chúng ta sẽ cùng tìm hiểu trong bài này:
Kiểu dữ liệu set trong JavaScript
Các phương thức với set trong JavaScript"
157,Kiểu dữ liệu Set trong JavaScript,Kiểu dữ liệu set trong JavaScript,"Set
là một tập hợp các giá trị, mà trong đó, mỗi giá trị chỉ có thể xuất hiện một lần duy nhất. Các giá trị của 1 set được đặt trong cặp {}, nhưng nó
không phải là cặp
key-value
(object).
Khởi tạo một set
Để khởi tạo một set, ta dùng cú pháp sau:
new
Set(
<iterable>
)
Cụ thể, mỗi phần tử của
<iterable>
sẽ trở thành một phần tử trong
set
. Và tất nhiên, một điều kiện thứ yếu là mỗi giá trị chỉ xuất hiện một lần. Tức
là, sẽ không bao giờ xuất hiện 2 giá trị giống nhau trong 1 set.
Lưu ý:
Bắt buộc phải có từ khóa new. Nếu không có ‘
new’
chương trình sẽ báo lỗi.
Javascript:
s = new Set('howKteam')
// Set(8) { 'h', 'o', 'w', 'K', 't', 'e', 'a', 'm' }
s2 = new Set(['how', 'kteam'])
// Set(2) { 'how', 'kteam' }
Trong trường hợp không có bất kỳ giá trị nào được đưa vào
<iterable>
, thì một set rỗng được khởi tạo.
Javascript:
s3 = new Set()
// Set(0) {}
Kiểm tra số phần tử một set
Để có thể kiểm tra số phần tử của một set, ta dùng cú pháp sau:
Kiểu dữ liệu Set trong JavaScript
2
|7

<set>
.size
Ví dụ:
Javascript:
s = new Set('123')
// Set(3) { '1', '2', '3' }
s.size
// 3
s2 = new Set('Kter')
// Set(4) { 'K', 't', 'e', 'r' }
s2.size
// 4
Khác với
string
và
array
, ta không thể truy xuất một phần tử của set thông qua chỉ mục. Vì đơn giản, cấu trúc của set không cho phép điều đó.
Javascript:
s = new Set(['how', 'Kteam'])
// Set(2) { 'how', 'Kteam' }
s[0]
// undefined
s[1]
// undefined
Mặc dù vậy, ta vẫn có thể sử dụng phép gán để tạo ra các cặp
key-value
cho phần tử của set. Cặp
key-value
này được tính chung là một phần tử.
Bằng cách này, phần tử mới có thể được truy xuất bằng cặp
[]
.
Javascript:
s = new Set(['how', 'Kteam'])
// Set(2) { 'how', 'Kteam' }
s['topic'] = 'Free education'
// 'Free education'
s
// Set(2) { 'how', 'Kteam', topic: 'Free education' }
s['topic']
// 'Free education'
Set là một iterable
Bằng cách sử dụng
for..of
, ta có thể suy ra được việc set là một
<iterable>
.
Ví dụ:
Javascript:
strs = new Set(['how', 'Kteam'])
// Set(2) { 'how', 'Kteam' }
for(let str of strs) console.log(str)
// how
// Kteam
// undefined
Set là một object
Chắc các bạn vẫn còn nhớ, rằng array là một dạng
object
đặc biệt chứ nhỉ ?
Kiểu dữ liệu Set trong JavaScript
3
|7

Javascript:
arr = []
// []
typeof(arr)
// 'object'
Trên thực tế, có nhiều loại object được thiết kế để tạo ra những chức năng đặc biệt, và set cũng là một trong số đó. Về bản chất, set cũng là một
object.
Javascript:
> set = new Set()
Set(0) {}
> typeof(set)
'object'"
158,Kiểu dữ liệu Set trong JavaScript,Các phương thức với set JavaScript,"Phương thức has
Phương thức has giúp xác định xem một phần tử có trong set hay không.
Cú pháp:
<set>
.has(
<value>
)
Phương thức has trả về
true
nếu
<value>
có trong set, ngược lại trả về
false
.
Ví dụ:
Javascript:
s2 = new Set('Kter')
// Set(4) { 'K', 't', 'e', 'r' }
s2.has('a')
// false
s2.has('K')
// true
s2.has('k')
// false
Phương thức add
Cú pháp:
<set>
.add(
<value>
)
Trong đó,
<value>
là giá trị cần thêm vào
<set>
.
Nếu
<value>
không có sẵn, thì nó sẽ được thêm vào
<set>
.
Nếu
<value>
có sẵn, phương thức này không làm gì cả.
Ví dụ:
Javascript:
Kiểu dữ liệu Set trong JavaScript
4
|7

s = new Set('howKteam')
// Set(8) { 'h', 'o', 'w', 'K', 't', 'e', 'a', 'm' }
s.add('123')
// Set(9) { 'h', 'o', 'w', 'K', 't', 'e', 'a', 'm', '123' }
s.add('123')
// Set(9) { 'h', 'o', 'w', 'K', 't', 'e', 'a', 'm', '123' }
s.add('123f')
// Set(10) { 'h', 'o', 'w', 'K', 't', 'e', 'a', 'm', '123', '123f' }
Phương thức delete
Cú pháp:
<set>
.delete(
<value>
)
Giúp xóa một phần tử khỏi
<set>
.
Nếu
<value>
đã có sẵn trong
<set>
, phương thức
delete
trả về true, đồng thời loại bỏ nó khỏi
<set>
.
Nếu
<value>
không có sẵn, phương thức này trả về
false
.
Ví dụ:
Javascript:
s = new Set('Js')
// Set(2) { 'J', 's' }
s.delete('J')
// true
s
// Set(1) { 's' }
s.delete('a')
// false
s
// Set(1) { 's' }
Phương thức clear
Giúp loại bỏ toàn bộ các phần tử của một set.
Cú pháp:
<set>
.clear()
Ví dụ:
Javascript:
s = new Set('123')
// Set(3) { '1', '2', '3' }
s.clear()
// undefined
s
// Set(0) {}
Phương thức forEach
Nếu các bạn còn nhớ về phương thức forEach của array, thì các bạn cũng sẽ dễ dàng nắm bắt được phương thức forEach của set.
Kiểu dữ liệu Set trong JavaScript
5
|7

Cú pháp:
<set>
.forEach(
<func>
,
<thisArg>
)
Đối với
set.forEach
, thì
<func>
có thể xảy ra các trường hợp sau:
Có một tham số duy nhất: <
value1
>: nó sẽ đại diện cho giá trị của phần tử đang được duyệt qua
Có 2 tham số: <
value1
> và <
value2
>: cặp giá trị này đại diện cho cặp key-value của object. Nếu phần tử là cặp key-value thì <value1> = key,
còn <value2> = value. Trong các trường hợp khác, <value1> = <value2>
= giá trị của phần tử.
Có 3 tham số: <
value1
>, <
value2
> và <
set
>: <value1> và <value2>: như trên. Còn <set> đại diện cho đối tượng set mà chúng ta đang duyệt
Ngoài ra,
<func>
có thể là một function được gọi từ bên ngoài, một function được viết trực tiếp hoặc là một arrow function.
Ví dụ:
Javascript:
s = new Set(['how', 'Kteam'])
// Set(2) { 'how', 'Kteam' }
s.forEach(function (a) {console.log(a)})
// how
// Kteam
// undefined
function plus(a) {
console.log(a.repeat(4))
}
// undefined
s.forEach(plus)
// howhowhowhow
// KteamKteamKteamKteam
// undefined
Phương thức entries
Tác dụng
: trả về một trình lặp (
iterator
) được sử dụng trong set.
Cú pháp:
<set>
.entries()
Ví dụ:
Javascript:
Kiểu dữ liệu Set trong JavaScript
6
|7

s = new Set(['how', 'Kteam', 'free', 'edu'])
// Set(4) { 'how', 'Kteam', 'free', 'edu' }
t = s.entries()
// [Set Entries] {
[ 'how', 'how' ],
[ 'Kteam', 'Kteam' ],
[ 'free', 'free' ],
[ 'edu', 'edu' ]
}
t.next()
// { value: [ 'how', 'how' ], done: false }
t.next()
// { value: [ 'Kteam', 'Kteam' ], done: false }
t.next()
// { value: [ 'free', 'free' ], done: false }
t.next()
// { value: [ 'edu', 'edu' ], done: false }
t.next()"
159,Kiểu dữ liệu Set trong JavaScript,Lưu ý khi sử dụng set,"Nó cũng y chang như khi ta làm việc với array thôi. Đơn giản là: đừng bao giờ gán một set này cho một set khác nếu như không có chủ đích. Lí do là
vì chúng sẽ lại cùng trỏ đến một vùng dữ liệu, và cả 2 sẽ cùng bị tác động nếu ta thay đổi một trong hai.
Ví dụ:
Javascript:
set1 = new Set([1, 2, 3])
// Set(3) { 1, 2, 3 }
set2 = set1
// Set(3) { 1, 2, 3 }
Object.is(set1, set2)
// true
set1.add('Kter')
// Set(4) { 1, 2, 3, 'Kter' }
set1
// Set(4) { 1, 2, 3, 'Kter' }
set2
// Set(4) { 1, 2, 3, 'Kter' }
Đây là tính chất chung của kiểu dữ liệu object trong JavaScript. Cụ thể hơn, mời các bạn cùng tìm hiểu bài
Object trong JavaScript"
160,Kiểu dữ liệu Set trong JavaScript,Kiểu dữ liệu weakSet,"Đây là một loại cấu trúc dữ liệu dựa trên set, nhưng nó yếu hơn set rất nhiều và chỉ có thể được sử dụng trong một vài tình huống đặc thù.
Về cơ bản,
weakSet
giúp lưu trữ các giá trị độc lập, với điều kiện các giá trị này phải là object. Điều này làm cho nó yếu hơn set rất nhiều.
Một điều nữa là set chỉ hỗ trợ 3 phương thức: add, delete và has. Nó không cho phép vòng lặp for..of, và do đó, nó không phải là iterable.
Để có thể hiểu hơn về weakSet, mời các bạn tham khảo:
WeakSet in JavaScript"
161,Kiểu dữ liệu Set trong JavaScript,Kết luận,"Kiểu dữ liệu Set trong JavaScript
7
|7

Trong bài này, các bạn đã nắm được về kiểu dữ liệu set trong JavaScript
Trong bài tiếp theo, Kteam sẽ cùng bạn làm qua một số
Bài tập về Kiểu dữ liệu Set trong JavaScript
.
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
162,Kiểu dữ liệu Symbol trong JavaScript,Bài: Kiểu dữ liệu Symbol trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu Symbol trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
163,Kiểu dữ liệu Symbol trong JavaScript,Dẫn nhập,"Ở bài trước, Kteam đã giới thiệu đến các bạn về kiểu dữ liệu boolean trong JavaScript.
Trong bài này, chúng ta sẽ cùng nhau tìm hiểu về một kiểu dữ liệu khác:
symbol"
164,Kiểu dữ liệu Symbol trong JavaScript,Nội dung,"Để nắm được nội dung của bài này, bạn cần có kiến thức về:
Kiểu dữ liệu số trong JavaScript
Kiểu dữ liệu chuỗi trong JavaScript
Những nội dung mà chúng ta sẽ cùng tìm hiểu:
Giới thiệu khái quát về Symbol trong JavaScript, tác dụng của Symbol
Các thuộc tính, phương thức của Symbol"
165,Kiểu dữ liệu Symbol trong JavaScript,Kiểu dữ liệu symbol trong Js,"Nếu bạn dùng google và dịch từ “
symbol
” sang tiếng Việt, thì nó có nghĩa là ký hiệu, hay là vật tượng trưng.
Ở một khía cạnh nào đó, ta cũng có thể hiểu symbol trong JavaScript theo nghĩa tương tự.
Trong JavaScript, symbol là một trong 7 loại kiểu dữ liệu “nguyên thủy” (tiếng Anh:
primitive
). 7 loại này bao gồm số (
number
,
bigint
), chuỗi
(
string
),
boolean
,
undefined
,
symbol
và
null
.
Cấu trúc của symbol:
Một symbol sẽ bao gồm một key được đặt trong cụm từ “symbol”:
symbol(
<key>
)
<key>
có thể là một số, một chuỗi hay bất kì kiểu dữ liệu nào khác, miễn là nó hợp lệ
Khởi tạo một symbol
Để khởi tạo một giá trị kiểu symbol, ta dùng constructor Symbol:
Symbol(
<value>
)
Trong đó:
<value>
có thể có hoặc không. Nhưng nếu có,
<value>
phải là một giá trị hợp lệ, và nó có thể mang bất kỳ kiểu dữ liệu nào. Ở ví dụ bên
dưới có
sử dụng function – một kiến thức mới mẻ. Có thể hiểu đơn giản, là nó chứa 1 đống lệnh bên trong dùng để tái sử dụng.
Kteam
sẽ nói rõ
hơn về function trong các bài tiếp theo.
Kiểu dữ liệu Symbol trong JavaScript
2
|3

Ví dụ:
Javascript:
a = Symbol('a')
// Symbol(a)
b = Symbol('1')
// Symbol(1)
t = Symbol(true)
// Symbol(true)
function f() { return 1;}
// Undefined
Symbol(f)
// Symbol(function f() { return 1;})
Sau khi khởi tạo, các giá trị này đều thuộc kiểu symbol:
Javascript:
typeof(a)
// 'symbol'
typeof(b)
// 'symbol'
typeof(t)
// 'symbol'"
166,Kiểu dữ liệu Symbol trong JavaScript,Đặc điểm của symbol,"Tính độc nhất
Đối với kiểu dữ liệu symbol, thì mỗi giá trị là
độc nhất
trong một chương trình, có nghĩa là,
không thể tồn tại hai giá trị symbol bằng nhau
,
ngoại
trừ trường hợp ta dùng phép
gán
.
Javascript:
a = Symbol()
// Symbol()
b = Symbol()
// Symbol()
a == b
// false
Mời các bạn tiếp tục xem các ví dụ bên dưới:
Javascript:
a = Symbol(123)
// Symbol(123)
b = Symbol(123)
// Symbol(123)
a == b
// false
Javascript:
a = Symbol(true)
// Symbol(true)
b = Symbol(true)
// Symbol(true)
a == b
// false
Kiểu dữ liệu Symbol trong JavaScript
3
|3

Các giá trị symbol khi ép sang các kiểu dữ liệu khác:
Kiểu dữ liệu
tương ứng
Giá trị
Ví dụ
Boolean
True
Boolean(Symbol())
//true
Number
Không thể
chuyển từ symbol
sang number
Number(Symbol(123))
// Uncaught TypeError:
Cannot convert a Symbol
value to a number
at Number (<anonymous>)
String
Chuỗi tương ứng
String(Symbol())
// 'Symbol()'
Array
Một array bao
gồm các symbol
Array(Symbol(123))
// [ Symbol(123) ]
Array(Symbol(123),
Symbol('Kteam'))
// [ Symbol(123),
Symbol(Kteam) ]"
167,Kiểu dữ liệu Symbol trong JavaScript,Sử dụng symbol như là một thuộc tính của object,"Vì tính độc nhất của symbol, nên nó có thể được dùng làm thuộc tính của một object.
Javascript:
sb = Symbol('aa')
// Symbol(aa)
obj = {
Name: ""Kter"",
Age: 18,
[sb]: ""Dodoodo""
}
// { Name: 'Kter', Age: 18, [Symbol(aa)]: 'Dodoodo' }
console.log(obj[sb]);
// Dodoodo
// undefined"
168,Kiểu dữ liệu Symbol trong JavaScript,Kết luận,"Qua bài này, các bạn đã biết về kiểu dữ liệu symbol trong JavaScript
Bài sau, Kteam sẽ cùng bạn củng cố qua
Bài tập kiểu dữ liệu symbol trong JavaScript
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
169,Kiểu dữ liệu số trong JavaScript,Bài: Kiểu dữ liệu số trong JavaScript (Phần 1) - Number,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
170,Kiểu dữ liệu số trong JavaScript,Dẫn nhập,"Ở các bài trước, Kteam đã cùng bạn làm
Bài tập về biến trong JavaScript
Ở bài này, chúng ta sẽ cùng tìm hiểu một thứ mới mẻ hơn, nhưng cũng khá quen thuộc đó là số. Cụ thể là
kiểu dữ liệu số trong JavaScript"
171,Kiểu dữ liệu số trong JavaScript,Nội dung,"Để có thể hiểu được nội dung của bài, bạn cần có:
Hiểu được các kiến thức về
biến trong JavaScript
Có các kiến thức về số học
Ở bài này, chúng ta sẽ cùng tìm hiểu về….
Số trong JavaScript
Các toán tử cơ bản đối với số trong JavaScript
Độ ưu tiên các toán tử (+, - , *, /)
Sự nhầm lẫn khi tính toán với số thực"
172,Kiểu dữ liệu số trong JavaScript,Nhắc lại các kiến thức về số học,"Hàng ngày, chúng ta tiếp xúc rất nhiều với số, ví dụ như: Hôm nay là ngày bao nhiêu? Bạn mua đồ ăn sáng hết bao nhiêu tiền ? Bài kiểm tra vừa rồi
được bao nhiêu điểm ? …. Tất cả đều là những con số.
Với số, ta có thể thực hiện các phép so sánh, cộng, trừ, nhân, chia, và rất nhiều phép tính khác.
Số cũng được chia thành nhiều loại, trong phạm vi bài này Kteam sẽ đề cập đến
số nguyên
và
số thực
."
173,Kiểu dữ liệu số trong JavaScript,Số trong JavaScript,"Các giá trị số trong JavaScript đều thuộc một kiểu dữ liệu duy nhất, bất kể nó là số thực hay số nguyên.
Javascript:
typeof(1.3)
// 'number'
typeof(10)
// 'number'
typeof(10.25)
// 'number'
typeof(0.6)
// 'number'
typeof(0)
// 'number'"
174,Kiểu dữ liệu số trong JavaScript,Các toán tử đối với số trong JavaScript,"Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
2
|6

Các toán tử số học
Trong bài trước, chúng ta đã cùng tìm hiểu về
các toán tử so sánh.
Đối với các toán tử dùng để tính toán, thì nó thực chất cũng giống như các phép tính số học mà ta được học. Các toán tử này lần lượt là
+, -, *, /, %,
**.
Javascript:
3 + 4
// 7
0.2 + 0.3
// 0.5
12 * 3
// 36
8 / 4
// 2
7 / 4
// 1.75
3 - 9
// -6
Dưới đây là một số toán tử cơ bản đối với số trong JavaScript
Kí hiệu trong
JavaScript
Kí hiệu
toán học
Ví dụ
Ghi chú
+
+
3 + 2
// 5
Phép cộng
-
-
1 - 2
// -1
Phép trừ
*
x
2 * 2.5
// 5
Phép nhân
/
÷
10 / 2
// 5
6 / 4
// 1.5
Phép chia
%
MOD
6 % 4
// 2
15  % 4
// 3
Chia lấy dư
**
^
2**3
// 8
4**0.5
// 2
Phép lũy thừa
Bạn cần lưu ý một số điểm sau:
Trong phép chia, nếu đó là phép chia hết thì kết quả trả về là số nguyên, còn nếu không chia hết, thì trả về số thập phân
Đối với phép chia cho số 0, kết quả trả về là
Infinity
hoặc -
Infinity
, phụ thuộc vào dấu của số bị chia
Đối với phép chia lấy dư cho 0, kết quả luôn là
NaN
(Not a Number)
Các phép tính có độ ưu tiên giống như khi ta thực hiện bên toán, riêng phép chia lấy dư được ưu tiên giống với các phép nhân, chia
Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
3
|6

Ngoài ra, nếu muốn thực hiện một phép toán với một biến và gán kết quả cho chính biến đó, ta chỉ cần dùng toán tử tính toán kèm theo toán tử
gán:
Javascript:
> let t = 9;
undefined
> t += 9
18
> t
18
> let g = 12;
undefined
> g *= 2
24
> g
24
Bitwise operator.
Đây là một phần “mở rộng”. Để có thể rõ hơn, các bạn có thể tham khảo tại:
Expressions and operators
Trước khi đến với các
bitwise operator
, thì mình sẽ nói sơ qua về khái niệm hệ nhị phân dành cho những ai chưa biết.
Cụ thể, có nhiều cách biểu thị các giá trị số theo nhiều hệ đếm khác nhau. Ví dụ như:
Hệ thập phân dùng các con số 0..9 để biểu thị các số. Ví dụ: 21, 98, …
Hệ tam phân thì dùng các con số 0..2 để biểu diễn các giá trị, ví dụ: 210, 21.
Hệ thập lục phân thì dùng các số từ 0..9 và các kí tự a, b, c, d, e, f để biểu diễn các số. Ví dụ: 12f, 3c, …
Từ những ví dụ trên, chắc các bạn cũng biết cách mà hệ nhị phân biểu diễn các con số rồi phải không?
Hệ nhị phân dùng 2 số 0 và 1 để biểu diễn các giá trị. Ví dụ: 011, 100, 111, 10101, …
Và, một giá trị số có thể được chuyển qua lại giữa các hệ đếm, ví dụ với số 50:
HỆ ĐẾM
GIÁ TRỊ
Hệ thập phân
50
Hệ nhị phân
0110010
Hệ bát phân
062
Hệ thập lục phân
32
Trong JavaScript, các số được biểu diễn dưới dạng các dãy bit dài 32 kí tự. Do đó, trong JavaScript, thì:
1001 được biểu diễn là 0000..0000(28 số 0)1001.
101 được biểu diễn là 000..00(29 số 0)101.
Đối với các
bitwise operator
, các thao tác sẽ được thực hiện trên các bit (tương tự như hệ nhị phân). Cụ thể, đối với các toán tử
& (AND), | (OR), ^
(XOR),
thì chúng sẽ so sánh từng cặp bit của 2 toán hạng (sau khi đã chuyển toàn bộ về hệ nhị phân), và trả về kết quả tương ứng và thêm vào dãy
kết quả. Cuối cùng, dãy kết quả này lại được chuyển về hệ thập phân.
Công dụng của chúng được thể hiện như sau:
Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
4
|6

TÊN TOÁN TỬ
TÁC DỤNG
& (AND)
Trả về 1 nếu cả 2 bit đều là 1.
| (OR)
Trả về 1 nếu có ít nhất một trong
2 bit bằng 1.
^ (XOR)
Trả về 1 nếu như một trong 2 bit
là 1, và bit còn lại bằng 0.
Còn đối với các toán tử
~(NOT), << (Zero fill left shift), >> (Signed right shift) và >>> (Zero fill right shift),
thì chúng sẽ tác động trực tiếp lên
dãy bit đang được chỉ định và trả về kết quả dưới dạng thập phân.
TÊN TOÁN TỬ
TÁC DỤNG
~ (NOT)
Chuyển các bit trong dãy từ 1 à 0,
và ngược lại (từ 0 à 1)
<<
Dịch trái (loại bỏ một vài bit ở
đầu dãy, và thêm các số 0 vào
cuối dãy sao cho độ dài dãy bằng
với ban đầu)
>>>
Dịch phải (tương tự như dịch trái,
nhưng loại bỏ các bit bên phải và
thêm vào đầu dãy)
Ví dụ:
Javascript:
~2
// -3
12 & 10
// 8
5 | 12
// 13
6 ^ 12
// 10
7 >> 2
// 1
8 >>> 2
// 2
12 << 12
// 49152
Các toán tử một ngôi
JavaScript cũng hỗ trợ các toán tử một ngôi và nó được sử dụng trong trường hợp mà ta muốn thay đổi giá trị của một biến, với các thao tác cộng
thêm một (++) hay trừ đi một (--).
Ví dụ:
Javascript:
Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
5
|6

let t = 1;
// undefined
t++
// 1
t
// 2
++t
// 3
t
// 3
--t
// 2
t
// 2
t--
// 2
t
// 1
Cụ thể:
Toán tử đặt trước biến, sẽ thay đổi giá trị của biến, sau đó mới thực hiện câu lệnh chứa nó
Toán tử đặt sau biến, sẽ thực hiện câu lệnh chứa nó trước, sau đó mới thay đổi giá trị của biến
Javascript:
var t = 5;
// undefined
console.log(t--);
5
// undefined
t
// 4
console.log(++t);
// 5
// undefined
Ngoài ra, đối với JavaScript  ta có thể đặt dấu + trước một giá trị nào đó để chuyển nó thành số, ví dụ:
Javascript:
+'a'
// NaN
+'5'
// 5
+['-1']
// -1
+[1]
// 1
Dấu trừ cũng có thể được sử dụng, nhưng nó sẽ trả về giá trị đối so với khi mà ta dùng dấu +.
Javascript:
-'a'
// NaN
-['1']
// -1
-[1]
// -1
-'5'
// -5
Kiểu dữ liệu số trong JavaScript (Phần 1) - Number
6
|6
"
175,Kiểu dữ liệu số trong JavaScript,Tránh nhầm lẫn khi tính toán với số thực,"Trong quá trình tính toán với các số, có những lúc chúng ta sẽ gặp phải những lỗi như sau:
Javascript:
0.1 + 0.2
// 0.30000000000000004
0.2 – 0.15
// 0.05000000000000002
0.3 * 3
// 0.8999999999999999
Đây là một lỗi rất cơ bản. Nguyên nhân của nó có thể được hiểu như sau: Để lưu trữ các số, máy tính sẽ chuyển các số này về dạng số nhị phân để
tiến hành lưu trữ. Nhưng không phải số nào cũng có thể được biểu diễn một cách chính xác dưới dạng số nhị phân,
và điều này tạo ra sai số (Giống
các trường hợp trên)."
176,Kiểu dữ liệu số trong JavaScript,Kết luận,"Qua bài này, các bạn đã có kiến thức về kiểu dữ liệu số (Number) trong JavaScript
Ở bài sau, Kteam sẽ hướng dẫn cho các bạn về
các thuộc tính của Number cũng như là các phương thức với số trong JavaScript

”."
177,Kiểu dữ liệu số trong JavaScript,phương thức đối với số,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
"
178,Kiểu dữ liệu số trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
Number trong JavaScript
Bài này, Kteam xin giới thiệu đến các bạn
các thuộc tính, constructor và các phương thức của số trong JavaScript"
179,Kiểu dữ liệu số trong JavaScript,Nội dung,"Những yêu cầu về mặt kiến thức:
Có hiểu biết về Number trong JavaScript
Cài đặt sẵn môi trường nodejs
Và nội dung mà chúng ta sẽ cùng tìm hiểu:
Các thuộc tính của Number
Constructor Number
Các phương thức đối với số trong JavaScript"
180,Kiểu dữ liệu số trong JavaScript,Các thuộc tính của kiểu dữ liệu Number,"Kiểu dữ liệu Number cho phép tính toán chính xác nhất với các số trong khoảng
đến
(tức là, với các số lớn hơn, hãy sử dụng
bigint
– một kiểu dữ liệu số khác mà Kteam sẽ giới thiệu tới các bạn ở bài sau)
Các giá trị này lần lượt là
Number_MIN_SAFE_INTEGER
và
Number_MAX_SAFE_INTEGER.
Các bạn có thể chạy code để chứng thực điều đó.
Javascript:
Number.MAX_SAFE_INTEGER
// 9007199254740991
Number.MIN_SAFE_INTEGER
// -9007199254740991
Trong JavaScript, có 2 giá trị đặc trưng cho
dương vô cùng
và âm vô cùng
. Đó lần lượt là
Number.POSITIVE_INFINITY
và
Number.NEGATIVE_INFINITY
. Trong JavaScript , 2 giá trị trên được kí hiệu là
Infinity
và
-Infinity
Javascript:
Number.NEGATIVE_INFINITY
// -Infinity
Number.POSITIVE_INFINITY
// Infinity"
181,Kiểu dữ liệu số trong JavaScript,Constructor Number,"Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
2
|6

Cú pháp
:
Number(
<value>
)
Tác dụng
:
tạo một giá trị kiểu
Number
mới từ
<value>
. Đó có thể là một số, hay là
NaN
Một giá trị Number sẽ được tạo ra nếu
<value>
là Number-String (Quy ước những chuỗi chỉ gồm các kí tự số là
Number-String
), trong các trường
hợp khác là
NaN
.
:
Number(""1223"")
// 1223
Number([1, 2, 3])
// NaN
Number({1: 1, 2:2})
// NaN"
182,Kiểu dữ liệu số trong JavaScript,Các phương thức với số trong JavaScript,"Ở đây Kteam sẽ chỉ đề cập tới những phương thức cơ bản nhất, để các bạn dễ hiểu và cũng dễ nắm bắt trọng tâm hơn.
Các phương thức xác định
Phương thức isNaN
Cú pháp
:
Number.isNaN(
<value>
)
Tác dụng:
Xác định xem
<value>
có phải là
NaN
hay không.
Javascript:
Number.isNaN(Infinity)
// False
Number.isNaN(NaN)
// true
Number.isNaN(Number(""str""))
// true
Phương thức isFinite
Cú pháp:
Number.isFinite(
<value>
)
Tác dụng:
Xác định xem giá trị được truyền có phải là một số hữu hạn hay không.
Nếu
<value>
thuộc một trong 2 giá trị:
Infinity
hoặc -
Infinity
thì trả về
false
. Ngược lại trả về
true
. Riêng đối với NaN, thì phương thức này
trả về
false
.
Ví dụ:
Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
3
|6

Javascript:
Number.isFinite(Infinity)
// false
Number.isFinite(-Infinity)
// false
Number.isFinite(1234)
// true
Number.isFinite(NaN)
// False
Number.isFinite(12)
// true
Phương thức isInteger
Cú pháp:
Number.isInteger(
<value>
)
Tác dụng:
Xác định giá trị được truyền có phải là số nguyên hay không.
Trả về
true
nếu
<value>
là một số nguyên, ngược lại trả về
false
. Đối với
Infinity
và
NaN
, phương thức này cũng trả về
false
.
Ví dụ:
Javascript:
Number.isInteger(123)
// true
Number.isInteger(123.0)
// true
Number.isInteger(123.000001)
// false
Number.isInteger(NaN)
// false
Number.isInteger(Infinity)
// false
Các phương thức định dạng
Phương thức toExponential
Cú pháp:
<Number>
.toExponential(
<fractionDigits>
)
Tác dụng:
Trả về một giá trị chuỗi (Number-String), là số
<Number>
ban đầu được viết dưới dạng thu gọn thành tích của một số thực nhân với lũy thừa
của 10, với
<fractionDigits>
là số lượng chữ số được lấy sau dấu phẩy (trong JavaScript là dấu chấm).
Lưu ý:
giá trị của
<fractionDigits>
phải nằm giữa 0 và 100, giá trị này được mặc định là số chữ số thuộc phần thập phân của
<Number>
Ví dụ:
Javascript:
Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
4
|6

var a = 123.1236574;
// undefined
a.toExponential() // fractionDigits mặc định
// '1.231236574e+2'
a.toExponential(3) // Lấy 3 số sau phần thập phân của a (được làm tròn). Giá trị này tương đương với 1.231*(10^2)
// '1.231e+2'
a.toExponential(5) // Lấy 5 số sau phần thập phân của a (được làm tròn). Giá trị này tương đương với 1.23124*(10^2)
// '1.23124e+2'
Phương thức toFixed
Cú pháp:
<Number>
.toFixed(
<digits>
)
Tác dụng:
Làm tròn số theo
digits
(làm tròn và lấy
<digits>
số ở phần thập phân), giá trị trả về cũng là một
chuỗi
. Theo mặc định, nếu không được
người dùng xác định, thì
<digits>
bằng 0.
Ví dụ:
Javascript:
var a = 123.1236574;
// Undefined
a.toFixed(5)
// '123.12366'
a.toFixed(4)
// '123.1237'
a.toFixed()
// '123'
Phương thức parseFloat
Cú pháp:
Number.parseFloat(
<string>
)
Tác dụng:
Tách và xuất ra một số từ chuỗi
<string>
cho trước. Chương trình sẽ lấy các kí tự từ bên trái sang bên phải của
<string>
,  và lấy nhiều kí tự số
nhất có thể. Nếu không thể lấy được ít nhất một kí tự số, phương thức trả về
NaN
.
Ví dụ:
Javascript:
Number.parseFloat(""12.123tf"") // Lấy 12.123, sau đó dừng vì thấy chữ cái t
// 12.123
Number.parseFloat(""12.1.23tf"") // Lấy 12.1, vì sau đó có dấu chấm (.) (lấy tối đa một dấu chấm)
// 12.1
Number.parseFloat("".12.123tf"") // Tương tự như trên, trước dấu chấm mặc định có số 0
// 0.12
Number.parseFloat(""tf"") // Không lấy được bất kì kí tự số nào
// NaN
Number.parseFloat(""ff1"") // Không lấy được bất kì kí tự số nào
// NaN
Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
5
|6

Phương thức parseInt
Cú pháp:
Number.parseInt(
<string>
,
<radix>
)
Tác dụng:
Phương thức này thực hiện 2 công việc sau:
Phân tích
<string>
giống như cách phân tích của
parseFloat
(nhưng không lấy dấu chấm, tức là chỉ lấy các kí tự số từ trái sang), sau đó
chuyển thành số. Nếu không lấy được bất kì kí tự nào, tự động trả về
NaN
.
Từ số mới được chuyển và hệ cơ số
<radix>
, chuyển về giá trị tương ứng ở hệ thập phân.
Chú ý:
<radix>
nằm trong khoảng 2 ...16.
Ví dụ:
Javascript:
Number.parseInt(""1001"", 2)
// 9
Number.parseInt(""15ff"", 16)
// 5631
Number.parseInt(""15.129"", 10)
// 15
Number.parseInt("".t"", 10)
// NaN
Math object trong JavaScript
Để có thể làm việc một cách hiệu quả hơn với số, Javascript hỗ trợ một
built-in object
(đối tượng dựng sẵn) được gọi là
Math
V
ài thuộc tính của Math:
Math.E
:  Hằng số euler, xấp xỉ 2.718
Math.PI
: Số Pi, xấp xỉ 3.14159
Math.SQRT1_2
: Căn bậc 2 của
, xấp xỉ 0.707.
Javascript:
Math.E
// 2.718281828459045
Math.PI
// 3.141592653589793
Math.SQRT1_2
// 0.7071067811865476
Bên cạnh các thuộc tính cơ bản, Math cũng có các phương thức giúp các bạn đơn giản hóa hơn khi làm việc với toán.
PHƯƠNG THỨC
NỘI DUNG
Math.abs(x)
Trả về
Math.ceil(x)
Trả về số nguyên nhỏ nhất lớn
hơn hoặc bằng x.
Kiểu dữ liệu số trong JavaScript (Phần 2) - Các thuộc tính và phương thức đối với số
6
|6

Math.cbrt(x)
Trả về
Math.max(n1, n2, n3, n4, n5, …)
Trả về số lớn nhất trong một dãy
các số
Math.min(n1, n2, n3, n4, n5, …)
Trả về số bé nhất trong một dãy
các số
Ví dụ:
Javascript:
Math.abs(-1111);
// 1111
Math.ceil(1.23);
// 2
Math.cbrt(8);
// 2
Math.max(-1, 2, 3, -4, 1)
// 3
Math.min(-1, 2, 3, -4, 1)
// -4
Lưu ý:
Math hoạt động với
Number
, không hoạt động với
BigInt
.
Ở trên chỉ là một vài phương thức cơ bản nhất của Math. Để tìm hiểu thêm, các bạn có thể tham khảo tại:
Math in JavaScript"
183,Kiểu dữ liệu số trong JavaScript,Kết luận,"Ở bài này, chúng ta đã cùng tìm hiểu kĩ hơn về số trong Javascript
Ở bài sau, chúng ta sẽ cùng tìm hiểu một kiểu dữ liệu khác:
BigInt
. Tuy là “khác” nhưng nó vẫn là số =))
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
184,Kiểu dữ liệu số trong JavaScript,dữ liệu BigInt,"Xem bài học trên website để ủng hộ Kteam:
Kiểu dữ liệu số trong JavaScript (Phần 3) - Khái quát về kiểu dữ liệu BigInt
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
185,Kiểu dữ liệu số trong JavaScript,Dẫn nhập,"Ở các bài trước, Kteam đã giới thiệu tới các bạn về
Các thuộc tính và phương thức với kiểu dữ liệu Number trong Javascript.
Ở bài này, các bạn sẽ được biết thêm về một kiểu dữ liệu cơ bản khác trong Javascript –
BigInt"
186,Kiểu dữ liệu số trong JavaScript,Nội dung,"Để nắm vững nội dung bài này, các bạn cần có kiến thức về:
Kiểu dữ liệu số (Number) trong Javascript
Nội dung mà chúng ta sẽ được tiếp cận:
Giới thiệu về kiểu dữ liệu BigInt
Các đặc điểm của bigInt"
187,Kiểu dữ liệu số trong JavaScript,Giới thiệu về bigint,"Về cơ bản,
BigInt
cũng tương tự như
number
, đều là số. Nhưng giữa chúng có một sự khác biệt đáng kể.
Khởi tạo một bigint
Có hai cách để khởi tạo
BigInt
Cách 1:
Thêm kí tự “
n
” vào phía sau một số nguyên.
Javascript:
a = 123n
// 123n
b = -1238884n
// -1238884n
c = 1.23n // Lỗi vì BigInt chỉ có thể là các số nguyên
// c = 1.23n
^^^^
// Uncaught SyntaxError: Invalid or unexpected token
Cách 2: Sử dụng
Constructor
bigint
Cú pháp:
BigInt(
<value>
)
Yêu cầu:
Kiểu dữ liệu số trong JavaScript (Phần 3) - Khái quát về kiểu dữ liệu BigInt
2
|3

<value>
phải là một giá trị nguyên, hoặc là một
Number-String
, hay có dạng một chuỗi giá trị hợp lệ.
Ví dụ:
Javascript:
a = BigInt(123)
// 123n
a = BigInt(-123884)
// -123884n
a = BigInt(1.23)
// Uncaught:
RangeError: The number 1.23 cannot be converted to a BigInt because it is not an integer
at BigInt (<anonymous>)
BigInt(""0xf"") // chuyển từ hệ hexa sang bigint
// 15n
typeof(a)
// 'bigint'"
188,Kiểu dữ liệu số trong JavaScript,Đặc điểm của bigint,"Đặc điểm cơ bản nhất của
bigint
là nó cho phép làm việc với các số nguyên mà
không bị giới hạn
về độ lớn. Ngoài ra,
bigint
cũng cho phép thực
hiện hầu hết các toán tử giống như trong number.
Javascript:
a = 12345n
// 12345n
b = 5n
// 5n
a + b
// 12350n
a * b
// 61725n
a - b
// 12340n
a % b
// 0n
a ** b
// 286718338524635465625n
Lưu ý:
Đối với phép chia, thì bigint sẽ cho kết quả khác với number (vì bigint chỉ cho phép số nguyên)
Javascript:
15n / 4n
// 3n
Bên cạnh đó, các toán tử so sánh cũng có thể được dùng một cách bình thường giữa number và bigint:
Javascript:
10n == 10
// true
11n < 9
// false
10n === 10n
// true
8n == 24/3
// true
Kiểu dữ liệu số trong JavaScript (Phần 3) - Khái quát về kiểu dữ liệu BigInt
3
|3

Tuy nhiên, việc dùng các toán tử số học giữa bigint và number sẽ dẫn đến
lỗi
:
Javascript:
a = BigInt(100)
// 100n
a + 1
// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
a + 1n
// 101n
a * 2
// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
a * 2n
// 200n
a / 2
// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
Mở rộng:
Các toán tử trên bit cũng có thể được dùng trên
bigint
giống như là trên một number, ngoại trừ toán tử >>> (unsigned right shift operator)
Vì việc ép kiểu giữa các giá trị
Number
và giá trị
BigInt
có thể dẫn đến mất độ chính xác, nên:
Chỉ sử dụng giá trị
BigInt
khi các giá trị lớn hơn
2
được mong đợi một cách hợp lý.
Không ép kiểu giữa giá trị
BigInt
và giá trị
Number
."
189,Kiểu dữ liệu số trong JavaScript,Kết luận,"Ở bài này, các bạn đã được làm quen với một kiểu dữ liệu mới:
bigint
Bài tiếp theo, chúng ta sẽ cùng nhau tìm hiểu một kiểu dữ liệu mới:
Bài tập về kiểu dữ liệu số trong Javascript
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”.
53"
190,Mảng trong JavaScript,JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
191,Mảng trong JavaScript,Dẫn nhập,"Ở các bài trước, Kteam đã giới thiệu đến các bạn về các kiểu dữ liệu nguyên thủy trong JavaScript (primitive data type).
Trong bài này, chúng ta sẽ cùng nhau tìm hiểu về một kiểu dữ liệu mới hơn, đó là
array
."
192,Mảng trong JavaScript,Nội dung,"Những yêu cầu về mặt kiến thức trước khi bắt đầu tìm hiểu bài này, là:
Các kiểu dữ liệu nguyên thủy trong JavaScript
Vòng lặp trong JavaScript
Chương trình con (function) trong JavaScript
Và, dưới đây là những nội dung sẽ được đề cập đến trong bài viết:
Đặt vấn đề
Kiểu dữ liệu array trong JavaScript
Khởi tạo một array
Các toán tử với array trong JavaScript
Vấn đề cần lưu tâm khi sử dụng array"
193,Mảng trong JavaScript,Đặt vấn đề,"Toàn có nuôi một con mèo, và Toàn muốn ghi nhớ lại tên của con mèo này.
Trong trường hợp này, Toàn chọn cách sử dụng một biến có tên là
myCat
, và lưu lại tên con mèo đó
myCat
= “
Tom
”
Và đây là một con mèo cái. Đó là lý do mà sau 3 tháng, số mèo mà Toàn nuôi tăng lên 4 con. Và đến lúc này, Toàn vẫn muốn lưu trữ lại tên của toàn
bộ mèo mà mình sở hữu.
Javascript:
myCat_1 = ‘Tom’; myCat_2 = ‘Jerry’; myCat_3 = ‘Torry’; myCat_4 = ‘Jerrom’
Mặc dù tốn công hơn một chút, nhưng Tún vẫn không quá khó khăn trong việc dùng biến để lưu lại tên mèo.
Đó là một câu chuyện hài hước. Vào một ngày đẹp trời, Toàn  tỉnh dậy và thấy nhà mình có 30 con mèo. Đó là một điều thần kỳ ! Và bây giờ, Toàn lại
bắt đầu loay hoay tạo ra 30 cái biến dành cho 30 con mèo, và tất nhiên, Toàn không muốn có một con mèo vô
danh.
Javascript:
myCat_1 = ‘Tom’; myCat_2 = ‘Jerry’;…; myCat_30 = ‘Tun’
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
2
|8

Đến đây, chắc chắn các bạn sẽ nhận ra một sự bất cập: chúng ta mất quá nhiều biến chỉ để lưu trữ dữ liệu của 30 con mèo. Và từ đó, một cấu trúc
dữ liệu mới đã ra đời, đó là
array
."
194,Mảng trong JavaScript,Array trong JavaScript,"Nếu các bạn đã có kiến thức về những ngôn ngữ lập trình khác, thì chắc chắn
array (mảng)
là một từ quá đỗi quen thuộc. Nó giúp lưu trữ dữ liệu
theo cấu trúc danh sách, và quản lý dữ liệu bằng cách truy xuất chỉ mục của các phần tử được lưu trong danh sách đó.
Array
xuất hiện trong hầu hết ngôn ngữ lập trình. Nó bao gồm các phần tử ngăn cách nhau bởi dấu phẩy (,) và được đặt trong cặp
[]
.
Đối với JavaScript , array là một đối tượng toàn cục được sử dụng để xây dựng các mảng và là một đối tượng cấp cao (nguồn:
Array in JavaScript
).
Khác với các ngôn ngữ lập trình bậc thấp, mảng trong JavaScript là một cấu trúc dữ liệu có khả năng hoạt động vô cùng mạnh.
Dưới đây là ví dụ về array.
Javascript:
arr = [1, 2, 3]
// [ 1, 2, 3 ]
console.log(arr)
[ 1, 2, 3 ]
// undefined
typeof(arr)
// 'object'
arr2 = ['one', 'two', 'three']
// [ 'one', 'two', 'three' ]
arr2
// [ 'one', 'two', 'three' ]
typeof(arr2)
// 'object'
Để khởi tạo một array, chúng ta có 2 cách:
Cách 1:
Sử dụng
constructor Array
<
new
> Array(<
elements
>)
Trong đó:
<
new
>: Từ khóa new, có thể có hoặc không.
<
elements
>: Là các phần tử mà ta muốn đặt trong array sau khi được khởi tạo. Các phần tử được đặt cách nhau bằng dấu phẩy.
Ví dụ:
Javascript:
arr = new Array(1, 2, 3)
// [ 1, 2, 3 ]
arr2 = Array('one', 'two', 'three')
// [ 'one', 'two', 'three' ]
arr
// [ 1, 2, 3 ]
arr2
// [ 'one', 'two', 'three' ]
Trường hợp <
elements
> là một số:
Nếu là số thập phân, hoặc là một số nguyên âm, trả về lỗi
Nếu là một số nguyên dương, trả về một array với <
elements
> phần tử, với mỗi phần tử là một giá trị trống (
empty item
)
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
3
|8

Nếu là một
bigint
, trả về một array với một phần tử duy nhất, chính là bigint đó.
Javascript:
a = Array(1, 2)
// [ 1, 2 ]
b = Array(3)
// [ <3 empty items> ]
c = Array('4')
// [ '4' ]
d = Array(1.2)
// Uncaught RangeError: Invalid array length
e = Array(2n)
// [ 2n ]
Cách 2:
Sử dụng cặp ngoăc vuông
[]
.
[<
elements
>]
Trong đó:
<
elements
>: là các phần tử của
array
mà bạn muốn tạo, các phần tử ngăn cách nhau bằng dấu phẩy.
Ví dụ:
Javascript:
a = []
// []
b = ['x', 'y', 'z']
// [ 'x', 'y', 'z' ]
a
// []
b
// [ 'x', 'y', 'z' ]
Không chỉ cho phép các phần tử có cùng kiểu nằm chung trong array, trong một JavaScript array có thể chứa các phần tử khác kiểu dữ liệu.
Javascript:
arr = [1, '2', 'three']
// [ 1, '2', 'three' ]
arr = [['a', 'b', 'c'], [1, 2, 3]]
// [ [ 'a', 'b', 'c' ], [ 1, 2, 3 ] ]
arr = ['eeee', ('uuu')]
// [ 'eeee', 'uuu' ]
Như vậy, để Toàn có thể lưu trữ tên của 30, 100 hay 1000 chú mèo, thì việc đơn giản nhất là dùng một array myCats để lưu trữ.
Một thuộc tính cơ bản của
array
là
length
, giúp chúng ta biết được liệu trong array đó có bao nhiêu phần tử (tương tự với
length
của
string
)
Như đã đề cập, array giúp quản lý các phần tử của nó bằng chỉ mục. Chỉ số của các phần tử được bắt đầu từ 0, và cứ thế chạy từ trái sang phải cho
đến hết array (từ
0
à
array.length – 1
). Nhờ đặc điểm nổi trội như vậy, nên khi mà Toàn muốn lấy tên của một chú mèo nào đó, thì Toàn chỉ cần biết
đó là chú mèo thứ mấy là được.
Để trích xuất một phần tử trong mảng, ta sẽ dùng cú pháp như sau:
<
array
>[<
index
>]
Trong đó:
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
4
|8

<
array
>: là tên của mảng.
<
index
>: là chỉ mục của phần tử mà ta muốn lấy ra.
Ví dụ:
Javascript:
cats = ['Tom', 'Jerry', 'Torry', 'Jeom']
// [ 'Tom', 'Jerry', 'Torry', 'Jeom' ]
cats[1]
// 'Jerry'
cats[2]
// 'Torry'
cats[3]
// 'Jeom'
cats[0]
// 'Tom'
Trong trường hợp mà trong <
array
> không có chỉ mục <
index
> (<
index
> nhỏ hơn 0 hoặc <
index
> lớn hơn
length-1
), thì giá trị của nó là
undefined
.
Trong ví dụ trên, giá sử ta cố ý lấy ra
cats[5]
và
cats[-1]
thì:
Javascript:
cats[-1]
// undefined
cats[5]
// undefined
Khác với chuỗi, array cho phép bạn thay đổi giá trị của các phần tử bên trong nó. Việc thay đổi này đơn giản chỉ là thực hiện phép gán cho phần tử
đó:
Javascript:
arr = ['a', 'b']
// [ 'a', 'b' ]
arr[0] = 'how'
// 'how'
arr[1] = 'Kteam'
// 'Kteam'
arr
// [ 'how', 'Kteam' ]
Có một điểm nữa mà ta cần lưu ý, đó là về “kiểu dữ liệu” của array. Nó là một
object
.
Javascript:
arr = []
// []
typeof(arr)
// 'object'
Một object đặc biệt giúp lưu trữ các giá trị theo cách đặc biệt.
Về object, trong các bài tiếp theo, Kteam sẽ giới thiệu cho các bạn về kiểu dữ liệu này."
195,Mảng trong JavaScript,Các toán tử với array trong Js,"Toán tử cộng (+)
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
5
|8

Một trong những sự thú vị của mảng JavaScript nằm ở toán tử +. Khi thực hiện toán tử + trên array, thì toàn bộ các dữ liệu đều được
chuyển thành
string
trước khi thực hiện tính toán.
Chính vì lẽ đó, nên về mặt bản chất, thì các toán tử +, khi thực hiện trên array sẽ đều trả về kết quả tương tự khi thực hiện trên chuỗi tương ứng.
Một giá trị
array
, khi được chuyển thành
string
, sẽ có dạng giống như một array, chỉ khác ở chỗ nó sẽ bỏ cặp ngoặc
[]
và đặt phần còn lại vào trong
cặp dấu nháy ‘’ (hoặc “”) để nó trở thành một chuỗi (đối với các phần tử là chuỗi, nó sẽ bỏ các cặp nháy bao quanh phần tử đó).
Javascript:
arr = [1, 2, 3]
// [ 1, 2, 3 ]
String(arr)
// '1,2,3'
arr2 = ['one', 'two', 'three']
// [ 'one', 'two', 'three' ]
String(arr2)
// 'one,two,three'
Giờ, quay trở lại vấn đề với phép cộng. Chắc hẳn các bạn đã nắm được cách mà JavaScript  thực hiện phép cộng với các array rồi nhỉ ? Nếu
chưa,cùng xem các ví dụ bên dưới:
Javascript:
arr = ['how', 'kteam']
// [ 'how', 'kteam' ]
arr + '12'
// 'how,kteam12'
arr + 12
// 'how,kteam12'
arr + [12, 34]
// 'how,kteam12,34'
Các toán tử số học khác (trừ, nhân chia)
Khác với toán tử cộng (+), tất cả các toán tử này khi thực hiên trên array đều sẽ cho một kết quả chung, đó là
NaN
.
Javascript:
arr = [1, 2]
// [ 1, 2 ]
arr - [1]
// NaN
arr * 2
// NaN
arr * [2]
// NaN
arr / 1
// NaN
Vấn đề cần lưu tâm khi sử dụng array
Việc đầu tiên, và là tối quan trọng khi làm việc với array là: đừng dùng toán tử so sánh cho 2 array trong JavaScript. Việc dùng các toán tử so sánh
một cách không kiếm soát sẽ tạo nên những sai lầm không đáng có.
Để Kteam cho các bạn xem một ví dụ cụ thể:
Javascript:
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
6
|8

['a'] == ['a'] // toán tử == luôn false
// false
[123] == [123]
// false
[['k']] == [['k']]
// false
Nguyên nhân cho việc đó có thể hiểu một cách đơn giản là: về mặt bản chất, array là một object (đối tượng), và vì đây là 2 đối tượng khác nhau, nên
chương trình luôn trả về false).
Tuy nhiên, các toán tử so sánh khác khi được dùng với 2 array thì chúng sẽ được chuyển về string để so sánh:
Javascript:
[1] == '1'
// true
[1, 2, 3] < ['a', 'b', 'c']
// true
‘1,2,3' < 'a,b,c'
// true
['Kteam'] < ['Kter']
// true
'Kteam' < 'Kter'
// true
Một sai lầm nữa dễ mắc phải chính là việc gán các giá trị array cho nhau một cách không có chủ đích. Một cách để xác định, chính là dùng phương
thức
is
.
Cú pháp:
Object.is(<
obj1
>, <
obj2
>)
Tác dụng:
dùng để xác định xem 2 object có cùng trỏ đến một vùng bộ nhớ hay không.
Đến thời điểm này, bạn chỉ cần hiểu 2 object đó là 2 array là được.
Khi gán một biến array này cho một biến khác, thì bản chất của vấn đề là ta đã làm cho 2 biến trỏ đến cùng một vùng bộ nhớ:
Javascript:
arr = [1, 2]
// [ 1, 2 ]
arr2 = arr
// [ 1, 2 ]
Object.is(arr, arr2)
// true
Nguyên nhân ở đây, một lần nữa, bản chất của vấn đề lại nằm ở việc array là object
Trong ví dụ trên, thì khi ta gán
arr2 = arr
, thì 2 biến này sẽ cùng trỏ vào một
object array
. Dù là 2 biến khác nhau, nhưng chúng cùng trỏ vào 1 đối
tượng.
Chính vì lẽ đó, khi ta thay đổi một phần tử trong
arr
bằng phép gán, thì kết quả của
arr2
cũng sẽ bị tác động (đối tượng mà cả 2 trỏ vô sẽ bị thay
đổi):
Javascript:
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
7
|8

arr[1] = 'deptrai!'
// 'deptrai!'
arr
// [ 1, 'deptrai!' ]
arr2
// [ 1, 'deptrai!' ]
Mặc dù vậy, lỗi này chỉ xảy ra khi ta thay đổi giá trị của 1 phần tử trong arr. Nếu như thay đối toàn bộ arr, tức là gán
arr = <một giá trị khác>
, thì 2
biến sẽ không cùng trỏ vào một giá trị nữa, và lúc ấy, chúng không còn liên hệ gì với
nhau.
Javascript:
arr = [1, 2]
// [ 1, 2 ]
arr2 = arr
// [ 1, 2 ]
Object.is(arr, arr2)
// true
arr = [1]
// [ 1 ]
Object.is(arr, arr2)
// false
Ở trên là 2 lỗi cơ bản nhất thường gặp khi làm việc với mảng trong JavaScript . Ngoài ra, khi thao tác với mảng, còn rất nhiều yếu tố khác có thể tạo
ra lỗi. Các bạn cần chú ý tránh những lỗi này để hạn chế nhất có thể thời gian để tìm và fix bug."
196,Mảng trong JavaScript,Empty items,"Khác với các ngôn ngữ lập trình khác, một phần tử trong array Js có thể
không mang bất kỳ giá trị nào
.
Để minh chứng cho điều đó, ta thực hiện lệnh sau:
Javascript:
arr = [, , ,]
// [ <3 empty items> ]
Nó không hề giống với các array khác, và cũng không trả về lỗi.
Và, giá trị của từng phần tử khi được gọi ra, sẽ là
undefined
.
Javascript:
arr[0]
// undefined
arr[1]
// undefined
arr[2]
// undefined"
197,Mảng trong JavaScript,Kết luận,"Qua bài này, các bạn đã được tìm hiểu sơ lược về array trong JavaScript .
Qua bài sau, chúng ta sẽ tiếp tục tìm hiểu kĩ hơn về array, để các bạn có thể rành rọt hơn trong công việc của mình.

”.
Mảng trong JavaScript (Phần 1)- Kiểu dữ liệu Array trong JavaScript
8
|8
"
198,Mảng trong JavaScript,mảng trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
"
199,Mảng trong JavaScript,Dẫn nhập,"Ở bài trước, Kteam đã giới thiệu đến các bạn về
kiểu dữ liệu array trong JavaScript
.
Trong bài này, chúng ta sẽ cùng tìm hiểu kĩ hơn về
các phương thức với array trong JavaScript
."
200,Mảng trong JavaScript,Nội dung,"Để nắm được bài này, bạn cần có kiến thức về:
Kiểu dữ liệu array trong JavaScript
Những nội dung mà chúng ta sẽ cùng tìm hiểu:
Chuyển một array sang string tương ứng
Các phương thức xác định
Các phương thức tìm kiếm
Các phương thức cập nhật"
201,Mảng trong JavaScript,Chuyển một array sang string,"Như đã biết, khi thực hiện các toán tử trên array trong JavaScript, thì máy tính sẽ chuyển các dữ liệu sang string để thực hiện.
Cụ thể hơn, ta có 2 cách để chuyển một giá trị từ array sang chuỗi. Những cách này tương tự như cách tạo ra một string mà Kteam đã hướng dẫn
các bạn trong bài
Kiểu dữ liệu Chuỗi
Cách thứ nhất, chính là sử dụng
constructor String
đã được Kteam đề cập đến ở bài trước:
String(
<array>
)
Trong đó,
<array>
là array tương ứng, và
constructor
này sẽ trả về một chuỗi mới.
Cách thứ 2, là sử dụng
phương thức toString
<array>
.toString()
Tương tự như trên,
<array>
là array tương ứng.
Hai cách trên có công dụng như nhau, và trả về cùng một giá trị chuỗi cho cùng một đầu vào.
Dưới đây là ví dụ:
Javascript:
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
2
|8

arr = ['how', 'kteam']
// [ 'how', 'kteam' ]
arr.toString()
// 'how,kteam'
String(arr)
// 'how,kteam'"
202,Mảng trong JavaScript,Các phương thức xác định,"Phương thức at
Cú pháp:
<array>
.at(
<index>
)
Tác dụng:
Trả về phần tử tương ứng với
<index>
trong mảng
<array>
.
Phương thức at trong aray tương tự với
phương thức at của string
.
Dành cho bạn nào chưa biết về
phương thức at
của string, thì nó sẽ trả về phần tử tương ứng với
<index>
.
Phương thức at
quy ước các phần tử
được đánh số từ trái sang phải (từ 0 tới <array>.length-1) và từ phải sang trái (từ -1 đến -<array>.length).
Lấy một trường hợp cụ thể:
arr = [1, 2, 3]
Phần tử / Vị trí
1
2
3
Vị trí dương
0
1
2
Vị trí âm
-3
-2
-1
Tiếp đến, là một vài ví dụ về việc dùng phương thức at:
Javascript:
arr = [1, 2, 3]
// [ 1, 2, 3 ]
arr.at(-1)
// 3
arr.at(-2)
// 2
arr.at(-3)
// 1
arr.at(0)
// 1
arr.at(1)
// 2
arr.at(2)
// 3
Và, một lưu ý khác:
nếu như
<index>
là một giá trị mà phương thức at không thể trả về giá trị phần tử tương ứng, thì nó sẽ trả về
undefined
.
Bên cạnh đó, một
string-number
có thể đươc dùng để thay thế cho số bên trong at. Đồng thời, nếu như
<index>
là một số thập phân, thì nó sẽ
lấy giá trị phần nguyên và trả về giá trị tương ứng trong array.
Javascript:
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
3
|8

arr = [1, 2, 3]
// [ 1, 2, 3 ]
arr.at(1.23)
// 2
arr.at('2.12')
// 3
arr.at('-2')
// 2
Phương thức includes
Một lần nữa, là giống với
string
.
Phương thức includes giúp xác định xem một giá trị nào đó có nằm trong array hay không.
Cú pháp:
<array>
.includes(
<searchElement>
,
<position>
)
Trong đó:
<searchElement>
: là phần tử mà ta muốn xét xem liệu nó có nằm trong
<array>
hay không.
<position>
: là vị trí bắt đầu tìm kiếm (mặc định là 0). Các phần tử từ
<position>
đến cuối
<array>
sẽ được xét.
Những lưu ý nhất định đối với tham số
<position>
:
Nếu
<position>
lớn hơn hoặc bằng
<array>.length
, thì trả về 0 (do không có bất kì phần tử nào được xét)
Nếu
<position>
là số âm, thì có 2 trường hợp:
<position>
lớn hơn hoặc bằng
-<array>.length:
thì sẽ bắt đầu xét trên đoạn bắt đầu từ phần tử tương ứng (như cách xét chỉ
mục âm bên trên) cho đến cuối
<array>
.
<position>
bé hơn
-<array>.length:
thì mặc định sẽ là tìm kiếm trên toàn bộ
<array>
.
Cũng tượng tự như phương thức
at
bên trên, nếu
<position>
là một số thập phân, thì nó tự động tách phần nguyên ra và làm như bình
thường.
<position>
có thể là một
string-number
.
Ví dụ:
Javascript:
a = [1, 2, 4, 6]
// [ 1, 2, 4, 6 ]
a.includes(1)
// true
a.includes(1, 1)
// false
a.includes(1, -4)
// true
a.includes(2, -3)
// true
a.includes(2, -4)
// true
a.includes(2, -400)
// true
a.includes(2, 1000)
// false
a.includes(2, '1.12')
// true
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
4
|8
"
203,Mảng trong JavaScript,Các phương thức tìm kiếm,"Phương thức indexOf
Cú pháp:
<array>
.indexOf(
<searchElement>
,
<posotion>
)
Trong đó:
<searchElement>
: là giá trị mà ta muốn tìm kiếm trong mảng.
<posotion>
: Tương tự như
<posotion>
ở bên trên phương thức includes
Giá trị trả về:
là vị trí đầu tiên mà tìm thấy
<searchElement>
trong
<array>
. Nếu không tìm thấy, trả về giá trị
-1
.
Ví dụ:
Javascript:
a = ['a', 'b', 'c']
// [ 'a', 'b', 'c' ]
a.indexOf('a', 2)
// -1
a.indexOf('a', -3)
// 0
a.indexOf('a', -123)
// 0
a.indexOf('a', 0.123)
// 0
Phương thức lastIndexOf
Cú pháp:
<array>
.lastIndexOf(
<searchElement>
,
<posotion>
)
Trong đó:
<searchElement>
: là phần tử được dùng để tìm kiếm.
<posotion>
: Là chỉ mục bắt đầu cho quá trình tìm kiếm. Quá trình tìm kiếm sẽ là từ
<posotion>
trở về đầu của
<array>
.
Mặc định:
<position> = <array>.length – 1.
Những điểm cần lưu ý đối với tham số
<position>
:
Nếu
<position>
lớn hơn hoặc bằng
<array>.length
, thì toàn bộ mảng sẽ được tìm kiếm.
Nếu
<position>
là số âm, thì  có 2 trường hợp:
<position>
lớn hơn hoặc bằng
-<array>.length
thì sẽ tìm từ cuối
<array>
cho đến chỉ số
<position>
<position>
nhỏ hơn
-<array>.length
thì không tiến hành quá trình tìm kiếm
Như các phương thức khác,
<position>
có thể là một
string-number
và được tự động lấy phần nguyên.
Ví dụ:
Javascript:
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
5
|8

a = ['a', 'b', 'c']
// [ 'a', 'b', 'c' ]
a.lastIndexOf('b', -2)
// 1
a.lastIndexOf('b', -3)
// -1
a.lastIndexOf('b', 0)
// -1
a.lastIndexOf('b', 100)
// 1"
204,Mảng trong JavaScript,Các phương thức cập nhật,"Nếu các bạn có biết kiến thức về cấu trúc dữ liệu và giải thuật, thì các bạn chắc chắn sẽ biết về 2 kiểu cấu trúc dữ liệu sau đây:
Stack
: Hoạt động theo kiểu
LIFO
(Last in first out). Hỗ trợ thao tác thêm một phần tử vào cuối danh sách, và loại bỏ một phần tử ở cuối danh
sách.
Queue
: Hoạt động theo kiểu
FIFO
(First in first out). Hỗ trợ thao tác thêm một phần tử vào cuối danh sách, và xóa một phần tử ở đầu danh
sách.
Và, có một loại cấu trúc dữ liệu có thể coi như là tổng của stack và queue, đó là deque.
Array trong JavaScript là một cấu trúc dữ liệu có thể xem như là một
deque
, nó hỗ trợ các thao tác:
Thêm một/nhiều phần tử vào đầu/cuối array.
Xóa một phần tử ở đầu/cuối array.
Cụ thể hơn, mời các bạn tiếp tục theo dõi phần bên dưới.
Phương thức unshift
Phương thức này giúp ta thêm một hay nhiều phần tử vào đầu của một array cho trước. Sau khi đã thêm các phần tử này vào array, thì giá trị trả về
của phương thức này là
<array>.length
.
Cú pháp:
<array>
.unshift(
<element>
)
Trong đó:
<element>
chính là phần tử mà bạn muốn thêm vào. Trong trường hợp có nhiều phần tử, các phần tử này phải được cách nhau bằng dấu
phẩy.
Ví dụ:
Javascript:
arr = ['Free', 'education']
// [ 'Free', 'education' ]
arr.unshift('How', 'Kteam')
// 4
arr
// [ 'How', 'Kteam', 'Free', 'education' ]
Phương thức push
Phương thức này giúp ta thêm một hay nhiều phần tử vào cuối của một array cho trước. Sau khi đã thêm các phần tử này vào array, thì giá trị trả về
của phương thức này là
<array>.length.
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
6
|8

Cú pháp:
<array>
.push(
<element>
)
Trong đó:
<element>
(cũng như trên thôi) chính là phần tử mà bạn muốn thêm vào. Trong trường hợp có nhiều phần tử, các phần tử này phải được
cách nhau bằng dấu phẩy.
Ví dụ:
Javascript:
arr = ['How', 'Kteam']
// [ 'How', 'Kteam' ]
arr.push('Free education')
// 3
arr
// [ 'How', 'Kteam', 'Free education' ]
Phương thức shift
Phương thức này loại bỏ phần tử đầu tiên của một array và trả về giá trị của phần tử đó. Nếu như array ban đầu trống, thì giá trị trả về là
undefined
.
Cú pháp:
<array>
.shift()
Ví dụ:
Javascript:
arr = ['aaaaaa', 'How', 'Kteam']
// [ 'aaaaaa', 'How', 'Kteam' ]
arr.shift()
// 'aaaaaa'
arr
// [ 'How', 'Kteam' ]
arr2 = []
// []
arr2.shift()
// undefined
Phương thức pop
Cũng gần tương tự như phương thức shift thôi, chỉ khác là nó loại bỏ và trả về phần tử cuối cùng của array.
Cú pháp:
<array>
.pop()
Ví dụ:
Javascript:
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
7
|8

arr = ['how', 'Kteam', 'aaaa']
// [ 'how', 'Kteam', 'aaaa' ]
arr.pop()
// 'aaaa'
arr
// [ 'how', 'Kteam' ]
[].pop()
// undefined
Phương thức splice
Cú pháp:
<array>
.splice(
<start>
, <deleteCount>,
<items>
)
Trong đó:
<start>
: là vị trí bắt đầu cho việc biến đổi array.
Nếu
<start>
lớn hơn
<array>.length – 1
thì
<start>
tự động được gán bằng độ dài của mảng. Trong trường hợp này, sẽ không có bất kì
phần tử nào bị xóa, nhưng phương thức vẫn có thể được dùng để thêm các phần
tử vào cuối
<array>
<deleteCount>
: là số lượng phần tử bị loại bỏ kể từ
<start>
(không bắt buộc, mặc định là
<array>.length
, tức là nếu không được chỉ định,
thì toàn bộ
<array>
sẽ bị xóa).
Nếu
<deleteCount>
bằng 0 hoặc âm, không có bất kì phần tử nào bị xóa bỏ.
Nếu
<deleteCount>
lớn hơn hoặc bằng
<array>.length
, thì toàn bộ
<array>
bị xóa.
<items>
: là những phần tử được thêm vào để “thế chỗ” cho những phần tử đã bị loại bỏ. Nếu có nhiều phần tử, các phần tử phải ngăn cách
nhau bằng dấu phẩy (không bắt buộc).
Các giá trị
<start>
và
<deleteCount>
tự động được lấy phần nguyên nếu nó là số thập phân.
Tác dụng:
Giúp thay đổi nội dung của
<array>
. Hiểu một cách đơn giản, là loại bỏ
<deleteCount>
phần tử từ
<start>
của
<array>
và thay thế
chúng bằng
<items>
. Sau khi thực hiện các thao tác trên, thì giá trị trả về của phương thức này chính là một array chứa các phần tử bị loại bỏ.
Ví dụ:
Javascript:
arr = ['a', 'b', 'c']
// [ 'a', 'b', 'c' ]
arr.splice(1, 2, 'how', 'kteam')
// [ 'b', 'c' ]
arr
// [ 'a', 'how', 'kteam' ]
arr.splice(1, 1)
// [ 'how' ]
arr
// [ 'a', 'kteam' ]
arr.splice(0)
// [ 'a', 'kteam' ]
arr
// []"
205,Mảng trong JavaScript,Kết luận,"Qua bài này, các bạn đã có thêm kiến thức về array trong JavaScript.
Qua bài sau, Kteam sẽ tiếp tục giới thiệu đến các bạn về
các phương thức khác của array trong JavaScript
.
Mảng trong JavaScript (Phần 2) - Các phương thức với mảng trong JavaScript
8
|8

Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
206,Mảng trong JavaScript,của mảng JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript"
207,Mảng trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
các phương thức với array trong JavaScript
.
Trong bài này, chúng ta sẽ tiếp tục chủ đề về
các phương thức trong array"
208,Mảng trong JavaScript,Nội dung,"Những yêu cầu về mặt kiến thức trước khi tìm hiểu bài này:
Kiểu dữ liệu array trong JavaScript
Nội dung mà Kteam sẽ giới thiệu đến các bạn trong bài này:
Các phương thức tiện ích với array trong JavaScript"
209,Mảng trong JavaScript,Các phương thức tiện ích với array,"Phương thức fill
Phương thức fill giúp thay đổi các phần tử trong mảng về một giá trị duy nhất
Cú pháp:
<array>
.fill(<value>,
<start>
,
<end>
)
Trong đó:
<value>
: là giá trị mà phương thức dùng để thay thế.
<start>
: là giá trị bắt đầu (mặc định là
0
), các giá trị từ
<start>
đến
<end>-1
sẽ được thay đổi thành
<value>
. Nếu
<start>
là số âm, thì nó
sẽ được coi là
<start> + <array>.length
<end>
: là giá trị kết thúc (mặc định là
<array>.length
). Nếu
<end>
là số âm, thì nó sẽ được coi là
<end> + <array>.length.
Ví dụ:
Javascript:
arr = [1, 2, 3, 4, 5]
// [ 1, 2, 3, 4, 5 ]
arr.fill('a', 3)
// [ 1, 2, 3, 'a', 'a' ]
arr.fill(-1)
// [ -1, -1, -1, -1, -1 ]
arr.fill(0, 1, 3)
// [ -1, 0, 0, -1, -1 ]
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript
2
|6

Phương thức forEach
Nghe lạ nhỉ, phương thức gì mà lại có chữ for trong đó, liệu có khác biệt gì với vòng lặp For mà chúng ta đã được học trước đó không?
Đúng thế! ForEach có thể được gọi là một vòng lặp, nhưng nó khá đặc biệt
Trước tiên, hãy cùng xem qua cú pháp của nó nào:
<array>
.forEach(
<func>
,
<thisArg>
)
Trong đó:
<func>
là một
function
. Nó có thể là một function được viết trực tiếp tại đó, một function được gọi từ bên ngoài hoặc là một
arrow
function
.
<func>
có thể có 1 tham số (
<value>
: giá trị đang được duyệt đến), 2 tham số (
<value>
và
<index>
: chỉ số của phần tử đang được duyệt
đến) và 3 tham số (
<value>
,
<index>
và
<arr>
: tức là toàn bộ
<array>
bên ngoài).
Còn đối với
<thisArg>
, thì đó là một tham số không bắt buộc. Nó quy định giá trị của this, và mặc định là
undefined
. Còn về
this
là gì, thì
Kteam sẽ đề cập đến khi các bạn tiếp cận với Object.
Tóm lại, hiểu một cách đơn giản, là chương trình sẽ duyệt qua từng phần tử của
<array>
, và đặt nó vào
<func>
.
Dưới đây là một vài ví dụ về forEach
Javascript:
arr = [12, 3, 5]
// [ 12, 3, 5 ]
sum = 0
// 0
arr.forEach((num) => sum += num)
// undefined
sum
// 20
arr // Giá trị của arr không bị thay đổi
// [ 12, 3, 5 ]
Javascript:
arr = [12, 5, 8]
// [ 12, 5, 8 ]
arr.forEach((value, index, arr) => arr[index] = value*2)
// undefined
arr
// [ 24, 10, 16 ]
Lưu ý:
Đối với forEach, ta
không
thể dùng lệnh
break
để phá vỡ vòng lặp. Nếu bạn muốn viết một vòng lặp có thể bị
break
, thì không nên
dùng forEach.
Phương thức every
Cú pháp:
<array>
.every(
<func>
,
<thisArg>
)
Tác dụng:
Giúp kiếm tra xem tất cả các phần tử của
<array>
khi được đưa vào
<func>
, có trả về
true
hay không. Chương trình sẽ lặp qua từng
phần tử của
<array>
và đưa nó vào
<func>
.
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript
3
|6

Trong cú pháp trên:
<func>
là một function, mà giá trị trả về của nó là
true
hoặc
false
.
Phương thức every sẽ trả về
true
nếu tất cả các phần tử đều “vượt qua bài kiếm tra”
<func>
.
Ví dụ về phương thức every:
Javascript:
function func(number) {
return number > 12
}
// undefined
arr = [1, 2, 3, 4]
// [ 1, 2, 3, 4 ]
arr.every(func)
// false
arr2 = [13, 14, 15]
// [ 13, 14, 15 ]
arr2.every(func)
// true
arr.every((number) => {return number > 0})
// true
arr2.every((number) => {return number < 0})
// false
Vậy, nếu như ta muốn tách riêng các phần tử “vượt qua bài kiếm tra”
<func>
thì sao ? Đến lúc này, ta lại cần một phương thức khác: đó là phương
thức filter.
Phương thức filter
Cú pháp:
<array>
.filter(
<func>
,
<thisArg>
)
Các tham số
<func>
>,
<thisArg>
giống tương tự như phương thức
forEach
.
Phương thức filter giúp ta lấy ra các phần tử đạt yêu cầu dựa trên
<func>
. Dưới đây là ví dụ:
Javascript:
names = ['An', 'Hoa', 'Teo', 'Tun', 'Le', 'Thanh']
// [ 'An', 'Hoa', 'Teo', 'Tun', 'Le', 'Thanh' ]
names.filter((name) => name.length >= 3)
// [ 'Hoa', 'Teo', 'Tun', 'Thanh' ]
names.filter((name) => name > 'Phong')
// [ 'Teo', 'Tun', 'Thanh' ]
Phương thức find
Cú pháp:
<array>
.find(
<func>
,
<thisArg>
)
Có lẽ Kteam không cần nói về các tham số nữa, vì nó đã được giải thích rõ ở trên.
Tác dụng:
Trả về giá trị của phần tử đầu tiên vượt qua “bài kiểm tra” mang tên
<func>
. Nếu không có bất kì phần tử nào vượt qua
<func>
, giá tri
trả về là
undefined
.
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript
4
|6

Ví dụ:
Javascript:
arr = [24, 10, 6]
// [ 24, 10, 6 ]
arr.find((n) => n < 10)
// 6
arr.find((n) => n >= 10 && n <= 20)
// 10
arr.find((n) => n > 100)
// undefined
Phương thức findIndex
Giống như
find
, nhưng giá trị được trả về là chỉ mục của phần tử đầu tiên thỏa mãn <func>. Nếu không có bất kì phần tử nào thỏa mãn, giá trị trả
về là -1.
Cú pháp:
<array>
.findIndex(
<func>
,
<thisArg>
)
Ví dụ:
Javascript:
arr = [24, 10, 6]
// [ 24, 10, 6 ]
arr.findIndex((n) => n < 10)
// 2
arr.findIndex((n) => n >= 10 && n <= 20)
// 1
arr.findIndex((n) => n > 100)
// -1
Phương thức some
Cú pháp:
<array>
.some(
<func>
,
<thisArg>
)
Phương thức này trả về
true
nếu có bất kì một phần tử nào “vượt qua bài kiểm tra”
<func>
. Hay nói cách khác, khi đưa phần tử nào đó vào
<func>
,
thì giá trị trả về là
true
.
Ví dụ:
Javascript:
arr = [1, 2, 3]
// [ 1, 2, 3 ]
arr.some((n) => n % 2 == 0)
// true
arr.some((n) => n % 4 == 0)
// false
arr.some((n) => 0)
// false
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript
5
|6

Phương thức entries
Cú pháp:
<array>
.entries()
Tác dụng:
trả về một
array iterator
(trình lặp).
Array iterator
, hiểu một cách đơn giản là giống như
generator
, giúp lặp qua array bằng hàm
next
():
Javascript:
arr = ['a', 'b', 'c']
// [ 'a', 'b', 'c' ]
iterator = arr.entries()
// Object [Array Iterator] {}
iterator.next()
// { value: [ 0, 'a' ], done: false }
iterator.next()
// { value: [ 1, 'b' ], done: false }
iterator.next()
// { value: [ 2, 'c' ], done: false }
iterator.next()
// { value: undefined, done: true }
Iterator
, chính là cái mà chúng ta dùng để lặp qua
iterable
. Ở biến
iterator
trong ví dụ trên, tại một thời điểm, nó sẽ cố định tại một vị trí trong
array. Sau khi gọi hàm
next
, nó nhảy sang vị trí khác và trả về cái “vị trí” mà nó vừa đến. Đối với hàm
next()
, nó sẽ trả về một cặp giá trị:
value
và
done
(chi tiết các bạn có thể xem lại bài
Function trong JavaScript
, ở đó Kteam đã có đề cập đến hàm
next
).
Phương thức concat
Để nối một array với một array khác, một giải pháp hữu ích là dùng phương thức concat.
Cú pháp:
<array>
.concat(
<arrays>
)
Trong đó,
<arrays>
có thể là một hoặc nhiều array. Nếu như có nhiều hơn 1 array, giữa các array phải có dấu phẩy.
Phương thức concat trả về một
bản sao của array
mới được tạo thành từ việc ghép các phần tử của array ban đầu với các phần tử của các array
được thêm vào. Do đó, nó không thay đổi bất kì một array nào có sẵn.
Nếu không có bất kì array nào, thì concat trả về một bản sao của
<array>
.
Ví dụ:
Javascript:
arr = ['how']
// [ 'how' ]
arr2 = arr.concat(['Kteam'])
// [ 'how', 'Kteam' ]
arr
// [ 'how' ]
arr2
// [ 'how', 'Kteam' ]
[].concat()
// []
Mảng trong JavaScript (Phần 3) - Các phương thức tiện ích của mảng JavaScript
6
|6

Phương thức slice
Liệu các bạn có thắc mắc, tại sao JavaScript nhiều phương thức như vậy, mà lại không có phương thức nào giúp chúng ta “bẻ” array một cách độc
lập ? Tức là, việc cắt array sẽ được thực hiện mà không làm thay đổi array ban đầu.
Để làm được như thế, ta sẽ dùng một phương thức có tên gọi là slice.
Cú pháp:
<array>
.slice(
<start>
,
<end>
)
Trong các tham số:
<start>
: Là chỉ số bắt đầu cho việc cắt. Có thể là một số âm. Nếu
<start>
lớn hơn
<array>.length
, thì một mảng rỗng được trả về.
<end>
: Là chỉ số kết thúc việc cắt. Có thể là một số âm. Nếu
<end>
bị bỏ qua hoặc lớn hơn
<array>.length
, thì
<end>
được tính là
<array>.length
.
Các phần tử được cắt sẽ có vị trí từ
<start>
đến
<end>-1
(ngay trước <end>)
Ví dụ:
Javascript:
arr = [1, 2, 3]
// [ 1, 2, 3 ]
arr.slice(1)
// [ 2, 3 ]
arr.slice(1, 2)
// [ 2 ]
arr.slice(-1, 2) // Vì phần tử có chỉ số 2 (3) đồng thời cũng có chỉ số là -1.
// []
arr.slice(-3, 2) // Lấy 2 phần tử đầu tiên (từ -3 đến -2, do -2 trùng với 1, đứng ngay trước 2)
// [ 1, 2 ]"
210,Mảng trong JavaScript,Kết luận,"Các bạn vừa cùng Kteam tìm hiểu về các phương thức tiện ích với array JavaScript
Ở bài tiếp theo, Kteam sẽ giới thiệu đến các bạn một
vài phương thức xử lý của array
”."
211,Mảng trong JavaScript,mảng JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Mảng trong JavaScript (Phần 4) - Các phương thức xử lý của mảng JavaScript"
212,Mảng trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng tìm hiểu về
các phương thức với array trong JavaScript
.
Trong bài này, chúng ta sẽ tiếp tục chủ đề về
các phương thức xử lý trong array"
213,Mảng trong JavaScript,Nội dung,"Những yêu cầu về mặt kiến thức trước khi tìm hiểu bài này:
Kiểu dữ liệu array trong JavaScript
Kiểu dữ liệu string trong JavaScript
Nội dung mà Kteam sẽ giới thiệu đến các bạn trong bài này:
Các phương thức xử lý với array trong JavaScript"
214,Mảng trong JavaScript,Các phương thức xử lý,"Phương thức sort
Chắc các bạn cũng đã hiểu ít nhiều về phương thức sort khi nghe qua cái tên của nó rồi nhỉ ? Cách hiểu đơn giản nhất, là nó sẽ giúp chúng ta
sắp
xếp
lại một array.
Cú pháp:
<array>
.sort(
<func>
)
Tác dụng:
phương thức sort giúp sắp xếp một array. Cách sắp xếp có thể là mặc định theo máy tính, hoặc do
<func>
quy định.
Trước tiên, hãy cùng tìm hiểu về cách sắp xếp mặc định. Theo mặc định, tất cả các phần tử được sắp xếp dưới dạng chuỗi. Tức là, nếu không có
<func>
, thì chương trình sẽ dựa trên việc so sánh các phần tử dưới dạng chuỗi để quy định rằng phần tử nào bé hơn, phần tử nào lớn hơn. Từ đó
đưa ra một thứ tự sắp xếp phù hợp.
Để có thể hiểu rõ hơn về cách sắp xếp mặc định, mời các bạn xem qua một ví dụ:
Javascript:
arr = [10, 5, 30]
// [ 10, 5, 30 ]
arr.sort()
// [ 10, 30, 5 ]
arr
// [ 10, 30, 5 ]
Vì ‘10’ < ‘30’ < ‘5’, nên arr sẽ có dạng như trong ví dụ trên (sau khi đã được sắp xếp).
Mảng trong JavaScript (Phần 4) - Các phương thức xử lý của mảng JavaScript
2
|5

Javascript:
arr2 = ['Kteam', 'how', 'free', 'education']
// [ 'Kteam', 'how', 'free', 'education' ]
arr2.sort()
// [ 'Kteam', 'education', 'free', 'how' ]
arr2
// [ 'Kteam', 'education', 'free', 'how' ]
Từ ví dụ trên có thể thấy: việc sắp xếp các phần tử có cùng kiểu dữ liệu là khá dễ dàng. Vậy nếu các phần tử khác kiểu dữ liệu thì sao nhỉ ? Cũng thế
thôi, vì chúng đều là string cả mà.
Javascript:
arr3 = ['how', 1, 'Kteam', 3, -1, '0']
// [ 'how', 1, 'Kteam', 3, -1, '0' ]
arr3.sort()
// [ -1, '0', 1, 3, 'Kteam', 'how' ]
arr3
// [ -1, '0', 1, 3, 'Kteam', 'how' ]
Nhưng, nếu ta muốn sắp xếp các phần tử theo một cách khác, mà không phải chuyển về chuỗi rồi so sánh, thì sao nhỉ ? Đến lúc này, cái
<func>
lại
phát huy tác dụng của nó.
<func>
là một function, được viết ngay tại đó, được gọi từ một vị trí khác trong chương trình, hoặc là một arrow
function. Theo mặc định,
<func>
là việc so sánh 2 string.
Bên trong
<func>
bắt buộc phải có 2 tham số, và 2 tham số này sẽ đại diện cho 2 phần tử tương ứng bất kì trong <
array
>. Gọi 2 phần tử được so
sánh là a và b, thì khi đưa vào
<func>
, thì sẽ có các trường hợp sau xảy ra:
Giá trị trả về của <func>
Ý nghĩa
<0
a < b (tức là a sẽ xếp trước b)
>0
a > b (tức là b sẽ được xếp trước
a)
=== 0
a == b (giữ nguyên vị trí của a và
b)
Do đó, để sắp xếp một array toàn là các số (number), thì ta có thể dùng một function như sau:
Javascript:
Giá trị trả về của <func>
Ý nghĩa
<0
a < b (tức là a sẽ xếp trước b)
>0
a > b (tức là b sẽ được xếp trước a)
=== 0	 a == b (giữ nguyên vị trí của a và b)
Bây giờ, ta sẽ tiến hành việc sắp xếp:
Javascript:
arr = [10, 30, 5]
// [ 10, 30, 5 ]
arr.sort()
// [ 10, 30, 5 ]
arr.sort(compare)
// [ 5, 10, 30 ]
arr
// [ 5, 10, 30 ]
Mảng trong JavaScript (Phần 4) - Các phương thức xử lý của mảng JavaScript
3
|5

Như vậy, chúng ta có thể quy định các mà một
array
có thể được sắp xếp. Trong ví dụ trên, hàm compare có thể sửa đổi đơn giản hơn, nhưng hiệu
quả không đối:
Javascript:
function compare(a, b) {
return a - b
}
// undefined
arr = [10, 30, 5]
// [ 10, 30, 5 ]
arr.sort(compare)
// [ 5, 10, 30 ]
arr
// [ 5, 10, 30 ]
Phương thức map
Cú pháp:
<array>
.map(
<func>
,
<thisArg>
)
Tác dụng:
Thực hiện
<func>
cho từng phần tử của
<array>
, sau đó gom tất cả các kết quả trả về vào một array mới.
Các tham số trong phương thức map:
<func>
: là một function. Có thể được gọi từ một vị trí khác trong chương trình, được viết trực tiếp ngay tại đó hoặc là một
arrow function
.
<array>
: Giá trị được sử dụng như
this
khi gọi
<func>
(sẽ được Kteam giải thích kĩ hơn trong tương lai).
Đến thời điểm này của khóa học, bạn chỉ cần nắm vững được
<func>
là đủ.
Trong quá trình duyệt qua
<array>
, các giá trị của từng phần tử đều được gọi
<func>
, ngoại trừ:
Các chỉ mục mà không chứa bất kì phần tử nào (empty item)
Các chỉ mục đã bị xóa.
Lưu ý rằng, phương thức map trả về một array mới, và array ban đầu không bị tác động.
Ví dụ:
Javascript:
arr = [2, 4, 6]
// [ 2, 4, 6 ]
arr.map((a) => a % 2 == 0)
// [ true, true, true ]
arr.map((a) => a**2)
// [ 4, 16, 36 ]
arr
// [ 2, 4, 6 ]
Javascript:
arr = [, , ,] // 3 empty items
// [ <3 empty items> ]
arr.map(() => 'howKteam')
// [ <3 empty items> ]
arr
// [ <3 empty items> ]
Mảng trong JavaScript (Phần 4) - Các phương thức xử lý của mảng JavaScript
4
|5

Phương thức reverse
Phương thức reverse giúp ta
đảo ngược thứ tự
các phần tử trong một array
Cú pháp:
<array>
.reverse()
Ví dụ:
Javascript:
arr = ['Free edu', 'Kteam', 'how']
// [ 'Free edu', 'Kteam', 'how' ]
arr.reverse()
// [ 'how', 'Kteam', 'Free edu' ]
arr
// [ 'how', 'Kteam', 'Free edu' ]
numbers = [1, 2, 3, 4, 5]
// [ 1, 2, 3, 4, 5 ]
numbers.reverse()
// [ 5, 4, 3, 2, 1 ]
numbers
// [ 5, 4, 3, 2, 1 ]
Phương thức split / join
Đối với phương thức split, mời các bạn xem lại bài
Kiểu dữ liệu chuỗi trong JavaScript– phần 4
Bây giờ chúng ta sẽ cùng đến với phương thức join
Cú pháp:
<array>
.join(
<seperator>
)
Trong đó:
<seperator>
là một chuỗi.
Phương thức này giúp “
gom
” các phần tử của
<array>
vào một chuỗi duy nhất. Các phần tử của <array> sẽ được nối với nhau bằng
<seperator>
.
Nếu có phần tử là
undefined
,
null
hoặc
<empty item>
, thì những giá trị này được xem như là một chuỗi rỗng.
Ví dụ:
Javascript:
arr = ['we', 'are', 'howKteam']
// [ 'we', 'are', 'howKteam' ]
arr.join(' + ')
// 'we + are + howKteam'
arr2 = Array(3)
// [ <3 empty items> ]
arr2.join('Js')
// 'JsJs'"
215,Mảng trong JavaScript,Kết luận,"Mảng trong JavaScript (Phần 4) - Các phương thức xử lý của mảng JavaScript
5
|5

Qua bài này, các bạn đã biết thêm về các phương thức với array trong JavaScript
Trong bài tiếp theo, Kteam cùng bạn củng cố lại kiến thức
Bài tập về mảng trong JavaScript
.
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
216,Tải và cài đặt môi trường nodejs,Bài: Tải và cài đặt môi trường nodejs,"Xem bài học trên website để ủng hộ Kteam:
Tải và cài đặt môi trường nodejs
"
217,Tải và cài đặt môi trường nodejs,Dẫn nhập,"Trong bài đầu tiên, chúng ta sẽ cùng
cài đặt node để chạy một chương trình JavaScript
."
218,Tải và cài đặt môi trường nodejs,Nội dung,"Những nội dung mà chúng ta sẽ đi qua trong bài này:
Tải và cài đặt môi trường node (npm)
Tải và cài đặt Visual code."
219,Tải và cài đặt môi trường nodejs,Tải và cài đặt môi trường node,"Nodejs
hỗ trợ chạy chương trình JavaScript bằng console và đó là lí do mà Kteam chọn nodejs làm run command trong suốt khóa học (bời vì phần
lớn nội dung khóa học, chúng ta sẽ thao tác với console).
Đầu tiên, truy cập
nodejs.org
. Màn hình chính của website sẽ trông như sau:
Tiếp đến, để tải nodejs, hãy chọn một trong 2 ô màu xanh (đại diện cho 2 phiên bản khác nhau). Kteam sẽ chọn bản
16.13.2 LTS
(là phiên bản được
hỗ trợ dài hạn). Sau đó, chỉ cần chọn nơi lưu file cài đặt và click “save” để tải về.
Tải và cài đặt môi trường nodejs
2
|7

Mở file cài đặt lên, chờ cho đến khi màn hình hiển thị ra một box như sau:
Chọn
next
, sau đó tick vào
I accept the term in the License Argreement
, và ấn
next
:
Tải và cài đặt môi trường nodejs
3
|7

Chọn đường dẫn cho node, và ấn
next
:
Sau đó, một cửa sổ hiện ra cho các bạn chọn. Đây là một gợi ý từ Kteam:
Tải và cài đặt môi trường nodejs
4
|7

Chọn
next
, và sau đó, chọn
install
:
Tải và cài đặt môi trường nodejs
5
|7

Chờ cho quá trình cài đặt được hoàn tất:
Khi hoàn tất, một cửa sổ như sau sẽ hiện ra, ấn finish để hoàn thành.
Tải và cài đặt môi trường nodejs
6
|7

Sau đó, bạn chỉ cần mở
cmd
ra (ấn window, sau đó tìm
cmd
và ấn
enter
) và kiểm tra xem node đã được cài đặt hay chưa bằng cú pháp
node -v
là
được. Nếu nó hiện ra phiên bản mà bạn đã cài đặt, thì xem như chúng ta đã thành công."
220,Tải và cài đặt môi trường nodejs,Cài đặt Vs code,"Vs code là một code editor được sử dụng vô cùng rộng rãi vì tính đơn giản cũng như là tiện dụng của nó. Cách cài đặt rất đơn giản, và Kteam cũng
đã có sẵn một bài về cách cài đặt, mời các bạn tham khảo tại:
Cài đặt Visual Code"
221,Tải và cài đặt môi trường nodejs,Kết luận,"Qua bài này, các bạn đã có thể cài đặt được môi trường nodejs và code editor Vscode.
Trong bài sau, chúng ta sẽ cùng tìm hiểu cách
Chạy chương trình Js bằng console và node
.
Tải và cài đặt môi trường nodejs
7
|7

Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
222,Vòng lặp For trong JavaScript,Bài: Vòng lặp For trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Vòng lặp For trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
223,Vòng lặp For trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng nhau tìm hiểu về
vòng lặp với while trong JavaScript
.
Trong bài này, Kteam sẽ giới thiệu đến các bạn về một loại vòng lặp mới:
vòng lặp for"
224,Vòng lặp For trong JavaScript,Nội dung,"Để nắm được nội dung bài này, bạn cần:
Hiểu rõ về biến trong JavaScript, các kiểu dữ liệu cơ bản như số, chuỗi
Biết về khái niệm vòng lặp trong JavaScript
Biết về các câu lệnh điều kiện trong JavaScript
Những nội dung mà chúng ta sẽ cùng tìm hiểu:
Đặt vấn đề
Vòng lặp for"
225,Vòng lặp For trong JavaScript,Đặt vấn đề,"Như đã biết, để có thể lặp đi lặp lại một công việc nào đó, thì trong JavaScript ta có thể sử dụng
vòng lặp với while
.
Nhưng đôi khi, với while, một vòng lặp có thể sẽ không biết trước được số lần lặp.
Giả sử, ta tạo một trò chơi, mà khi người chơi ấn phím 0 thì trò chơi sẽ kết thúc.
Khi đó, while sẽ là một lựa chọn hợp lý.
Nhưng, giả sử ta muốn quyết định số lần lặp của một quá trình nào đó, thì sao ? Vòng lặp while vẫn cho chúng ta khả năng đó.
Javascript:
time = 1
// 1
times = 10
// 10
while(time < times) {
time++;
// statement
}
// 9
Nhưng đó không phải là một cách hay. Giả sử, ta quên mất việc gán
times++
thì sao ? Đó sẽ là một vòng lặp “never stop”.
Để có thể lặp với số lần biết trước, JavaScript hỗ trợ một cú pháp lặp với tác dụng mạnh hơn nhiều so với while. Đó là
vòng lặp for"
226,Vòng lặp For trong JavaScript,Vòng lặp for,"Vòng lặp For trong JavaScript
2
|5

Cú pháp:
f
or(
<initialization>
;
<condition>
;
<final-expression>
)
<
statement
>
Trong đó:
<initialization>
: là một (hay một nhóm) lệnh, sẽ chỉ được thực thi một lần trước khi vòng lặp được diễn ra. Sau khi kết thúc vòng lặp, các giá
trị được khởi tạo (nếu có) sẽ bị loại bỏ.
<condition>
: là một (hoặc một nhóm) điều kiện. Cũng như
while
, các lệnh bên trong vòng lặp chỉ được thực thi khi
<condition>
là
truthy
.
<final-expression>
: là một (hay một nhóm) lệnh, sẽ được thực thi sau mỗi lần hoàn thành
<statement>
<
statement
>: là một (một khối) lệnh, sẽ được thực thi trong mỗi lần lặp
Ví dụ:
Javascript:
for(let i = 0; i <= 10; i++) // in ra các số tự nhiên từ 1 đến 10.
console.log(i)
// 0
// 1
// 2
// 3
// 4
// 5
// 6
// 7
// 8
// 9
// 10
// undefined
Sau đây, Kteam sẽ chuyển các ví dụ (ở bài trước) từ cách dùng while sang sử dụng for để bạn có cái nhìn rõ ràng hơn
Ví dụ 1: In ra các số chẵn trong khoảng [0..10]
Javascript:
for(let i = 2; i <= 10; i+=2) console.log(i)
// 2
// 4
// 6
// 8
// 10
// undefined
Ví dụ 2: Tính tổng các số trong khoảng [0..100]
Cách 1:
Javascript:
Sum = 0
// 0
for(let i = 0; i <= 100; i++) Sum += i;
// 5050
Sum
// 5050
Hoặc, khi đã thành thạo vòng lặp for ở một mức độ nhất định, bạn có thể
Vòng lặp For trong JavaScript
3
|5

Cách 2:
Javascript:
Sum = 0
// 0
for(let i = 0; i <= 100; Sum += i, i++) {}
// undefined
Sum
// 5050
Ví dụ 3: In ra các ký tự có trong một chuỗi:
Javascript:
str = 'howKteam'
// 'howKteam'
for(let i = 0; i < str.length; i++) console.log(str[i])
// h
// o
// w
// K
// t
// e
// a
// m
// undefined
Tại sao lại nói là for “đẳng cấp” hơn while ? Vì đơn giản, for có thể biến thể một cách linh hoạt tùy theo mong muốn của người dùng.
Trong vòng lặp for,
<initialization>
;
<condition>
;
<final-expression>
và <
statement
> là không bắt buộc.
Ví dụ dưới đây là một cách để tạo ra một vòng lặp vô tận:
Javascript:
for(;;)
Ta có thể “biến hóa” vòng lặp for theo cách của mình:
Bỏ phần
<initialization>
:
Javascript:
t = 1
// 1
for(;t <= 100; t *= 2) {}
// undefined
t
// 128
Việc bỏ phần
<condition>
khả năng cao là sẽ tạo ra một vòng lặp vô tận. Biện pháp cải thiện là dùng
break
Javascript:
t = 1
// 1
for(;;t *= 2) {if(t > 100) break}
// undefined
t
// 128
Vòng lặp For trong JavaScript
4
|5

Nhưng cách này chỉ khiến cho code của bạn trông dài hơn chứ chẳng mang lại bất cứ lợi ích gì, do đó đừng dùng nó.
Bên cạnh đó, với
<condition>
, ta cũng có thể ghép nhiều điều kiện lại với nhau bằng các toán tử
NOT
,
OR
và
AND
(toán tử logic)
Dưới đây là một ví dụ mà bạn có thể tự tìm hiểu thêm
Javascript:
i = 0, j = 0;
// 0
for(; i + j < 10; i--, j+=2) {}
// undefined
i
// -10
j
// 20
Đối với phần
<final-expression>
, ta có thể bỏ qua nó nếu như cảm thấy cần thiết.
Javascript:
i = 0, j = 0
// 0
for(; i + j < 10;) {i-=1; j+=2}
// 20
i
// -10
j
// 20
Tổng kết lại, dù là vòng lặp for hay vòng lặp while sẽ đều có những lợi thế, cũng như là những nhược điểm riêng, do đó, các bạn cần lựa chọn sử
dụng cho hợp lý. Trước mắt, xuất phát điểm sẽ là thành thạo cả 2.
Dưới đây sẽ là bảng so sánh giữa vòng lặp while và vòng lặp for:
Tiêu chí
Vòng lặp for
Vòng lặp while
Cú pháp
for(<
initialization
>; <
condition
>; <
final-
expression
>)
<
statement
>
while(<
condition
>) <
statement
>
Đặc điểm
Lặp lại với
số lần biết trước
Lặp mà không biết trước số lần lặp
Điều kiện ban đầu
Không bắt buộc phải có điều kiện ban
đầu (có thể bỏ <
condition
>). Lúc này, nó
trờ thành một vòng lặp vô tận cho đến
khi gặp lệnh
break
Nếu không có điều kiện ban đầu, thì
chương trình báo lỗi (không thể bỏ
<
condition
>)
Các biến trong vòng lặp
Cho phép khởi tạo biến trước vòng lặp
(các biến này chỉ được khởi tạo một lần
từ đầu cho đến khi kết thúc vòng lặp)
Không hỗ trợ việc khởi tạo trước vòng
lặp. Việc khởi tạo bên trong vòng lặp sẽ
được thực thi lại trong mỗi lần lặp (về
điểm này thì for cũng tương tự)
Trường hợp sử dụng
Lặp khi đã biết trước số lần lặp
Lặp mà không biết trước số lần lặp
Vòng lặp for có nhiều biến thể, mà Kteam sẽ hướng dẫn trong tương lai khi kiến thức của các bạn đã “vững chắc” hơn.
Vòng lặp For trong JavaScript
5
|5
"
227,Vòng lặp For trong JavaScript,Kết luận,"Qua bài này, các bạn đã hiểu rõ hơn về vòng lặp for.
Trong bài tiếp theo, Kteam sẽ cùng bạn ôn tập
Bài tập về vòng lặp trong JavaScript
.
Cảm ơn các bạn đã theo dõi bài viết. Hãy để lại bình luận hoặc góp ý của mình để phát triển bài viết tốt hơn. Đừng quên “
Luyện tập – Thử thách –
Không ngại khó
”."
228,Vòng lặp While trong JavaScript,Bài: Vòng lặp While trong JavaScript,"Xem bài học trên website để ủng hộ Kteam:
Vòng lặp While trong JavaScript
Mọi vấn đề về lỗi website làm ảnh hưởng đến bạn hoặc thắc mắc, mong muốn khóa học mới,
nhằm hỗ trợ cải thiện Website. Các bạn vui lòng phản hồi
đến Fanpage
How Kteam
nhé!"
229,Vòng lặp While trong JavaScript,Dẫn nhập,"Ở bài trước, chúng ta đã cùng nhau tìm hiểu về các
câu lệnh điều kiện trong JavaScript
Trong bài này, Kteam sẽ giới thiệu đến các bạn một loại câu lệnh mới:
câu lệnh lặp While"
230,Vòng lặp While trong JavaScript,Nội dung,"Để nắm vững nội dung bài này, bạn cần có kiến thức về
Biến trong JavaScript
Các kiểu dữ liệu cơ bản trong JavaScript
Các toán tử cơ bản trong JavaScript
Những nội dung mà chúng ta sẽ cùng tìm hiểu:
Đặt vấn đề
Vòng lặp while
Vòng lặp do – while
Lệnh break và continue"
231,Vòng lặp While trong JavaScript,Đặt vấn đề,"Vào một ngày đẹp trời không mây, Toàn có một trò chơi nho nhỏ: Thảy xúc xắc (súc sắc) cho đến khi xuất hiện 6 hoặc 7 nút.
Trong trường hợp này, Toàn không thể biết trước số lần mình gieo để đạt được mục tiêu mong muốn. Và việc thảy xúc xắc sẽ được diễn ra mãi cho
đến khi xuất hiện số 6 hoặc 7.
Đối với những công việc được lặp đi lặp lại để thỏa mãn một điều kiện nào đó, thì trong lập trình, nó được gọi là vòng lặp"
232,Vòng lặp While trong JavaScript,Vòng lặp while,"Cú pháp:
while(
<condition>
)
<statement>
Trong đó:
<condition>
là một điều kiện, sẽ được đối chiếu trước khi thực hiện
<statement>
, và vòng lặp sẽ tiếp diễn mãi cho đến khi
<condition>
=
falsy
.
<statement>
: là các lệnh (khối lệnh) sẽ được diễn ra khi
<condition>
=
truthy
.
Kteam xin nhấn mạnh: Vòng lặp sẽ xảy ra mãi cho đến khi
<condition>
=
falsy
. Khi đó, các lệnh tiếp theo sau vòng lặp sẽ được thực hiện.
Vòng lặp While trong JavaScript
2
|5

Dưới đây là một ví dụ cụ thể: dùng hàm
random
để tạo ngẫu nhiên một con số nằm trong khoảng [0..10], và làm liên tục cho đến khi có một con số
nào đó lớn hơn 7 xuất hiện.
Javascript:
number = 0
// 0
while (number <= 7) {
console.log(number);
number = Math.floor(Math.random() * 10); // Sử dụng hàm Math.random
}
// 0
// 0
// 1
// 9
console.log(number);
// 9
// undefined
Lưu ý:
vì chúng ta đang random, nên với mỗi lần chạy, kết quả thu được sẽ khác nhau.
Dưới đây là một số ví dụ khác có dùng while
Ví dụ 1:
In ra các số chẵn trong khoảng [0..10]
Javascript:
var t = 2;
while(t <= 10) {
console.log(t);
t += 2;
}
Ví dụ 2:
Tính tổng các số nguyên nằm trong khoảng [0..100]
Javascript:
var t = 0,
Sum = 0;
while (t <= 100) {
Sum += t;
t += 1;
}
console.log(Sum);
Ví dụ 3:
In ra các kí tự có trong một chuỗi
Javascript:
Vòng lặp While trong JavaScript
3
|5

str = ""howKteam""
// 'howKteam'
t = 0
// 0
while(t <= str.length) {
console.log(str[t])
t++
}
// h
// o
// w
// K
// t
// e
// a
// m
// undefined
// 8
Vòng lặp do-while
Cú pháp:
do
<statement>
while(
<condition>
)
Trong đó,
<statement>
và
<condition>
giống như đối với
while
, chỉ khác là đối với
<condition>
, việc kiểm tra sẽ diễn ra sau khi các lệnh được
thực hiện.
Đối với vòng lặp này, thì các lệnh
<statement>
sẽ được thực hiện ít nhất một lần trước khi kiểm tra
<condition>
.
Về mặt cơ bản, chúng là như nhau. Dưới đây là các ví dụ bên trên khi được viết bằng do-while
Ví dụ 1:
In ra các số chẵn trong khoảng [2..10]
Javascript:
var t = 0;
do {
t += 2;
console.log(t)
} while(t <= 10)
Ví dụ 2:
Tính tổng các số nguyên nằm trong khoảng [0..100]
Javascript:
var t = 0, Sum = 0;
do {
Sum += t;
t++;
} while(t <= 100)
console.log(Sum)
Ví dụ 3:
In ra các kí tự trong một chuỗi
Javascript:
Vòng lặp While trong JavaScript
4
|5

str = 'howKteam'
// 'howKteam'
t = 0
// 0
do {
console.log(str[t])
t++
} while(t <= str.length)
// h
// o
// w
// K
// t
// e
// a
// m
// undefined
// 8"
233,Vòng lặp While trong JavaScript,Lệnh break và continue,"Lệnh break
Đối với
break
, thì Kteam đã giải thích tương đối đầy đủ ở bài
Câu lệnh điều kiện trong JavaScript
, các bạn có thể xem lại.
Trong một vòng lặp, khi đang chạy mà gặp lênh
break
, thì chương trình sẽ kết thúc luôn vòng lặp mà không cần xem xét điều kiện.
Ví dụ:
với chương trình sau, ta chỉ tính được tổng các số trong khoảng [1..50]:
Javascript:
var t = 0, Sum = 0;
while(t <= 100)
{
if(t > 50) break;
Sum += t;
t++;
}
console.log(Sum) // 1275
Lệnh continue
Khác với break, lệnh
continue
trong vòng lặp while sẽ khiến chương trình bỏ qua các lệnh sau nó, và trực tiếp chuyển đến kiểm tra điều kiện.
Ví dụ:
Tính tổng các số trong khoảng [0..100], bỏ qua các số trong khoảng [50..60]:
Javascript:
var t = 0, Sum = 0;
while(t < 100)
{
t++;
if(t >= 50 && t <= 60) continue;
Sum += t;
console.log(t);
}
console.log(Sum);"
234,Vòng lặp While trong JavaScript,Kết luận,"Vòng lặp While trong JavaScript
5
|5

Qua bài này, các bạn đã được tìm hiểu về vòng lặp với while trong JavaScript
Ở bài sau, các bạn sẽ được tìm hiểu về một dạng vòng lặp khác:
vòng lặp với for
”."
