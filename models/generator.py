from g4f.client import Client
from config import Config
from typing import List, Dict
import logging

class GPTGenerator:
    def __init__(self):
        self.client = Client()
        self.model = "gpt-4"  # S·ª≠ d·ª•ng "gpt-4" thay v√¨ "gpt-4-mini" ƒë·ªÉ ·ªïn ƒë·ªãnh h∆°n
        self.retry_count = 3  # S·ªë l·∫ßn th·ª≠ l·∫°i khi k·∫øt n·ªëi th·∫•t b·∫°i
        
        self.system_prompt = f"""
        B·∫°n l√† tr·ª£ l√Ω JavaScript chuy√™n nghi·ªáp. H√£y:
        1. Tr·∫£ l·ªùi b·∫±ng {Config.DEFAULT_LANG}
        2. Gi·∫£i th√≠ch ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu
        3. Lu√¥n k√®m v√≠ d·ª• code khi c√≥ th·ªÉ
        4. D√πng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng
        5. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y n√≥i "Theo t√†i li·ªáu tham kh·∫£o..."
        """
    
    def generate(self, query: str, context: List[Dict], lang: str = None) -> str:
        lang = lang or Config.DEFAULT_LANG
        prompt = self._build_prompt(query, context, lang)
        
        for attempt in range(self.retry_count):
            try:
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {"role": "system", "content": self.system_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=Config.MAX_TOKENS,
                    temperature=0.7
                )
                return response.choices[0].message.content
            except Exception as e:
                logging.error(f"L·ªói l·∫ßn {attempt + 1}: {str(e)}")
                if attempt == self.retry_count - 1:
                    return self._fallback_response(query, context, lang)
    
    def _build_prompt(self, query: str, context: List[Dict], lang: str) -> str:
        context_str = "\n\n".join(
            f"üìå T√†i li·ªáu {i+1} (ƒê·ªô li√™n quan: {ctx['score']:.2f}):\n{ctx['content']}"
            for i, ctx in enumerate(context)
        )
        
        return f"""
        **Ng√¥n ng·ªØ y√™u c·∫ßu**: {lang}
        **C√¢u h·ªèi**: {query}
        
        **Th√¥ng tin tham kh·∫£o**:
        {context_str}
        
        **H∆∞·ªõng d·∫´n tr·∫£ l·ªùi**:
        1. ∆Øu ti√™n th√¥ng tin c√≥ ƒë·ªô li√™n quan cao
        2. Gi·∫£i th√≠ch nh∆∞ d·∫°y ng∆∞·ªùi m·ªõi
        3. K√®m v√≠ d·ª• code khi c√≥ th·ªÉ
        4. Tr·∫£ l·ªùi b·∫±ng {lang}
        """
    
    def _fallback_response(self, query: str, context: List[Dict], lang: str) -> str:
        """Ph·∫£n h·ªìi d·ª± ph√≤ng khi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c GPT"""
        return f"""
        ‚ö†Ô∏è Hi·ªán kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi GPT-4. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin t·ª´ t√†i li·ªáu:
        
        **C√¢u h·ªèi**: {query}
        
        **T√†i li·ªáu tham kh·∫£o**:
        {', '.join([ctx['doc_id'] for ctx in context])}
        
        Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi Internet.
        """